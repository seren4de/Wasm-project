Input file: centrino-decodewasi.wasm
  binary:    centrino-decodewasi.wasm

Functions:           94
  Imported:          11
  Non-imported:      83
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 5.32% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14438
  call:             229 (1.59% of all instructions)
  call_indirect:     15 (0.10% of all instructions, 6.15% of all calls)

Globals:
  #0 i32
     init: i32.const 71280
     24 × global.get   48 × global.set   72 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (28.92% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.20%) × [-880]
    1  (1.20%) × [-256]
    1  (1.20%) × [-208]
    1  (1.20%) × [-128]
    1  (1.20%) × [-112]
    2  (2.41%) × [-32]
   13 (15.66%) × [-16]
   63 (75.90%) × []
  functions with stack allocation total: 20 (24.10%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"centrino-decodewasi.wasm",1,1.2048193,"[-880]",-880,880
sp_csv_line:"centrino-decodewasi.wasm",1,1.2048193,"[-256]",-256,256
sp_csv_line:"centrino-decodewasi.wasm",1,1.2048193,"[-208]",-208,208
sp_csv_line:"centrino-decodewasi.wasm",1,1.2048193,"[-128]",-128,128
sp_csv_line:"centrino-decodewasi.wasm",1,1.2048193,"[-112]",-112,112
sp_csv_line:"centrino-decodewasi.wasm",2,2.4096386,"[-32]",-32,32
sp_csv_line:"centrino-decodewasi.wasm",13,15.662651,"[-16]",-16,16
sp_csv_line:"centrino-decodewasi.wasm",63,75.90362,"[]",0,0

Counts of function types (18 unique types):
    1  (1.06%) × [i32, i32, i32] -> []
    1  (1.06%) × [i32, i32, i32, i32, i32] -> []
    1  (1.06%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (1.06%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (1.06%) × [i32, i32, i32, i64] -> [i64]
    1  (1.06%) × [i32, i64] -> []
    1  (1.06%) × [i32, i64, i64, i64, i64] -> []
    1  (1.06%) × [f64, i32] -> [f64]
    2  (2.13%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (2.13%) × [i32, i64, i32] -> [i64]
    2  (2.13%) × [i32, i64, i32, i32] -> [i32]
    3  (3.19%) × [] -> [i32]
    7  (7.45%) × [i32] -> []
    8  (8.51%) × [i32, i32, i32, i32] -> [i32]
    9  (9.57%) × [] -> []
   16 (17.02%) × [i32] -> [i32]
   17 (18.09%) × [i32, i32] -> [i32]
   20 (21.28%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (7.23% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 11
  total classes: 2

CSV data for further analysis: centrino-decodewasi.wasm,14438,229,15,6.147541,94,5,4,2,4,11,7.5,11,228,37,16.22807,37,16.22807,37,16.22807

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"centrino-decodewasi.wasm",0,1,4,"i32.load"
"centrino-decodewasi.wasm",1,3,11,"i32.load"
