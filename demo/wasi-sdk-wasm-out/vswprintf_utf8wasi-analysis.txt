Input file: vswprintf_utf8wasi.wasm
  binary:    vswprintf_utf8wasi.wasm

Functions:           91
  Imported:           7
  Non-imported:      84
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 6.59% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16701
  call:             273 (1.63% of all instructions)
  call_indirect:     14 (0.08% of all instructions, 4.88% of all calls)

Globals:
  #0 i32
     init: i32.const 72384
     25 × global.get   47 × global.set   72 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (29.76% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.19%) × [-1040]
    1  (1.19%) × [-880]
    1  (1.19%) × [-384]
    1  (1.19%) × [-256]
    1  (1.19%) × [-224]
    1  (1.19%) × [-208]
    2  (2.38%) × [-128]
    2  (2.38%) × [-32]
   12 (14.29%) × [-16]
   62 (73.81%) × []
  functions with stack allocation total: 22 (26.19%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"vswprintf_utf8wasi.wasm",1,1.1904762,"[-1040]",-1040,1040
sp_csv_line:"vswprintf_utf8wasi.wasm",1,1.1904762,"[-880]",-880,880
sp_csv_line:"vswprintf_utf8wasi.wasm",1,1.1904762,"[-384]",-384,384
sp_csv_line:"vswprintf_utf8wasi.wasm",1,1.1904762,"[-256]",-256,256
sp_csv_line:"vswprintf_utf8wasi.wasm",1,1.1904762,"[-224]",-224,224
sp_csv_line:"vswprintf_utf8wasi.wasm",1,1.1904762,"[-208]",-208,208
sp_csv_line:"vswprintf_utf8wasi.wasm",2,2.3809524,"[-128]",-128,128
sp_csv_line:"vswprintf_utf8wasi.wasm",2,2.3809524,"[-32]",-32,32
sp_csv_line:"vswprintf_utf8wasi.wasm",12,14.285714,"[-16]",-16,16
sp_csv_line:"vswprintf_utf8wasi.wasm",62,73.809525,"[]",0,0

Counts of function types (15 unique types):
    1  (1.10%) × [i32, i32] -> []
    1  (1.10%) × [i32, i32, i32, i32] -> []
    1  (1.10%) × [i32, i32, i32, i32, i32] -> []
    1  (1.10%) × [f64, i32] -> [f64]
    2  (2.20%) × [] -> [i32]
    2  (2.20%) × [i32, i32, i32] -> []
    2  (2.20%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (2.20%) × [i32, i64, i32] -> [i64]
    2  (2.20%) × [i32, i64, i32, i32] -> [i32]
    6  (6.59%) × [i32] -> []
    7  (7.69%) × [i32, i32, i32, i32] -> [i32]
   10 (10.99%) × [] -> []
   13 (14.29%) × [i32] -> [i32]
   17 (18.68%) × [i32, i32, i32] -> [i32]
   24 (26.37%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 5 (5.95% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 10
  total classes: 2

CSV data for further analysis: vswprintf_utf8wasi.wasm,16701,273,14,4.878049,91,6,5,2,4,10,7,10,178,44,24.7191,44,24.7191,44,24.7191

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"vswprintf_utf8wasi.wasm",0,1,4,"i32.load"
"vswprintf_utf8wasi.wasm",1,4,10,"i32.load"
