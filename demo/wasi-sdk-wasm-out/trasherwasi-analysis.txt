Input file: trasherwasi.wasm
  binary:    trasherwasi.wasm

Functions:          102
  Imported:          12
  Non-imported:      90
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.90% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14225
  call:             247 (1.74% of all instructions)
  call_indirect:     17 (0.12% of all instructions, 6.44% of all calls)

Globals:
  #0 i32
     init: i32.const 70880
     23 × global.get   46 × global.set   69 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     23 (25.56% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.11%) × [-880]
    1  (1.11%) × [-256]
    1  (1.11%) × [-208]
    4  (4.44%) × [-32]
   14 (15.56%) × [-16]
   69 (76.67%) × []
  functions with stack allocation total: 21 (23.33%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"trasherwasi.wasm",1,1.1111112,"[-880]",-880,880
sp_csv_line:"trasherwasi.wasm",1,1.1111112,"[-256]",-256,256
sp_csv_line:"trasherwasi.wasm",1,1.1111112,"[-208]",-208,208
sp_csv_line:"trasherwasi.wasm",4,4.4444447,"[-32]",-32,32
sp_csv_line:"trasherwasi.wasm",14,15.555555,"[-16]",-16,16
sp_csv_line:"trasherwasi.wasm",69,76.666664,"[]",0,0

Counts of function types (16 unique types):
    1  (0.98%) × [i32, i32, i32] -> []
    1  (0.98%) × [i32, i32, i32, i32, i32] -> []
    1  (0.98%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.98%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.98%) × [i32, i64, i32] -> []
    1  (0.98%) × [f64, i32] -> [f64]
    2  (1.96%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.96%) × [i32, i64, i32] -> [i64]
    2  (1.96%) × [i32, i64, i32, i32] -> [i32]
    4  (3.92%) × [] -> [i32]
    6  (5.88%) × [i32, i32, i32, i32] -> [i32]
    7  (6.86%) × [i32] -> []
   10  (9.80%) × [] -> []
   17 (16.67%) × [i32] -> [i32]
   20 (19.61%) × [i32, i32, i32] -> [i32]
   26 (25.49%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 7 (7.78% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 11
  total classes: 3

CSV data for further analysis: trasherwasi.wasm,14225,247,17,6.439394,102,5,4,3,1,11,5.666666666666667,5,232,39,16.810345,39,16.810345,38,16.37931

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"trasherwasi.wasm",0,1,1,"local.(get|tee)"
"trasherwasi.wasm",1,1,5,"i32.load"
"trasherwasi.wasm",2,3,11,"i32.load"
