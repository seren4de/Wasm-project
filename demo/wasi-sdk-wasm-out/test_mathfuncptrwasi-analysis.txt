Input file: test_mathfuncptrwasi.wasm
  binary:    test_mathfuncptrwasi.wasm

Functions:           69
  Imported:           7
  Non-imported:      62
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          7
  Of those, unique functions:     7 (i.e., at least 10.14% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     12391
  call:             167 (1.35% of all instructions)
  call_indirect:     16 (0.13% of all instructions, 8.74% of all calls)

Globals:
  #0 i32
     init: i32.const 71168
     11 × global.get   22 × global.set   33 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (17.74% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.61%) × [-880]
    1  (1.61%) × [-256]
    1  (1.61%) × [-208]
    1  (1.61%) × [-32]
    6  (9.68%) × [-16]
   52 (83.87%) × []
  functions with stack allocation total: 10 (16.13%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_mathfuncptrwasi.wasm",1,1.6129032,"[-880]",-880,880
sp_csv_line:"test_mathfuncptrwasi.wasm",1,1.6129032,"[-256]",-256,256
sp_csv_line:"test_mathfuncptrwasi.wasm",1,1.6129032,"[-208]",-208,208
sp_csv_line:"test_mathfuncptrwasi.wasm",1,1.6129032,"[-32]",-32,32
sp_csv_line:"test_mathfuncptrwasi.wasm",6,9.67742,"[-16]",-16,16
sp_csv_line:"test_mathfuncptrwasi.wasm",52,83.870964,"[]",0,0

Counts of function types (16 unique types):
    1  (1.45%) × [i32, i32, i32] -> []
    1  (1.45%) × [i32, i32, i32, i32, i32] -> []
    1  (1.45%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.45%) × [f64, i32] -> [f64]
    2  (2.90%) × [i32] -> [f32]
    2  (2.90%) × [i32, i64, i32] -> [i64]
    2  (2.90%) × [i32, i64, i32, i32] -> [i32]
    2  (2.90%) × [i32, f32] -> [f32]
    3  (4.35%) × [] -> [i32]
    3  (4.35%) × [i32, i32, i32, i32] -> [i32]
    4  (5.80%) × [f32] -> [f32]
    6  (8.70%) × [i32] -> []
    7 (10.14%) × [] -> []
    9 (13.04%) × [i32, i32, i32] -> [i32]
   11 (15.94%) × [i32] -> [i32]
   14 (20.29%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 5 (8.06% of all functions)

Table elements initialization:
         range: [    1,    3]   length:   3   unique funcs:    3   type: [f32] -> [f32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [f32] -> [f32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [f32] -> [f32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 3
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 9
  total classes: 3

CSV data for further analysis: test_mathfuncptrwasi.wasm,12391,167,16,8.74317,69,7,3,3,3,9,5.333333333333333,4,101,31,30.69307,31,30.69307,22,21.782179

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_mathfuncptrwasi.wasm",0,3,3,"local.(get|tee)"
"test_mathfuncptrwasi.wasm",1,1,4,"i32.load"
"test_mathfuncptrwasi.wasm",2,2,9,"i32.load"
