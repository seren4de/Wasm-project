Input file: m68kmakewasi.wasm
  binary:    m68kmakewasi.wasm

Functions:          142
  Imported:          12
  Non-imported:     130
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          7
  Of those, unique functions:     7 (i.e., at least 4.93% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26941
  call:             534 (1.98% of all instructions)
  call_indirect:     33 (0.12% of all instructions, 5.82% of all calls)

Globals:
  #0 i32
     init: i32.const 356128
      54 × global.get   100 × global.set   154 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     54 (41.54% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.77%) × [-1056]
    1  (0.77%) × [-880]
    1  (0.77%) × [-736]
    1  (0.77%) × [-704]
    1  (0.77%) × [-256]
    1  (0.77%) × [-208]
    1  (0.77%) × [-128]
    4  (3.08%) × [-32]
   16 (12.31%) × [-16]
  103 (79.23%) × []
  functions with stack allocation total: 27 (20.77%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"m68kmakewasi.wasm",1,0.7692308,"[-1056]",-1056,1056
sp_csv_line:"m68kmakewasi.wasm",1,0.7692308,"[-880]",-880,880
sp_csv_line:"m68kmakewasi.wasm",1,0.7692308,"[-736]",-736,736
sp_csv_line:"m68kmakewasi.wasm",1,0.7692308,"[-704]",-704,704
sp_csv_line:"m68kmakewasi.wasm",1,0.7692308,"[-256]",-256,256
sp_csv_line:"m68kmakewasi.wasm",1,0.7692308,"[-208]",-208,208
sp_csv_line:"m68kmakewasi.wasm",1,0.7692308,"[-128]",-128,128
sp_csv_line:"m68kmakewasi.wasm",4,3.0769231,"[-32]",-32,32
sp_csv_line:"m68kmakewasi.wasm",16,12.307693,"[-16]",-16,16
sp_csv_line:"m68kmakewasi.wasm",103,79.23077,"[]",0,0

Counts of function types (18 unique types):
    1  (0.70%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.70%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.70%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.70%) × [f64, i32] -> [f64]
    2  (1.41%) × [i32, i32, i32, i32] -> []
    2  (1.41%) × [i32, i64, i32] -> [i64]
    2  (1.41%) × [i32, i64, i32, i32] -> [i32]
    3  (2.11%) × [] -> [i32]
    3  (2.11%) × [i32, i32, i32, i32, i32] -> []
    3  (2.11%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (2.82%) × [i32, i32, i32] -> []
    6  (4.23%) × [i32, i32] -> []
    9  (6.34%) × [i32, i32, i32, i32] -> [i32]
   11  (7.75%) × [] -> []
   11  (7.75%) × [i32] -> []
   21 (14.79%) × [i32] -> [i32]
   26 (18.31%) × [i32, i32, i32] -> [i32]
   35 (24.65%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (8.46% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    12 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               35
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    14 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 12
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 14
  total classes: 4

CSV data for further analysis: m68kmakewasi.wasm,26941,534,33,5.820106,142,7,6,4,1,14,8.25,12,817,75,9.179927,75,9.179927,63,7.7111382

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"m68kmakewasi.wasm",0,1,1,"i32.load"
"m68kmakewasi.wasm",1,1,6,"i32.load"
"m68kmakewasi.wasm",2,1,12,"local.(get|tee)"
"m68kmakewasi.wasm",3,4,14,"i32.load"
