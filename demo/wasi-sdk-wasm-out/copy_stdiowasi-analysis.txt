Input file: copy_stdiowasi.wasm
  binary:    copy_stdiowasi.wasm

Functions:           74
  Imported:          10
  Non-imported:      64
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 5.41% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7791
  call:             105 (1.35% of all instructions)
  call_indirect:     11 (0.14% of all instructions, 9.48% of all calls)

Globals:
  #0 i32
     init: i32.const 67120
     17 × global.get   33 × global.set   50 total (34/66% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     17 (26.56% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    4  (6.25%) × [-32]
   12 (18.75%) × [-16]
   48 (75.00%) × []
  functions with stack allocation total: 16 (25.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"copy_stdiowasi.wasm",4,6.25,"[-32]",-32,32
sp_csv_line:"copy_stdiowasi.wasm",12,18.75,"[-16]",-16,16
sp_csv_line:"copy_stdiowasi.wasm",48,75,"[]",0,0

Counts of function types (12 unique types):
    1  (1.35%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.35%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (1.35%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    2  (2.70%) × [] -> [i32]
    2  (2.70%) × [i32, i64, i32] -> [i64]
    2  (2.70%) × [i32, i64, i32, i32] -> [i32]
    5  (6.76%) × [i32, i32, i32, i32] -> [i32]
    6  (8.11%) × [i32] -> []
    9 (12.16%) × [] -> []
   14 (18.92%) × [i32, i32, i32] -> [i32]
   15 (20.27%) × [i32, i32] -> [i32]
   16 (21.62%) × [i32] -> [i32]

Functions with at least one call_indirect: 4 (6.25% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 7
  total classes: 2

CSV data for further analysis: copy_stdiowasi.wasm,7791,105,11,9.4827585,74,4,3,2,4,7,5.5,7,106,18,16.981133,18,16.981133,18,16.981133

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"copy_stdiowasi.wasm",0,1,4,"i32.load"
"copy_stdiowasi.wasm",1,2,7,"i32.load"
