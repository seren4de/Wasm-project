Input file: s-argwasi.wasm
  binary:    s-argwasi.wasm

Functions:           32
  Imported:           3
  Non-imported:      29
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          0
  Of those, unique functions:     0 (i.e., at least 0.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      6631
  call:              50 (0.75% of all instructions)
  call_indirect:      0 (0.00% of all instructions, 0.00% of all calls)

Globals:
  #0 i32
     init: i32.const 67136
      8 × global.get   14 × global.set   22 total (36/64% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      8 (27.59% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    2  (6.90%) × [-16]
   27 (93.10%) × []
  functions with stack allocation total: 2 (6.90%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-argwasi.wasm",2,6.8965516,"[-16]",-16,16
sp_csv_line:"s-argwasi.wasm",27,93.10345,"[]",0,0

Counts of function types (7 unique types):
    1  (3.12%) × [i64, i64, i64, i64] -> [i32]
    2  (6.25%) × [] -> [i32]
    2  (6.25%) × [i32, i32, i32] -> [i32]
    5 (15.62%) × [] -> []
    6 (18.75%) × [i32] -> []
    6 (18.75%) × [i32] -> [i32]
   10 (31.25%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 0 (0.00% of all functions)

Table elements initialization:
  0 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  0 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  total classes: 0

