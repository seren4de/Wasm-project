Input file: hppwasi.wasm
  binary:    hppwasi.wasm

Functions:          123
  Imported:          12
  Non-imported:     111
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 3.25% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     22324
  call:             354 (1.59% of all instructions)
  call_indirect:     24 (0.11% of all instructions, 6.35% of all calls)

Globals:
  #0 i32
     init: i32.const 70176
     33 × global.get   62 × global.set   95 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     33 (29.73% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.90%) × [-880]
    1  (0.90%) × [-512]
    1  (0.90%) × [-256]
    1  (0.90%) × [-208]
    1  (0.90%) × [-112]
    4  (3.60%) × [-32]
   12 (10.81%) × [-16]
   90 (81.08%) × []
  functions with stack allocation total: 21 (18.92%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"hppwasi.wasm",1,0.9009009,"[-880]",-880,880
sp_csv_line:"hppwasi.wasm",1,0.9009009,"[-512]",-512,512
sp_csv_line:"hppwasi.wasm",1,0.9009009,"[-256]",-256,256
sp_csv_line:"hppwasi.wasm",1,0.9009009,"[-208]",-208,208
sp_csv_line:"hppwasi.wasm",1,0.9009009,"[-112]",-112,112
sp_csv_line:"hppwasi.wasm",4,3.6036036,"[-32]",-32,32
sp_csv_line:"hppwasi.wasm",12,10.810811,"[-16]",-16,16
sp_csv_line:"hppwasi.wasm",90,81.08108,"[]",0,0

Counts of function types (22 unique types):
    1  (0.81%) × [i32, i32] -> []
    1  (0.81%) × [i32, i32] -> [i64]
    1  (0.81%) × [i32, i32] -> [f64]
    1  (0.81%) × [i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32] -> [f64]
    1  (0.81%) × [i32, i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (0.81%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.81%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.81%) × [i32, i64] -> []
    1  (0.81%) × [f64, f64] -> [f64]
    2  (1.63%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.63%) × [i32, i64, i32] -> [i64]
    2  (1.63%) × [i32, i64, i32, i32] -> [i32]
    2  (1.63%) × [f64, i32] -> [f64]
    3  (2.44%) × [] -> [i32]
    7  (5.69%) × [i32] -> []
    7  (5.69%) × [i32, i32, i32, i32] -> [i32]
   10  (8.13%) × [] -> []
   21 (17.07%) × [i32, i32, i32] -> [i32]
   27 (21.95%) × [i32] -> [i32]
   29 (23.58%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (9.91% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    15 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     7 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 15
  total classes: 4

CSV data for further analysis: hppwasi.wasm,22324,354,24,6.3492064,123,4,4,4,1,15,6,7,358,39,10.893855,39,10.893855,38,10.614525

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"hppwasi.wasm",0,1,1,"i32.load"
"hppwasi.wasm",1,1,1,"local.(get|tee)"
"hppwasi.wasm",2,1,7,"i32.load"
"hppwasi.wasm",3,2,15,"i32.load"
