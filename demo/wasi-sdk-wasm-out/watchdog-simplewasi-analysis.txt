Input file: watchdog-simplewasi.wasm
  binary:    watchdog-simplewasi.wasm

Functions:           69
  Imported:           9
  Non-imported:      60
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 4.35% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7997
  call:              96 (1.20% of all instructions)
  call_indirect:     11 (0.14% of all instructions, 10.28% of all calls)

Globals:
  #0 i32
     init: i32.const 68992
     16 × global.get   32 × global.set   48 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     16 (26.67% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.67%) × [-112]
    1  (1.67%) × [-48]
    1  (1.67%) × [-32]
   12 (20.00%) × [-16]
   45 (75.00%) × []
  functions with stack allocation total: 15 (25.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"watchdog-simplewasi.wasm",1,1.6666666,"[-112]",-112,112
sp_csv_line:"watchdog-simplewasi.wasm",1,1.6666666,"[-48]",-48,48
sp_csv_line:"watchdog-simplewasi.wasm",1,1.6666666,"[-32]",-32,32
sp_csv_line:"watchdog-simplewasi.wasm",12,20,"[-16]",-16,16
sp_csv_line:"watchdog-simplewasi.wasm",45,75,"[]",0,0

Counts of function types (15 unique types):
    1  (1.45%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.45%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (1.45%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (1.45%) × [i32, i64, i64, i32] -> []
    2  (2.90%) × [] -> [i32]
    2  (2.90%) × [i32, i64, i32] -> [i64]
    2  (2.90%) × [i32, i64, i32, i32] -> [i32]
    2  (2.90%) × [i32, i64, i64, i64, i64] -> []
    2  (2.90%) × [i32, i64, i64, i64, i64, i32] -> []
    7 (10.14%) × [i32] -> []
    7 (10.14%) × [i32, i32, i32, i32] -> [i32]
    8 (11.59%) × [] -> []
   10 (14.49%) × [i32, i32] -> [i32]
   11 (15.94%) × [i32, i32, i32] -> [i32]
   12 (17.39%) × [i32] -> [i32]

Functions with at least one call_indirect: 3 (5.00% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  total classes: 2

CSV data for further analysis: watchdog-simplewasi.wasm,7997,96,11,10.280374,69,3,2,2,4,7,5.5,7,85,11,12.941176,11,12.941176,11,12.941176

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"watchdog-simplewasi.wasm",0,1,4,"i32.load"
"watchdog-simplewasi.wasm",1,1,7,"i32.load"
