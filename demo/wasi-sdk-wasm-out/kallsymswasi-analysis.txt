Input file: kallsymswasi.wasm
  binary:    kallsymswasi.wasm

Functions:          124
  Imported:           8
  Non-imported:     116
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 4.84% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     29862
  call:             402 (1.35% of all instructions)
  call_indirect:     27 (0.09% of all instructions, 6.29% of all calls)

Globals:
  #0 i32
     init: i32.const 336496
     44 × global.get   74 × global.set  118 total (37/63% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     44 (37.93% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.86%) × [-1056]
    1  (0.86%) × [-880]
    1  (0.86%) × [-736]
    1  (0.86%) × [-704]
    1  (0.86%) × [-512]
    1  (0.86%) × [-304]
    1  (0.86%) × [-256]
    1  (0.86%) × [-208]
    1  (0.86%) × [-32]
   13 (11.21%) × [-16]
   94 (81.03%) × []
  functions with stack allocation total: 22 (18.97%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-1056]",-1056,1056
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-880]",-880,880
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-736]",-736,736
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-704]",-704,704
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-512]",-512,512
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-304]",-304,304
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-256]",-256,256
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-208]",-208,208
sp_csv_line:"kallsymswasi.wasm",1,0.86206895,"[-32]",-32,32
sp_csv_line:"kallsymswasi.wasm",13,11.206897,"[-16]",-16,16
sp_csv_line:"kallsymswasi.wasm",94,81.034485,"[]",0,0

Counts of function types (24 unique types):
    1  (0.81%) × [i32, i32] -> [i64]
    1  (0.81%) × [i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32] -> [f64]
    1  (0.81%) × [i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.81%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (0.81%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i64] -> [i64]
    1  (0.81%) × [i32, i64] -> []
    1  (0.81%) × [i32, i64] -> [i32]
    1  (0.81%) × [i32, i64, i64, i64, i64] -> []
    1  (0.81%) × [f64, f64] -> [f64]
    2  (1.61%) × [i32, i64, i32] -> [i64]
    2  (1.61%) × [i32, i64, i32, i32] -> [i32]
    2  (1.61%) × [f64, i32] -> [f64]
    4  (3.23%) × [] -> [i32]
    4  (3.23%) × [i32, i32] -> []
    6  (4.84%) × [i32, i32, i32, i32] -> [i32]
    8  (6.45%) × [i32] -> []
   15 (12.10%) × [] -> []
   21 (16.94%) × [i32, i32, i32] -> [i32]
   22 (17.74%) × [i32] -> [i32]
   25 (20.16%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 8 (6.90% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    12 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 11
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 12
  total classes: 3

CSV data for further analysis: kallsymswasi.wasm,29862,402,27,6.2937064,124,6,4,3,4,12,9,11,539,49,9.090909,49,9.090909,37,6.864564

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"kallsymswasi.wasm",0,1,4,"i32.load"
"kallsymswasi.wasm",1,3,11,"i32.load"
"kallsymswasi.wasm",2,1,12,"local.(get|tee)"
