Input file: uaddcheckwasi.wasm
  binary:    uaddcheckwasi.wasm

Functions:           72
  Imported:           7
  Non-imported:      65
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 5.56% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13457
  call:             186 (1.38% of all instructions)
  call_indirect:     15 (0.11% of all instructions, 7.46% of all calls)

Globals:
  #0 i32
     init: i32.const 71120
     18 × global.get   28 × global.set   46 total (39/61% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     18 (27.69% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.54%) × [-880]
    1  (1.54%) × [-256]
    1  (1.54%) × [-208]
    1  (1.54%) × [-112]
    1  (1.54%) × [-32]
    8 (12.31%) × [-16]
   52 (80.00%) × []
  functions with stack allocation total: 13 (20.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"uaddcheckwasi.wasm",1,1.5384616,"[-880]",-880,880
sp_csv_line:"uaddcheckwasi.wasm",1,1.5384616,"[-256]",-256,256
sp_csv_line:"uaddcheckwasi.wasm",1,1.5384616,"[-208]",-208,208
sp_csv_line:"uaddcheckwasi.wasm",1,1.5384616,"[-112]",-112,112
sp_csv_line:"uaddcheckwasi.wasm",1,1.5384616,"[-32]",-32,32
sp_csv_line:"uaddcheckwasi.wasm",8,12.307693,"[-16]",-16,16
sp_csv_line:"uaddcheckwasi.wasm",52,80,"[]",0,0

Counts of function types (16 unique types):
    1  (1.39%) × [i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.39%) × [i32, i32, i32, i64] -> [i64]
    1  (1.39%) × [i32, i64] -> []
    1  (1.39%) × [i32, i64, i64, i64, i64] -> []
    1  (1.39%) × [f64, i32] -> [f64]
    2  (2.78%) × [i32, i64, i32] -> [i64]
    2  (2.78%) × [i32, i64, i32, i32] -> [i32]
    3  (4.17%) × [] -> [i32]
    3  (4.17%) × [i32, i32, i32, i32] -> [i32]
    6  (8.33%) × [i32] -> []
    7  (9.72%) × [] -> []
   10 (13.89%) × [i32, i32, i32] -> [i32]
   14 (19.44%) × [i32] -> [i32]
   18 (25.00%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (9.23% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 11
  total classes: 2

CSV data for further analysis: uaddcheckwasi.wasm,13457,186,15,7.4626865,72,4,3,2,4,11,7.5,11,118,26,22.033897,26,22.033897,26,22.033897

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"uaddcheckwasi.wasm",0,1,4,"i32.load"
"uaddcheckwasi.wasm",1,2,11,"i32.load"
