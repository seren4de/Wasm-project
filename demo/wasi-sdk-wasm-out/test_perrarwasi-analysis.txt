Input file: test_perrarwasi.wasm
  binary:    test_perrarwasi.wasm

Functions:           65
  Imported:          10
  Non-imported:      55
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 4.62% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      6962
  call:              98 (1.41% of all instructions)
  call_indirect:     11 (0.16% of all instructions, 10.09% of all calls)

Globals:
  #0 i32
     init: i32.const 68992
     11 × global.get   22 × global.set   33 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (20.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.82%) × [-32]
    9 (16.36%) × [-16]
   45 (81.82%) × []
  functions with stack allocation total: 10 (18.18%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_perrarwasi.wasm",1,1.8181819,"[-32]",-32,32
sp_csv_line:"test_perrarwasi.wasm",9,16.363636,"[-16]",-16,16
sp_csv_line:"test_perrarwasi.wasm",45,81.818184,"[]",0,0

Counts of function types (12 unique types):
    1  (1.54%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.54%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (1.54%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    2  (3.08%) × [i32, i64, i32] -> [i64]
    2  (3.08%) × [i32, i64, i32, i32] -> [i32]
    3  (4.62%) × [] -> [i32]
    4  (6.15%) × [i32, i32, i32, i32] -> [i32]
    7 (10.77%) × [i32] -> []
    8 (12.31%) × [] -> []
   10 (15.38%) × [i32, i32, i32] -> [i32]
   11 (16.92%) × [i32] -> [i32]
   15 (23.08%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 3 (5.45% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  total classes: 2

CSV data for further analysis: test_perrarwasi.wasm,6962,98,11,10.091743,65,3,2,2,4,7,5.5,7,78,11,14.102564,11,14.102564,11,14.102564

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_perrarwasi.wasm",0,1,4,"i32.load"
"test_perrarwasi.wasm",1,1,7,"i32.load"
