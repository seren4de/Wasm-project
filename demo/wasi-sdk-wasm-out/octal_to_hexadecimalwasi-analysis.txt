Input file: octal_to_hexadecimalwasi.wasm
  binary:    octal_to_hexadecimalwasi.wasm

Functions:           95
  Imported:           6
  Non-imported:      89
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 6.32% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     20771
  call:             279 (1.34% of all instructions)
  call_indirect:     15 (0.07% of all instructions, 5.10% of all calls)

Globals:
  #0 i32
     init: i32.const 79040
     25 × global.get   47 × global.set   72 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (28.09% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.12%) × [-880]
    1  (1.12%) × [-512]
    1  (1.12%) × [-304]
    1  (1.12%) × [-256]
    1  (1.12%) × [-208]
    1  (1.12%) × [-128]
    1  (1.12%) × [-32]
   14 (15.73%) × [-16]
   68 (76.40%) × []
  functions with stack allocation total: 21 (23.60%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"octal_to_hexadecimalwasi.wasm",1,1.1235955,"[-880]",-880,880
sp_csv_line:"octal_to_hexadecimalwasi.wasm",1,1.1235955,"[-512]",-512,512
sp_csv_line:"octal_to_hexadecimalwasi.wasm",1,1.1235955,"[-304]",-304,304
sp_csv_line:"octal_to_hexadecimalwasi.wasm",1,1.1235955,"[-256]",-256,256
sp_csv_line:"octal_to_hexadecimalwasi.wasm",1,1.1235955,"[-208]",-208,208
sp_csv_line:"octal_to_hexadecimalwasi.wasm",1,1.1235955,"[-128]",-128,128
sp_csv_line:"octal_to_hexadecimalwasi.wasm",1,1.1235955,"[-32]",-32,32
sp_csv_line:"octal_to_hexadecimalwasi.wasm",14,15.730337,"[-16]",-16,16
sp_csv_line:"octal_to_hexadecimalwasi.wasm",68,76.404495,"[]",0,0

Counts of function types (27 unique types):
    1  (1.05%) × [i32, i32] -> []
    1  (1.05%) × [i32, i32] -> [i64]
    1  (1.05%) × [i32, i32, i32] -> []
    1  (1.05%) × [i32, i32, i32] -> [f64]
    1  (1.05%) × [i32, i32, i32, i32] -> []
    1  (1.05%) × [i32, i32, i32, i32, i32] -> []
    1  (1.05%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.05%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (1.05%) × [i32, i32, i32, i64] -> [i64]
    1  (1.05%) × [i32, i64] -> []
    1  (1.05%) × [i32, i64, i64, i64, i64] -> []
    1  (1.05%) × [i32, f64] -> [f64]
    1  (1.05%) × [i64] -> [i32]
    1  (1.05%) × [f64] -> [f64]
    1  (1.05%) × [f64, i64, i64] -> [f64]
    2  (2.11%) × [] -> [i32]
    2  (2.11%) × [i32] -> [f64]
    2  (2.11%) × [i32, i64, i32] -> [i64]
    2  (2.11%) × [i32, i64, i32, i32] -> [i32]
    2  (2.11%) × [f64, i32] -> [f64]
    2  (2.11%) × [f64, f64] -> [f64]
    6  (6.32%) × [i32] -> []
    7  (7.37%) × [i32, i32, i32, i32] -> [i32]
    9  (9.47%) × [] -> []
   12 (12.63%) × [i32, i32] -> [i32]
   17 (17.89%) × [i32] -> [i32]
   17 (17.89%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (6.74% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 11
  total classes: 2

CSV data for further analysis: octal_to_hexadecimalwasi.wasm,20771,279,15,5.102041,95,6,5,2,4,11,7.5,11,195,48,24.615385,48,24.615385,48,24.615385

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"octal_to_hexadecimalwasi.wasm",0,1,4,"i32.load"
"octal_to_hexadecimalwasi.wasm",1,4,11,"i32.load"
