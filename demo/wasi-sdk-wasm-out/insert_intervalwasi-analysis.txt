Input file: insert_intervalwasi.wasm
  binary:    insert_intervalwasi.wasm

Functions:           67
  Imported:           7
  Non-imported:      60
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 7.46% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14738
  call:             197 (1.34% of all instructions)
  call_indirect:     25 (0.17% of all instructions, 11.26% of all calls)

Globals:
  #0 i32
     init: i32.const 70816
     16 × global.get   30 × global.set   46 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     16 (26.67% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.67%) × [-880]
    1  (1.67%) × [-736]
    1  (1.67%) × [-704]
    1  (1.67%) × [-256]
    1  (1.67%) × [-208]
    1  (1.67%) × [-32]
    7 (11.67%) × [-16]
   47 (78.33%) × []
  functions with stack allocation total: 13 (21.67%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"insert_intervalwasi.wasm",1,1.6666666,"[-880]",-880,880
sp_csv_line:"insert_intervalwasi.wasm",1,1.6666666,"[-736]",-736,736
sp_csv_line:"insert_intervalwasi.wasm",1,1.6666666,"[-704]",-704,704
sp_csv_line:"insert_intervalwasi.wasm",1,1.6666666,"[-256]",-256,256
sp_csv_line:"insert_intervalwasi.wasm",1,1.6666666,"[-208]",-208,208
sp_csv_line:"insert_intervalwasi.wasm",1,1.6666666,"[-32]",-32,32
sp_csv_line:"insert_intervalwasi.wasm",7,11.666667,"[-16]",-16,16
sp_csv_line:"insert_intervalwasi.wasm",47,78.333336,"[]",0,0

Counts of function types (16 unique types):
    1  (1.49%) × [i32, i32, i32] -> []
    1  (1.49%) × [i32, i32, i32, i32] -> []
    1  (1.49%) × [i32, i32, i32, i32, i32] -> []
    1  (1.49%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.49%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (1.49%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.49%) × [f64, i32] -> [f64]
    2  (2.99%) × [i32, i64, i32] -> [i64]
    2  (2.99%) × [i32, i64, i32, i32] -> [i32]
    3  (4.48%) × [] -> [i32]
    3  (4.48%) × [i32, i32, i32, i32] -> [i32]
    6  (8.96%) × [i32] -> []
    7 (10.45%) × [] -> []
   10 (14.93%) × [i32, i32, i32] -> [i32]
   12 (17.91%) × [i32] -> [i32]
   15 (22.39%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (10.00% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    12 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 9
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 12
  total classes: 3

CSV data for further analysis: insert_intervalwasi.wasm,14738,197,25,11.261261,67,5,3,3,4,12,8.333333333333334,9,278,34,12.230216,34,12.230216,22,7.913669

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"insert_intervalwasi.wasm",0,1,4,"i32.load"
"insert_intervalwasi.wasm",1,2,9,"i32.load"
"insert_intervalwasi.wasm",2,1,12,"local.(get|tee)"
