Input file: csvOutputwasi.wasm
  binary:    csvOutputwasi.wasm

Functions:          115
  Imported:          10
  Non-imported:     105
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.35% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     21936
  call:             341 (1.55% of all instructions)
  call_indirect:     23 (0.10% of all instructions, 6.32% of all calls)

Globals:
  #0 i32
     init: i32.const 73568
     28 × global.get   54 × global.set   82 total (34/66% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     28 (26.67% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.95%) × [-880]
    1  (0.95%) × [-512]
    1  (0.95%) × [-304]
    1  (0.95%) × [-256]
    1  (0.95%) × [-208]
    4  (3.81%) × [-32]
   15 (14.29%) × [-16]
   81 (77.14%) × []
  functions with stack allocation total: 24 (22.86%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"csvOutputwasi.wasm",1,0.95238096,"[-880]",-880,880
sp_csv_line:"csvOutputwasi.wasm",1,0.95238096,"[-512]",-512,512
sp_csv_line:"csvOutputwasi.wasm",1,0.95238096,"[-304]",-304,304
sp_csv_line:"csvOutputwasi.wasm",1,0.95238096,"[-256]",-256,256
sp_csv_line:"csvOutputwasi.wasm",1,0.95238096,"[-208]",-208,208
sp_csv_line:"csvOutputwasi.wasm",4,3.8095238,"[-32]",-32,32
sp_csv_line:"csvOutputwasi.wasm",15,14.285714,"[-16]",-16,16
sp_csv_line:"csvOutputwasi.wasm",81,77.14286,"[]",0,0

Counts of function types (23 unique types):
    1  (0.87%) × [i32, i32] -> []
    1  (0.87%) × [i32, i32] -> [i64]
    1  (0.87%) × [i32, i32, i32] -> []
    1  (0.87%) × [i32, i32, i32] -> [f64]
    1  (0.87%) × [i32, i32, i32, i32, i32] -> []
    1  (0.87%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (0.87%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.87%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.87%) × [i32, i32, i32, i64] -> [i64]
    1  (0.87%) × [i32, i64] -> []
    1  (0.87%) × [i32, i64, i64, i64, i64] -> []
    1  (0.87%) × [f64, f64] -> [f64]
    2  (1.74%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.74%) × [i32, i64, i32] -> [i64]
    2  (1.74%) × [i32, i64, i32, i32] -> [i32]
    2  (1.74%) × [f64, i32] -> [f64]
    3  (2.61%) × [] -> [i32]
    7  (6.09%) × [i32, i32, i32, i32] -> [i32]
    8  (6.96%) × [i32] -> []
   12 (10.43%) × [] -> []
   21 (18.26%) × [i32] -> [i32]
   22 (19.13%) × [i32, i32] -> [i32]
   22 (19.13%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (9.52% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    14 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     7 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 14
  total classes: 4

CSV data for further analysis: csvOutputwasi.wasm,21936,341,23,6.3186812,115,5,5,4,1,14,5.75,7,345,51,14.782609,51,14.782609,50,14.492754

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"csvOutputwasi.wasm",0,1,1,"i32.load"
"csvOutputwasi.wasm",1,1,1,"local.(get|tee)"
"csvOutputwasi.wasm",2,1,7,"i32.load"
"csvOutputwasi.wasm",3,3,14,"i32.load"
