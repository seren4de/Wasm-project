Input file: hamming_weightwasi.wasm
  binary:    hamming_weightwasi.wasm

Functions:           64
  Imported:           7
  Non-imported:      57
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 6.25% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     12045
  call:             165 (1.37% of all instructions)
  call_indirect:     13 (0.11% of all instructions, 7.30% of all calls)

Globals:
  #0 i32
     init: i32.const 70800
     13 × global.get   24 × global.set   37 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     13 (22.81% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.75%) × [-880]
    1  (1.75%) × [-256]
    1  (1.75%) × [-208]
    1  (1.75%) × [-32]
    7 (12.28%) × [-16]
   46 (80.70%) × []
  functions with stack allocation total: 11 (19.30%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"hamming_weightwasi.wasm",1,1.754386,"[-880]",-880,880
sp_csv_line:"hamming_weightwasi.wasm",1,1.754386,"[-256]",-256,256
sp_csv_line:"hamming_weightwasi.wasm",1,1.754386,"[-208]",-208,208
sp_csv_line:"hamming_weightwasi.wasm",1,1.754386,"[-32]",-32,32
sp_csv_line:"hamming_weightwasi.wasm",7,12.280702,"[-16]",-16,16
sp_csv_line:"hamming_weightwasi.wasm",46,80.70175,"[]",0,0

Counts of function types (13 unique types):
    1  (1.56%) × [i32, i32, i32] -> []
    1  (1.56%) × [i32, i32, i32, i32, i32] -> []
    1  (1.56%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.56%) × [f64, i32] -> [f64]
    2  (3.12%) × [i32, i64, i32] -> [i64]
    2  (3.12%) × [i32, i64, i32, i32] -> [i32]
    3  (4.69%) × [] -> [i32]
    3  (4.69%) × [i32, i32, i32, i32] -> [i32]
    6  (9.38%) × [i32] -> []
    7 (10.94%) × [] -> []
   10 (15.62%) × [i32, i32, i32] -> [i32]
   13 (20.31%) × [i32] -> [i32]
   14 (21.88%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 4 (7.02% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 9
  total classes: 2

CSV data for further analysis: hamming_weightwasi.wasm,12045,165,13,7.303371,64,4,3,2,4,9,6.5,9,98,22,22.44898,22,22.44898,22,22.44898

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"hamming_weightwasi.wasm",0,1,4,"i32.load"
"hamming_weightwasi.wasm",1,2,9,"i32.load"
