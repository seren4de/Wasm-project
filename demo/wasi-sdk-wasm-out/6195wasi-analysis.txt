Input file: 6195wasi.wasm
  binary:    6195wasi.wasm

Functions:          103
  Imported:          12
  Non-imported:      91
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 5.83% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14473
  call:             266 (1.84% of all instructions)
  call_indirect:     19 (0.13% of all instructions, 6.67% of all calls)

Globals:
  #0 i32
     init: i32.const 71584
     23 × global.get   46 × global.set   69 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     23 (25.27% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.10%) × [-880]
    1  (1.10%) × [-256]
    1  (1.10%) × [-208]
    1  (1.10%) × [-128]
    4  (4.40%) × [-32]
   14 (15.38%) × [-16]
   69 (75.82%) × []
  functions with stack allocation total: 22 (24.18%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"6195wasi.wasm",1,1.0989012,"[-880]",-880,880
sp_csv_line:"6195wasi.wasm",1,1.0989012,"[-256]",-256,256
sp_csv_line:"6195wasi.wasm",1,1.0989012,"[-208]",-208,208
sp_csv_line:"6195wasi.wasm",1,1.0989012,"[-128]",-128,128
sp_csv_line:"6195wasi.wasm",4,4.3956046,"[-32]",-32,32
sp_csv_line:"6195wasi.wasm",14,15.384615,"[-16]",-16,16
sp_csv_line:"6195wasi.wasm",69,75.82417,"[]",0,0

Counts of function types (15 unique types):
    1  (0.97%) × [i32, i32, i32] -> []
    1  (0.97%) × [i32, i32, i32, i32, i32] -> []
    1  (0.97%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.97%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.97%) × [f64, i32] -> [f64]
    2  (1.94%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.94%) × [i32, i64, i32] -> [i64]
    2  (1.94%) × [i32, i64, i32, i32] -> [i32]
    3  (2.91%) × [] -> [i32]
    7  (6.80%) × [i32, i32, i32, i32] -> [i32]
    8  (7.77%) × [i32] -> []
   10  (9.71%) × [] -> []
   17 (16.50%) × [i32] -> [i32]
   21 (20.39%) × [i32, i32, i32] -> [i32]
   26 (25.24%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 7 (7.69% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    12 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 12
  total classes: 3

CSV data for further analysis: 6195wasi.wasm,14473,266,19,6.6666665,103,6,6,3,1,12,6.333333333333333,6,281,55,19.572954,55,19.572954,55,19.572954

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"6195wasi.wasm",0,1,1,"i32.load"
"6195wasi.wasm",1,1,6,"i32.load"
"6195wasi.wasm",2,4,12,"i32.load"
