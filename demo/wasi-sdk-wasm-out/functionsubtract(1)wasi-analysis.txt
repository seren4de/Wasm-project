Input file: functionsubtract(1)wasi.wasm
  binary:    functionsubtract(1)wasi.wasm

Functions:           47
  Imported:           8
  Non-imported:      39
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 10.64% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5339
  call:              61 (1.14% of all instructions)
  call_indirect:      8 (0.15% of all instructions, 11.59% of all calls)

Globals:
  #0 i32
     init: i32.const 69536
      9 × global.get   18 × global.set   27 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (23.08% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.56%) × [-32]
    8 (20.51%) × [-16]
   30 (76.92%) × []
  functions with stack allocation total: 9 (23.08%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"functionsubtract(1)wasi.wasm",1,2.5641026,"[-32]",-32,32
sp_csv_line:"functionsubtract(1)wasi.wasm",8,20.512821,"[-16]",-16,16
sp_csv_line:"functionsubtract(1)wasi.wasm",30,76.92308,"[]",0,0

Counts of function types (9 unique types):
    2  (4.26%) × [i32, i64, i32] -> [i64]
    2  (4.26%) × [i32, i64, i32, i32] -> [i32]
    3  (6.38%) × [] -> [i32]
    4  (8.51%) × [i32, i32, i32, i32] -> [i32]
    6 (12.77%) × [] -> []
    6 (12.77%) × [i32] -> []
    7 (14.89%) × [i32, i32, i32] -> [i32]
    8 (17.02%) × [i32] -> [i32]
    9 (19.15%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 1 (2.56% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 4
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  total classes: 2

CSV data for further analysis: functionsubtract(1)wasi.wasm,5339,61,8,11.594203,47,5,4,2,4,4,4,4,36,16,44.444443,16,44.444443,16,44.444443

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"functionsubtract(1)wasi.wasm",0,3,4,"i32.load"
"functionsubtract(1)wasi.wasm",1,1,4,"i32.load"
