Input file: spirographwasi.wasm
  binary:    spirographwasi.wasm

Functions:          109
  Imported:          12
  Non-imported:      97
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.59% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17554
  call:             275 (1.57% of all instructions)
  call_indirect:     19 (0.11% of all instructions, 6.46% of all calls)

Globals:
  #0 i32
     init: i32.const 72528
     29 × global.get   58 × global.set   87 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     29 (29.90% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.03%) × [-880]
    1  (1.03%) × [-560]
    1  (1.03%) × [-256]
    1  (1.03%) × [-208]
    1  (1.03%) × [-128]
    1  (1.03%) × [-48]
    4  (4.12%) × [-32]
   16 (16.49%) × [-16]
   71 (73.20%) × []
  functions with stack allocation total: 26 (26.80%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"spirographwasi.wasm",1,1.0309278,"[-880]",-880,880
sp_csv_line:"spirographwasi.wasm",1,1.0309278,"[-560]",-560,560
sp_csv_line:"spirographwasi.wasm",1,1.0309278,"[-256]",-256,256
sp_csv_line:"spirographwasi.wasm",1,1.0309278,"[-208]",-208,208
sp_csv_line:"spirographwasi.wasm",1,1.0309278,"[-128]",-128,128
sp_csv_line:"spirographwasi.wasm",1,1.0309278,"[-48]",-48,48
sp_csv_line:"spirographwasi.wasm",4,4.123711,"[-32]",-32,32
sp_csv_line:"spirographwasi.wasm",16,16.494844,"[-16]",-16,16
sp_csv_line:"spirographwasi.wasm",71,73.19588,"[]",0,0

Counts of function types (20 unique types):
    1  (0.92%) × [i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.92%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.92%) × [i32, i32, f64, f64, i32, f64] -> []
    1  (0.92%) × [f64, i32] -> [i32]
    1  (0.92%) × [f64, f64] -> [f64]
    1  (0.92%) × [f64, f64, i32] -> [f64]
    2  (1.83%) × [i32, i64, i32] -> [i64]
    2  (1.83%) × [i32, i64, i32, i32] -> [i32]
    2  (1.83%) × [f64] -> [f64]
    2  (1.83%) × [f64, i32] -> [f64]
    3  (2.75%) × [] -> [i32]
    3  (2.75%) × [i32, i32, i32, i32, i32] -> [i32]
    8  (7.34%) × [i32] -> []
    8  (7.34%) × [i32, i32, i32, i32] -> [i32]
   11 (10.09%) × [] -> []
   16 (14.68%) × [i32] -> [i32]
   19 (17.43%) × [i32, i32, i32] -> [i32]
   25 (22.94%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 7 (7.22% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    12 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 12
  total classes: 3

CSV data for further analysis: spirographwasi.wasm,17554,275,19,6.462585,109,5,5,3,1,12,6.333333333333333,6,256,43,16.796875,43,16.796875,43,16.796875

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"spirographwasi.wasm",0,1,1,"i32.load"
"spirographwasi.wasm",1,1,6,"i32.load"
"spirographwasi.wasm",2,3,12,"i32.load"
