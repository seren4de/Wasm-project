Input file: radix_sort_2wasi.wasm
  binary:    radix_sort_2wasi.wasm

Functions:           91
  Imported:           8
  Non-imported:      83
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 5.49% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     20891
  call:             281 (1.35% of all instructions)
  call_indirect:     16 (0.08% of all instructions, 5.39% of all calls)

Globals:
  #0 i32
     init: i32.const 72544
     25 × global.get   46 × global.set   71 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (30.12% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.20%) × [-880]
    1  (1.20%) × [-512]
    1  (1.20%) × [-304]
    1  (1.20%) × [-256]
    1  (1.20%) × [-208]
    1  (1.20%) × [-32]
   13 (15.66%) × [-16]
   64 (77.11%) × []
  functions with stack allocation total: 19 (22.89%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"radix_sort_2wasi.wasm",1,1.2048193,"[-880]",-880,880
sp_csv_line:"radix_sort_2wasi.wasm",1,1.2048193,"[-512]",-512,512
sp_csv_line:"radix_sort_2wasi.wasm",1,1.2048193,"[-304]",-304,304
sp_csv_line:"radix_sort_2wasi.wasm",1,1.2048193,"[-256]",-256,256
sp_csv_line:"radix_sort_2wasi.wasm",1,1.2048193,"[-208]",-208,208
sp_csv_line:"radix_sort_2wasi.wasm",1,1.2048193,"[-32]",-32,32
sp_csv_line:"radix_sort_2wasi.wasm",13,15.662651,"[-16]",-16,16
sp_csv_line:"radix_sort_2wasi.wasm",64,77.10844,"[]",0,0

Counts of function types (21 unique types):
    1  (1.10%) × [i32, i32] -> [i64]
    1  (1.10%) × [i32, i32, i32] -> [f64]
    1  (1.10%) × [i32, i32, i32, i32, i32] -> []
    1  (1.10%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.10%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (1.10%) × [i32, i32, i32, i64] -> [i64]
    1  (1.10%) × [i32, i64] -> []
    1  (1.10%) × [i32, i64, i64, i64, i64] -> []
    1  (1.10%) × [f64, f64] -> [f64]
    2  (2.20%) × [i32, i32] -> []
    2  (2.20%) × [i32, i64, i32] -> [i64]
    2  (2.20%) × [i32, i64, i32, i32] -> [i32]
    2  (2.20%) × [f64, i32] -> [f64]
    3  (3.30%) × [] -> [i32]
    3  (3.30%) × [i32, i32, i32] -> []
    6  (6.59%) × [i32] -> []
    6  (6.59%) × [i32, i32, i32, i32] -> [i32]
    8  (8.79%) × [] -> []
   13 (14.29%) × [i32, i32, i32] -> [i32]
   16 (17.58%) × [i32] -> [i32]
   19 (20.88%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 7 (8.43% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    12 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 12
  total classes: 2

CSV data for further analysis: radix_sort_2wasi.wasm,20891,281,16,5.3872056,91,5,4,2,4,12,8,12,164,40,24.390244,40,24.390244,40,24.390244

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"radix_sort_2wasi.wasm",0,1,4,"i32.load"
"radix_sort_2wasi.wasm",1,3,12,"i32.load"
