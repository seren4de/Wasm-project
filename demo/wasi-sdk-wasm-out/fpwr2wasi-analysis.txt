Input file: fpwr2wasi.wasm
  binary:    fpwr2wasi.wasm

Functions:           72
  Imported:           6
  Non-imported:      66
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 4.17% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13341
  call:             193 (1.45% of all instructions)
  call_indirect:     13 (0.10% of all instructions, 6.31% of all calls)

Globals:
  #0 i32
     init: i32.const 76784
     13 × global.get   23 × global.set   36 total (36/64% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     13 (19.70% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.52%) × [-880]
    1  (1.52%) × [-256]
    1  (1.52%) × [-208]
    7 (10.61%) × [-16]
   56 (84.85%) × []
  functions with stack allocation total: 10 (15.15%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"fpwr2wasi.wasm",1,1.5151515,"[-880]",-880,880
sp_csv_line:"fpwr2wasi.wasm",1,1.5151515,"[-256]",-256,256
sp_csv_line:"fpwr2wasi.wasm",1,1.5151515,"[-208]",-208,208
sp_csv_line:"fpwr2wasi.wasm",7,10.606061,"[-16]",-16,16
sp_csv_line:"fpwr2wasi.wasm",56,84.84849,"[]",0,0

Counts of function types (24 unique types):
    1  (1.39%) × [i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.39%) × [i32, f32] -> [f32]
    1  (1.39%) × [i32, f64] -> [f64]
    1  (1.39%) × [i64] -> [i32]
    1  (1.39%) × [f32] -> [f32]
    1  (1.39%) × [f32, f32] -> [f32]
    1  (1.39%) × [f64] -> [f64]
    1  (1.39%) × [f64, i32] -> [f64]
    1  (1.39%) × [f64, i64, i64] -> [f64]
    1  (1.39%) × [f64, f64] -> [f64]
    2  (2.78%) × [i32] -> [f64]
    2  (2.78%) × [i32, i64, i32] -> [i64]
    2  (2.78%) × [i32, i64, i32, i32] -> [i32]
    3  (4.17%) × [] -> [i32]
    3  (4.17%) × [i32, i32, i32, i32] -> [i32]
    4  (5.56%) × [i32] -> [f32]
    6  (8.33%) × [i32] -> []
    7  (9.72%) × [] -> []
    9 (12.50%) × [i32, i32, i32] -> [i32]
   10 (13.89%) × [i32] -> [i32]
   11 (15.28%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 4 (6.06% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 9
  total classes: 2

CSV data for further analysis: fpwr2wasi.wasm,13341,193,13,6.3106794,72,3,2,2,4,9,6.5,9,89,13,14.606742,13,14.606742,13,14.606742

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"fpwr2wasi.wasm",0,1,4,"i32.load"
"fpwr2wasi.wasm",1,1,9,"i32.load"
