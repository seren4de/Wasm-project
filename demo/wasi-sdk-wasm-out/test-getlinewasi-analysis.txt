Input file: test-getlinewasi.wasm
  binary:    test-getlinewasi.wasm

Functions:           41
  Imported:           4
  Non-imported:      37
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 7.32% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7668
  call:              59 (0.77% of all instructions)
  call_indirect:     15 (0.20% of all instructions, 20.27% of all calls)

Globals:
  #0 i32
     init: i32.const 68240
      7 × global.get   14 × global.set   21 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      7 (18.92% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    6 (16.22%) × [-16]
   31 (83.78%) × []
  functions with stack allocation total: 6 (16.22%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test-getlinewasi.wasm",6,16.216217,"[-16]",-16,16
sp_csv_line:"test-getlinewasi.wasm",31,83.78378,"[]",0,0

Counts of function types (10 unique types):
    1  (2.44%) × [i32, i32] -> []
    1  (2.44%) × [i32, i32] -> [i32]
    2  (4.88%) × [] -> [i32]
    2  (4.88%) × [i32, i64, i32] -> [i64]
    2  (4.88%) × [i32, i64, i32, i32] -> [i32]
    3  (7.32%) × [i32, i32, i32, i32] -> [i32]
    6 (14.63%) × [i32, i32, i32] -> [i32]
    7 (17.07%) × [] -> []
    7 (17.07%) × [i32] -> []
   10 (24.39%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (13.51% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 8
  total classes: 3

CSV data for further analysis: test-getlinewasi.wasm,7668,59,15,20.27027,41,3,3,3,1,8,5,6,70,15,21.428572,15,21.428572,15,21.428572

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test-getlinewasi.wasm",0,1,1,"i32.load"
"test-getlinewasi.wasm",1,1,6,"i32.load"
"test-getlinewasi.wasm",2,1,8,"i32.load"
