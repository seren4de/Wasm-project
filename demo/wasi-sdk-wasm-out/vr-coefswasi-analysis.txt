Input file: vr-coefswasi.wasm
  binary:    vr-coefswasi.wasm

Functions:           83
  Imported:           7
  Non-imported:      76
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 4.82% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     22479
  call:             232 (1.03% of all instructions)
  call_indirect:     14 (0.06% of all instructions, 5.69% of all calls)

Globals:
  #0 i32
     init: i32.const 80224
     21 × global.get   42 × global.set   63 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     21 (27.63% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.32%) × [-880]
    1  (1.32%) × [-560]
    1  (1.32%) × [-256]
    1  (1.32%) × [-208]
    1  (1.32%) × [-48]
    1  (1.32%) × [-32]
   10 (13.16%) × [-16]
   60 (78.95%) × []
  functions with stack allocation total: 16 (21.05%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"vr-coefswasi.wasm",1,1.3157895,"[-880]",-880,880
sp_csv_line:"vr-coefswasi.wasm",1,1.3157895,"[-560]",-560,560
sp_csv_line:"vr-coefswasi.wasm",1,1.3157895,"[-256]",-256,256
sp_csv_line:"vr-coefswasi.wasm",1,1.3157895,"[-208]",-208,208
sp_csv_line:"vr-coefswasi.wasm",1,1.3157895,"[-48]",-48,48
sp_csv_line:"vr-coefswasi.wasm",1,1.3157895,"[-32]",-32,32
sp_csv_line:"vr-coefswasi.wasm",10,13.157895,"[-16]",-16,16
sp_csv_line:"vr-coefswasi.wasm",60,78.947365,"[]",0,0

Counts of function types (25 unique types):
    1  (1.20%) × [i32, i32, i32] -> []
    1  (1.20%) × [i32, i32, i32, i32, i32] -> []
    1  (1.20%) × [i32, i32, f64, i32] -> []
    1  (1.20%) × [i32, i32, f64, i32] -> [f64]
    1  (1.20%) × [i32, f64] -> [f64]
    1  (1.20%) × [i32, f64, i32] -> []
    1  (1.20%) × [i32, f64, f64, f64, f64, i32, i32] -> []
    1  (1.20%) × [i64] -> [i32]
    1  (1.20%) × [f64, i32] -> [i32]
    1  (1.20%) × [f64, i64, i64] -> [f64]
    2  (2.41%) × [i32] -> [f64]
    2  (2.41%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (2.41%) × [i32, i64, i32] -> [i64]
    2  (2.41%) × [i32, i64, i32, i32] -> [i32]
    2  (2.41%) × [f64, i32] -> [f64]
    2  (2.41%) × [f64, f64] -> [f64]
    2  (2.41%) × [f64, f64, i32] -> [f64]
    3  (3.61%) × [] -> [i32]
    3  (3.61%) × [i32, i32, i32, i32] -> [i32]
    4  (4.82%) × [f64] -> [f64]
    6  (7.23%) × [i32] -> []
    7  (8.43%) × [] -> []
    9 (10.84%) × [i32, i32, i32] -> [i32]
   12 (14.46%) × [i32] -> [i32]
   15 (18.07%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 5 (6.58% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 10
  total classes: 2

CSV data for further analysis: vr-coefswasi.wasm,22479,232,14,5.6910567,83,4,3,2,4,10,7,10,98,24,24.489796,24,24.489796,24,24.489796

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"vr-coefswasi.wasm",0,1,4,"i32.load"
"vr-coefswasi.wasm",1,2,10,"i32.load"
