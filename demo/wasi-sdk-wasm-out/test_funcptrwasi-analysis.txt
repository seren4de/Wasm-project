Input file: test_funcptrwasi.wasm
  binary:    test_funcptrwasi.wasm

Functions:           54
  Imported:           5
  Non-imported:      49
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          8
  Of those, unique functions:     8 (i.e., at least 14.81% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7827
  call:             136 (1.74% of all instructions)
  call_indirect:     22 (0.28% of all instructions, 13.92% of all calls)

Globals:
  #0 i32
     init: i32.const 70352
     11 × global.get   20 × global.set   31 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (22.45% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.04%) × [-880]
    1  (2.04%) × [-256]
    1  (2.04%) × [-208]
    1  (2.04%) × [-32]
    5 (10.20%) × [-16]
   40 (81.63%) × []
  functions with stack allocation total: 9 (18.37%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_funcptrwasi.wasm",1,2.0408163,"[-880]",-880,880
sp_csv_line:"test_funcptrwasi.wasm",1,2.0408163,"[-256]",-256,256
sp_csv_line:"test_funcptrwasi.wasm",1,2.0408163,"[-208]",-208,208
sp_csv_line:"test_funcptrwasi.wasm",1,2.0408163,"[-32]",-32,32
sp_csv_line:"test_funcptrwasi.wasm",5,10.204082,"[-16]",-16,16
sp_csv_line:"test_funcptrwasi.wasm",40,81.63265,"[]",0,0

Counts of function types (13 unique types):
    1  (1.85%) × [i32, i32, i32] -> []
    1  (1.85%) × [i32, i32, i32, i32, i32] -> []
    1  (1.85%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.85%) × [f64, i32] -> [f64]
    2  (3.70%) × [i32, i64, i32] -> [i64]
    2  (3.70%) × [i32, i64, i32, i32] -> [i32]
    3  (5.56%) × [i32, i32, i32, i32] -> [i32]
    4  (7.41%) × [] -> [i32]
    4  (7.41%) × [i32] -> []
    7 (12.96%) × [] -> []
    9 (16.67%) × [i32, i32] -> [i32]
    9 (16.67%) × [i32, i32, i32] -> [i32]
   10 (18.52%) × [i32] -> [i32]

Functions with at least one call_indirect: 6 (12.24% of all functions)

Table elements initialization:
         range: [    1,    2]   length:   2   unique funcs:    2   type: [] -> [i32]
         range: [    3,    5]   length:   3   unique funcs:    3   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     6 × unrestricted                         source: local.(get|tee)   type [] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #2
    type: [] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 6
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 10
  total classes: 4

CSV data for further analysis: test_funcptrwasi.wasm,7827,136,22,13.92405,54,8,3,4,2,10,5.5,6,142,42,29.577465,42,29.577465,24,16.90141

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_funcptrwasi.wasm",0,3,2,"local.(get|tee)"
"test_funcptrwasi.wasm",1,1,4,"i32.load"
"test_funcptrwasi.wasm",2,2,6,"local.(get|tee)"
"test_funcptrwasi.wasm",3,2,10,"i32.load"
