Input file: test-nanosleepwasi.wasm
  binary:    test-nanosleepwasi.wasm

Functions:           42
  Imported:           5
  Non-imported:      37
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 7.14% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      2742
  call:              47 (1.71% of all instructions)
  call_indirect:     11 (0.40% of all instructions, 18.97% of all calls)

Globals:
  #0 i32
     init: i32.const 68464
      9 × global.get   18 × global.set   27 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (24.32% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.70%) × [-112]
    1  (2.70%) × [-48]
    6 (16.22%) × [-16]
   29 (78.38%) × []
  functions with stack allocation total: 8 (21.62%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test-nanosleepwasi.wasm",1,2.7027028,"[-112]",-112,112
sp_csv_line:"test-nanosleepwasi.wasm",1,2.7027028,"[-48]",-48,48
sp_csv_line:"test-nanosleepwasi.wasm",6,16.216217,"[-16]",-16,16
sp_csv_line:"test-nanosleepwasi.wasm",29,78.37838,"[]",0,0

Counts of function types (12 unique types):
    1  (2.38%) × [i32, i64, i64, i32] -> []
    2  (4.76%) × [] -> [i32]
    2  (4.76%) × [i32, i64, i32] -> [i64]
    2  (4.76%) × [i32, i64, i32, i32] -> [i32]
    2  (4.76%) × [i32, i64, i64, i64, i64] -> []
    2  (4.76%) × [i32, i64, i64, i64, i64, i32] -> []
    3  (7.14%) × [i32, i32, i32] -> [i32]
    5 (11.90%) × [] -> []
    5 (11.90%) × [i32] -> []
    5 (11.90%) × [i32, i32] -> [i32]
    6 (14.29%) × [i32, i32, i32, i32] -> [i32]
    7 (16.67%) × [i32] -> [i32]

Functions with at least one call_indirect: 3 (8.11% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  total classes: 2

CSV data for further analysis: test-nanosleepwasi.wasm,2742,47,11,18.965517,42,3,2,2,4,7,5.5,7,29,11,37.931034,11,37.931034,11,37.931034

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test-nanosleepwasi.wasm",0,1,4,"i32.load"
"test-nanosleepwasi.wasm",1,1,7,"i32.load"
