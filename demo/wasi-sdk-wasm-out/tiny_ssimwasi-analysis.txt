Input file: tiny_ssimwasi.wasm
  binary:    tiny_ssimwasi.wasm

Functions:          128
  Imported:          12
  Non-imported:     116
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 4.69% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25528
  call:             365 (1.43% of all instructions)
  call_indirect:     22 (0.09% of all instructions, 5.68% of all calls)

Globals:
  #0 i32
     init: i32.const 75824
     36 × global.get   64 × global.set  100 total (36/64% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     36 (31.03% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.86%) × [-880]
    1  (0.86%) × [-512]
    1  (0.86%) × [-304]
    1  (0.86%) × [-256]
    1  (0.86%) × [-208]
    1  (0.86%) × [-112]
    4  (3.45%) × [-32]
   16 (13.79%) × [-16]
   90 (77.59%) × []
  functions with stack allocation total: 26 (22.41%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"tiny_ssimwasi.wasm",1,0.86206895,"[-880]",-880,880
sp_csv_line:"tiny_ssimwasi.wasm",1,0.86206895,"[-512]",-512,512
sp_csv_line:"tiny_ssimwasi.wasm",1,0.86206895,"[-304]",-304,304
sp_csv_line:"tiny_ssimwasi.wasm",1,0.86206895,"[-256]",-256,256
sp_csv_line:"tiny_ssimwasi.wasm",1,0.86206895,"[-208]",-208,208
sp_csv_line:"tiny_ssimwasi.wasm",1,0.86206895,"[-112]",-112,112
sp_csv_line:"tiny_ssimwasi.wasm",4,3.4482758,"[-32]",-32,32
sp_csv_line:"tiny_ssimwasi.wasm",16,13.793103,"[-16]",-16,16
sp_csv_line:"tiny_ssimwasi.wasm",90,77.586205,"[]",0,0

Counts of function types (30 unique types):
    1  (0.78%) × [i32] -> [f64]
    1  (0.78%) × [i32, i32] -> []
    1  (0.78%) × [i32, i32] -> [i64]
    1  (0.78%) × [i32, i32, i32] -> []
    1  (0.78%) × [i32, i32, i32] -> [i64]
    1  (0.78%) × [i32, i32, i32] -> [f32]
    1  (0.78%) × [i32, i32, i32] -> [f64]
    1  (0.78%) × [i32, i32, i32, i32] -> [f32]
    1  (0.78%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (0.78%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> [f32]
    1  (0.78%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.78%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.78%) × [i32, i32, i32, i64] -> [i64]
    1  (0.78%) × [i32, i64] -> []
    1  (0.78%) × [i32, i64, i64, i64, i64] -> []
    1  (0.78%) × [i64, i64] -> [f64]
    2  (1.56%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.56%) × [i32, i64, i32] -> [i64]
    2  (1.56%) × [i32, i64, i32, i32] -> [i32]
    2  (1.56%) × [f64] -> [f64]
    2  (1.56%) × [f64, i32] -> [f64]
    2  (1.56%) × [f64, f64] -> [f64]
    3  (2.34%) × [] -> [i32]
    3  (2.34%) × [i32, i32, i32, i32, i32] -> []
    6  (4.69%) × [i32] -> []
    8  (6.25%) × [i32, i32, i32, i32] -> [i32]
   11  (8.59%) × [] -> []
   20 (15.62%) × [i32] -> [i32]
   24 (18.75%) × [i32, i32, i32] -> [i32]
   25 (19.53%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 9 (7.76% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    15 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     7 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 15
  total classes: 2

CSV data for further analysis: tiny_ssimwasi.wasm,25528,365,22,5.6847544,128,6,5,2,7,15,11,15,374,67,17.914438,67,17.914438,67,17.914438

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"tiny_ssimwasi.wasm",0,1,7,"i32.load"
"tiny_ssimwasi.wasm",1,4,15,"i32.load"
