Input file: addchainwasi.wasm
  binary:    addchainwasi.wasm

Functions:           73
  Imported:           7
  Non-imported:      66
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 5.48% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14680
  call:             198 (1.35% of all instructions)
  call_indirect:     14 (0.10% of all instructions, 6.60% of all calls)

Globals:
  #0 i32
     init: i32.const 71168
     19 × global.get   34 × global.set   53 total (36/64% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     19 (28.79% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.52%) × [-880]
    1  (1.52%) × [-256]
    1  (1.52%) × [-208]
    1  (1.52%) × [-32]
    9 (13.64%) × [-16]
   53 (80.30%) × []
  functions with stack allocation total: 13 (19.70%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"addchainwasi.wasm",1,1.5151515,"[-880]",-880,880
sp_csv_line:"addchainwasi.wasm",1,1.5151515,"[-256]",-256,256
sp_csv_line:"addchainwasi.wasm",1,1.5151515,"[-208]",-208,208
sp_csv_line:"addchainwasi.wasm",1,1.5151515,"[-32]",-32,32
sp_csv_line:"addchainwasi.wasm",9,13.636364,"[-16]",-16,16
sp_csv_line:"addchainwasi.wasm",53,80.30303,"[]",0,0

Counts of function types (15 unique types):
    1  (1.37%) × [i32, i32, i32] -> []
    1  (1.37%) × [i32, i32, i32, i32] -> []
    1  (1.37%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.37%) × [f64, i32] -> [f64]
    2  (2.74%) × [i32, i32] -> []
    2  (2.74%) × [i32, i32, i32, i32, i32] -> []
    2  (2.74%) × [i32, i64, i32] -> [i64]
    2  (2.74%) × [i32, i64, i32, i32] -> [i32]
    3  (4.11%) × [] -> [i32]
    3  (4.11%) × [i32, i32, i32, i32] -> [i32]
    6  (8.22%) × [i32] -> []
    7  (9.59%) × [] -> []
   12 (16.44%) × [i32, i32, i32] -> [i32]
   13 (17.81%) × [i32] -> [i32]
   17 (23.29%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 5 (7.58% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 10
  total classes: 2

CSV data for further analysis: addchainwasi.wasm,14680,198,14,6.6037736,73,4,3,2,4,10,7,10,128,24,18.75,24,18.75,24,18.75

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"addchainwasi.wasm",0,1,4,"i32.load"
"addchainwasi.wasm",1,2,10,"i32.load"
