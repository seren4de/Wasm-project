Input file: showjournalwasi.wasm
  binary:    showjournalwasi.wasm

Functions:          109
  Imported:          12
  Non-imported:      97
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 5.50% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     15367
  call:             284 (1.85% of all instructions)
  call_indirect:     23 (0.15% of all instructions, 7.49% of all calls)

Globals:
  #0 i32
     init: i32.const 71216
     27 × global.get   54 × global.set   81 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     27 (27.84% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.03%) × [-880]
    1  (1.03%) × [-256]
    1  (1.03%) × [-208]
    1  (1.03%) × [-128]
    4  (4.12%) × [-32]
   14 (14.43%) × [-16]
   75 (77.32%) × []
  functions with stack allocation total: 22 (22.68%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"showjournalwasi.wasm",1,1.0309278,"[-880]",-880,880
sp_csv_line:"showjournalwasi.wasm",1,1.0309278,"[-256]",-256,256
sp_csv_line:"showjournalwasi.wasm",1,1.0309278,"[-208]",-208,208
sp_csv_line:"showjournalwasi.wasm",1,1.0309278,"[-128]",-128,128
sp_csv_line:"showjournalwasi.wasm",4,4.123711,"[-32]",-32,32
sp_csv_line:"showjournalwasi.wasm",14,14.43299,"[-16]",-16,16
sp_csv_line:"showjournalwasi.wasm",75,77.31959,"[]",0,0

Counts of function types (15 unique types):
    1  (0.92%) × [i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.92%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.92%) × [f64, i32] -> [f64]
    2  (1.83%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.83%) × [i32, i64, i32] -> [i64]
    2  (1.83%) × [i32, i64, i32, i32] -> [i32]
    3  (2.75%) × [] -> [i32]
    8  (7.34%) × [i32] -> []
    9  (8.26%) × [i32, i32, i32, i32] -> [i32]
   11 (10.09%) × [] -> []
   19 (17.43%) × [i32] -> [i32]
   23 (21.10%) × [i32, i32, i32] -> [i32]
   25 (22.94%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (10.31% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    14 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     7 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 14
  total classes: 4

CSV data for further analysis: showjournalwasi.wasm,15367,284,23,7.4918566,109,6,6,4,1,14,5.75,7,357,65,18.207283,65,18.207283,64,17.927172

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"showjournalwasi.wasm",0,1,1,"i32.load"
"showjournalwasi.wasm",1,1,1,"local.(get|tee)"
"showjournalwasi.wasm",2,1,7,"i32.load"
"showjournalwasi.wasm",3,4,14,"i32.load"
