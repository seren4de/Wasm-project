Input file: timecheck2wasi.wasm
  binary:    timecheck2wasi.wasm

Functions:           58
  Imported:           5
  Non-imported:      53
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 10.34% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      8610
  call:             143 (1.66% of all instructions)
  call_indirect:     17 (0.20% of all instructions, 10.62% of all calls)

Globals:
  #0 i32
     init: i32.const 70448
     12 × global.get   22 × global.set   34 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     12 (22.64% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.89%) × [-880]
    1  (1.89%) × [-256]
    1  (1.89%) × [-208]
    1  (1.89%) × [-32]
    4  (7.55%) × [-16]
   45 (84.91%) × []
  functions with stack allocation total: 8 (15.09%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"timecheck2wasi.wasm",1,1.8867924,"[-880]",-880,880
sp_csv_line:"timecheck2wasi.wasm",1,1.8867924,"[-256]",-256,256
sp_csv_line:"timecheck2wasi.wasm",1,1.8867924,"[-208]",-208,208
sp_csv_line:"timecheck2wasi.wasm",1,1.8867924,"[-32]",-32,32
sp_csv_line:"timecheck2wasi.wasm",4,7.5471697,"[-16]",-16,16
sp_csv_line:"timecheck2wasi.wasm",45,84.90566,"[]",0,0

Counts of function types (17 unique types):
    1  (1.72%) × [i32, i32, i32] -> []
    1  (1.72%) × [i32, i32, i32, i32, i32] -> []
    1  (1.72%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.72%) × [i64, i32] -> [i32]
    1  (1.72%) × [i64, i32, i32, i32, i32, i32] -> []
    1  (1.72%) × [i64, i64] -> [f64]
    1  (1.72%) × [f64, i32] -> [f64]
    2  (3.45%) × [] -> [i32]
    2  (3.45%) × [i32, i32] -> []
    2  (3.45%) × [i32, i64, i32] -> [i64]
    2  (3.45%) × [i32, i64, i32, i32] -> [i32]
    3  (5.17%) × [i32, i32, i32, i32] -> [i32]
    4  (6.90%) × [i32] -> []
    7 (12.07%) × [] -> []
    9 (15.52%) × [i32, i32, i32] -> [i32]
   10 (17.24%) × [i32] -> [i32]
   10 (17.24%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (11.32% of all functions)

Table elements initialization:
         range: [    1,    3]   length:   3   unique funcs:    3   type: [i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     4 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 4
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 9
  total classes: 3

CSV data for further analysis: timecheck2wasi.wasm,8610,143,17,10.625,58,6,3,3,4,9,5.666666666666667,4,129,34,26.356588,34,26.356588,22,17.054264

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"timecheck2wasi.wasm",0,3,4,"local.(get|tee)"
"timecheck2wasi.wasm",1,1,4,"i32.load"
"timecheck2wasi.wasm",2,2,9,"i32.load"
