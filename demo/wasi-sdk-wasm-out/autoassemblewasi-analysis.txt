Input file: autoassemblewasi.wasm
  binary:    autoassemblewasi.wasm

Functions:           34
  Imported:           5
  Non-imported:      29
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 11.76% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      1698
  call:              34 (2.00% of all instructions)
  call_indirect:     11 (0.65% of all instructions, 24.44% of all calls)

Globals:
  #0 i32
     init: i32.const 67744
      6 × global.get   12 × global.set   18 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      6 (20.69% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (3.45%) × [-32]
    4 (13.79%) × [-16]
   24 (82.76%) × []
  functions with stack allocation total: 5 (17.24%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"autoassemblewasi.wasm",1,3.4482758,"[-32]",-32,32
sp_csv_line:"autoassemblewasi.wasm",4,13.793103,"[-16]",-16,16
sp_csv_line:"autoassemblewasi.wasm",24,82.75862,"[]",0,0

Counts of function types (9 unique types):
    2  (5.88%) × [] -> [i32]
    2  (5.88%) × [i32, i64, i32] -> [i64]
    2  (5.88%) × [i32, i64, i32, i32] -> [i32]
    3  (8.82%) × [i32, i32, i32, i32] -> [i32]
    4 (11.76%) × [i32] -> []
    4 (11.76%) × [i32, i32] -> [i32]
    4 (11.76%) × [i32, i32, i32] -> [i32]
    5 (14.71%) × [] -> []
    8 (23.53%) × [i32] -> [i32]

Functions with at least one call_indirect: 3 (10.34% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 7
  total classes: 2

CSV data for further analysis: autoassemblewasi.wasm,1698,34,11,24.444445,34,4,3,2,4,7,5.5,7,36,18,50,18,50,18,50

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"autoassemblewasi.wasm",0,1,4,"i32.load"
"autoassemblewasi.wasm",1,2,7,"i32.load"
