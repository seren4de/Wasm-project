Input file: p72wasi.wasm
  binary:    p72wasi.wasm

Functions:           52
  Imported:           4
  Non-imported:      48
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 5.77% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11788
  call:             145 (1.23% of all instructions)
  call_indirect:     13 (0.11% of all instructions, 8.23% of all calls)

Globals:
  #0 i32
     init: i32.const 69744
     11 × global.get   19 × global.set   30 total (37/63% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (22.92% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.08%) × [-880]
    1  (2.08%) × [-256]
    1  (2.08%) × [-208]
    6 (12.50%) × [-16]
   39 (81.25%) × []
  functions with stack allocation total: 9 (18.75%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"p72wasi.wasm",1,2.0833333,"[-880]",-880,880
sp_csv_line:"p72wasi.wasm",1,2.0833333,"[-256]",-256,256
sp_csv_line:"p72wasi.wasm",1,2.0833333,"[-208]",-208,208
sp_csv_line:"p72wasi.wasm",6,12.5,"[-16]",-16,16
sp_csv_line:"p72wasi.wasm",39,81.25,"[]",0,0

Counts of function types (14 unique types):
    1  (1.92%) × [i32, i32, i32, i32] -> []
    1  (1.92%) × [i32, i32, i32, i32, i32] -> []
    1  (1.92%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.92%) × [f64, i32] -> [f64]
    2  (3.85%) × [] -> [i32]
    2  (3.85%) × [i32, i32, i32] -> []
    2  (3.85%) × [i32, i64, i32] -> [i64]
    2  (3.85%) × [i32, i64, i32, i32] -> [i32]
    3  (5.77%) × [i32, i32, i32, i32] -> [i32]
    5  (9.62%) × [i32, i32] -> [i32]
    6 (11.54%) × [i32] -> []
    7 (13.46%) × [] -> []
    9 (17.31%) × [i32, i32, i32] -> [i32]
   10 (19.23%) × [i32] -> [i32]

Functions with at least one call_indirect: 4 (8.33% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 9
  total classes: 2

CSV data for further analysis: p72wasi.wasm,11788,145,13,8.227848,52,3,2,2,4,9,6.5,9,89,13,14.606742,13,14.606742,13,14.606742

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"p72wasi.wasm",0,1,4,"i32.load"
"p72wasi.wasm",1,1,9,"i32.load"
