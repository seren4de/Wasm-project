Input file: s-allocfreewasi.wasm
  binary:    s-allocfreewasi.wasm

Functions:           33
  Imported:           3
  Non-imported:      30
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          0
  Of those, unique functions:     0 (i.e., at least 0.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      4929
  call:              52 (1.05% of all instructions)
  call_indirect:      0 (0.00% of all instructions, 0.00% of all calls)

Globals:
  #0 i32
     init: i32.const 67072
     13 × global.get   26 × global.set   39 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     13 (43.33% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    2  (6.67%) × [-16]
   28 (93.33%) × []
  functions with stack allocation total: 2 (6.67%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-allocfreewasi.wasm",2,6.6666665,"[-16]",-16,16
sp_csv_line:"s-allocfreewasi.wasm",28,93.333336,"[]",0,0

Counts of function types (6 unique types):
    1  (3.03%) × [i32, i32, i32] -> [i32]
    2  (6.06%) × [] -> [i32]
    5 (15.15%) × [] -> []
    6 (18.18%) × [i32, i32] -> [i32]
    8 (24.24%) × [i32] -> [i32]
   11 (33.33%) × [i32] -> []

Functions with at least one call_indirect: 0 (0.00% of all functions)

Table elements initialization:
  0 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  0 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  total classes: 0

