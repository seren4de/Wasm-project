Input file: doublewasi.wasm
  binary:    doublewasi.wasm

Functions:          108
  Imported:          12
  Non-imported:      96
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.63% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14847
  call:             252 (1.70% of all instructions)
  call_indirect:     20 (0.13% of all instructions, 7.35% of all calls)

Globals:
  #0 i32
     init: i32.const 72032
     25 × global.get   48 × global.set   73 total (34/66% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (26.04% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.04%) × [-880]
    1  (1.04%) × [-256]
    1  (1.04%) × [-208]
    4  (4.17%) × [-32]
   14 (14.58%) × [-16]
   75 (78.12%) × []
  functions with stack allocation total: 21 (21.88%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"doublewasi.wasm",1,1.0416666,"[-880]",-880,880
sp_csv_line:"doublewasi.wasm",1,1.0416666,"[-256]",-256,256
sp_csv_line:"doublewasi.wasm",1,1.0416666,"[-208]",-208,208
sp_csv_line:"doublewasi.wasm",4,4.1666665,"[-32]",-32,32
sp_csv_line:"doublewasi.wasm",14,14.583333,"[-16]",-16,16
sp_csv_line:"doublewasi.wasm",75,78.125,"[]",0,0

Counts of function types (16 unique types):
    1  (0.93%) × [i32, i32] -> []
    1  (0.93%) × [i32, i32, i32] -> []
    1  (0.93%) × [i32, i32, i32, i32, i32] -> []
    1  (0.93%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.93%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.93%) × [f64, i32] -> [f64]
    2  (1.85%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.85%) × [i32, i64, i32] -> [i64]
    2  (1.85%) × [i32, i64, i32, i32] -> [i32]
    3  (2.78%) × [] -> [i32]
    6  (5.56%) × [i32, i32, i32, i32] -> [i32]
    7  (6.48%) × [i32] -> []
   10  (9.26%) × [] -> []
   20 (18.52%) × [i32, i32, i32] -> [i32]
   22 (20.37%) × [i32] -> [i32]
   28 (25.93%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 8 (8.33% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 13
  total classes: 3

CSV data for further analysis: doublewasi.wasm,14847,252,20,7.352941,108,5,5,3,1,13,6.666666666666667,6,294,46,15.646258,46,15.646258,46,15.646258

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"doublewasi.wasm",0,1,1,"i32.load"
"doublewasi.wasm",1,1,6,"i32.load"
"doublewasi.wasm",2,3,13,"i32.load"
