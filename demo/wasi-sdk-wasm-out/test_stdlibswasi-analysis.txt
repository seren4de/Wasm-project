Input file: test_stdlibswasi.wasm
  binary:    test_stdlibswasi.wasm

Functions:           85
  Imported:           7
  Non-imported:      78
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          8
  Of those, unique functions:     8 (i.e., at least 9.41% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     18917
  call:             276 (1.46% of all instructions)
  call_indirect:     29 (0.15% of all instructions, 9.51% of all calls)

Globals:
  #0 i32
     init: i32.const 72720
     24 × global.get   46 × global.set   70 total (34/66% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (30.77% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.28%) × [-880]
    1  (1.28%) × [-736]
    1  (1.28%) × [-704]
    1  (1.28%) × [-512]
    1  (1.28%) × [-256]
    1  (1.28%) × [-208]
    1  (1.28%) × [-32]
    4  (5.13%) × [-112]
   11 (14.10%) × [-16]
   56 (71.79%) × []
  functions with stack allocation total: 22 (28.21%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_stdlibswasi.wasm",1,1.2820513,"[-880]",-880,880
sp_csv_line:"test_stdlibswasi.wasm",1,1.2820513,"[-736]",-736,736
sp_csv_line:"test_stdlibswasi.wasm",1,1.2820513,"[-704]",-704,704
sp_csv_line:"test_stdlibswasi.wasm",1,1.2820513,"[-512]",-512,512
sp_csv_line:"test_stdlibswasi.wasm",1,1.2820513,"[-256]",-256,256
sp_csv_line:"test_stdlibswasi.wasm",1,1.2820513,"[-208]",-208,208
sp_csv_line:"test_stdlibswasi.wasm",1,1.2820513,"[-32]",-32,32
sp_csv_line:"test_stdlibswasi.wasm",4,5.1282053,"[-112]",-112,112
sp_csv_line:"test_stdlibswasi.wasm",11,14.102564,"[-16]",-16,16
sp_csv_line:"test_stdlibswasi.wasm",56,71.79487,"[]",0,0

Counts of function types (25 unique types):
    1  (1.18%) × [i32, i32] -> [i64]
    1  (1.18%) × [i32, i32] -> [f64]
    1  (1.18%) × [i32, i32, i32] -> []
    1  (1.18%) × [i32, i32, i32] -> [i64]
    1  (1.18%) × [i32, i32, i32] -> [f64]
    1  (1.18%) × [i32, i32, i32, i32] -> []
    1  (1.18%) × [i32, i32, i32, i32, i32] -> []
    1  (1.18%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.18%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (1.18%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (1.18%) × [i32, i32, i32, i64] -> [i64]
    1  (1.18%) × [i32, i64] -> []
    1  (1.18%) × [i32, i64, i64, i64, i64] -> []
    1  (1.18%) × [f64, f64] -> [f64]
    2  (2.35%) × [] -> [i32]
    2  (2.35%) × [i32, i64, i32] -> [i32]
    2  (2.35%) × [i32, i64, i32] -> [i64]
    2  (2.35%) × [i32, i64, i32, i32] -> [i32]
    2  (2.35%) × [f64, i32] -> [f64]
    5  (5.88%) × [i32, i32, i32, i32] -> [i32]
    7  (8.24%) × [i32] -> []
    8  (9.41%) × [] -> []
   12 (14.12%) × [i32, i32] -> [i32]
   14 (16.47%) × [i32, i32, i32] -> [i32]
   15 (17.65%) × [i32] -> [i32]

Functions with at least one call_indirect: 10 (12.82% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    8]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    12 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 11
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 12
  total classes: 5

CSV data for further analysis: test_stdlibswasi.wasm,18917,276,29,9.508197,85,8,5,5,1,12,5.8,4,321,51,15.887851,51,15.887851,38,11.838006

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_stdlibswasi.wasm",0,1,1,"local.(get|tee)"
"test_stdlibswasi.wasm",1,1,1,"i32.load"
"test_stdlibswasi.wasm",2,1,4,"i32.load"
"test_stdlibswasi.wasm",3,3,11,"i32.load"
"test_stdlibswasi.wasm",4,1,12,"local.(get|tee)"
