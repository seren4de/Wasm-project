Input file: mkshelllinkwasi.wasm
  binary:    mkshelllinkwasi.wasm

Functions:          125
  Imported:          12
  Non-imported:     113
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          7
  Of those, unique functions:     7 (i.e., at least 5.60% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25371
  call:             382 (1.51% of all instructions)
  call_indirect:     21 (0.08% of all instructions, 5.21% of all calls)

Globals:
  #0 i32
     init: i32.const 71968
     30 × global.get   58 × global.set   88 total (34/66% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     30 (26.55% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.88%) × [-880]
    1  (0.88%) × [-512]
    1  (0.88%) × [-304]
    1  (0.88%) × [-256]
    1  (0.88%) × [-208]
    1  (0.88%) × [-128]
    1  (0.88%) × [-112]
    4  (3.54%) × [-32]
   17 (15.04%) × [-16]
   85 (75.22%) × []
  functions with stack allocation total: 28 (24.78%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"mkshelllinkwasi.wasm",1,0.88495576,"[-880]",-880,880
sp_csv_line:"mkshelllinkwasi.wasm",1,0.88495576,"[-512]",-512,512
sp_csv_line:"mkshelllinkwasi.wasm",1,0.88495576,"[-304]",-304,304
sp_csv_line:"mkshelllinkwasi.wasm",1,0.88495576,"[-256]",-256,256
sp_csv_line:"mkshelllinkwasi.wasm",1,0.88495576,"[-208]",-208,208
sp_csv_line:"mkshelllinkwasi.wasm",1,0.88495576,"[-128]",-128,128
sp_csv_line:"mkshelllinkwasi.wasm",1,0.88495576,"[-112]",-112,112
sp_csv_line:"mkshelllinkwasi.wasm",4,3.539823,"[-32]",-32,32
sp_csv_line:"mkshelllinkwasi.wasm",17,15.044248,"[-16]",-16,16
sp_csv_line:"mkshelllinkwasi.wasm",85,75.22124,"[]",0,0

Counts of function types (23 unique types):
    1  (0.80%) × [i32, i32] -> []
    1  (0.80%) × [i32, i32] -> [i64]
    1  (0.80%) × [i32, i32, i32] -> []
    1  (0.80%) × [i32, i32, i32] -> [f64]
    1  (0.80%) × [i32, i32, i32, i32, i32] -> []
    1  (0.80%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (0.80%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.80%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.80%) × [i32, i32, i32, i64] -> [i64]
    1  (0.80%) × [i32, i64] -> []
    1  (0.80%) × [i32, i64, i64, i64, i64] -> []
    1  (0.80%) × [f64, f64] -> [f64]
    2  (1.60%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.60%) × [i32, i64, i32] -> [i64]
    2  (1.60%) × [i32, i64, i32, i32] -> [i32]
    2  (1.60%) × [f64, i32] -> [f64]
    3  (2.40%) × [] -> [i32]
    7  (5.60%) × [i32] -> []
    8  (6.40%) × [i32, i32, i32, i32] -> [i32]
   11  (8.80%) × [] -> []
   23 (18.40%) × [i32] -> [i32]
   25 (20.00%) × [i32, i32, i32] -> [i32]
   28 (22.40%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 9 (7.96% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    7]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    14 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 14
  total classes: 3

CSV data for further analysis: mkshelllinkwasi.wasm,25371,382,21,5.210918,125,7,7,3,1,14,7,6,385,77,20,77,20,77,20

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"mkshelllinkwasi.wasm",0,1,1,"i32.load"
"mkshelllinkwasi.wasm",1,1,6,"i32.load"
"mkshelllinkwasi.wasm",2,5,14,"i32.load"
