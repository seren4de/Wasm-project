Input file: function_pointerswasi.wasm
  binary:    function_pointerswasi.wasm

Functions:           12
  Imported:           1
  Non-imported:      11
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          2
  Of those, unique functions:     2 (i.e., at least 16.67% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:       188
  call:              14 (7.45% of all instructions)
  call_indirect:      1 (0.53% of all instructions, 6.67% of all calls)

Globals:
  #0 i32
     init: i32.const 66560
     4 × global.get   6 × global.set  10 total (40/60% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      4 (36.36% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   11(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"function_pointerswasi.wasm",11,100,"[]",0,0

Counts of function types (4 unique types):
    1  (8.33%) × [] -> [i32]
    3 (25.00%) × [i32] -> [i32]
    4 (33.33%) × [] -> []
    4 (33.33%) × [i32] -> []

Functions with at least one call_indirect: 1 (9.09% of all functions)

Table elements initialization:
         range: [    1,    2]   length:   2   unique funcs:    2   type: [i32] -> [i32]
  1 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
  1 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  total classes: 1

CSV data for further analysis: function_pointerswasi.wasm,188,14,1,6.6666665,12,2,0,1,1,1,1,1,3,2,66.666664,2,66.666664,0,0

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"function_pointerswasi.wasm",0,2,1,"local.(get|tee)"
