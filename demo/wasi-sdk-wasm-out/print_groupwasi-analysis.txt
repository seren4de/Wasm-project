Input file: print_groupwasi.wasm
  binary:    print_groupwasi.wasm

Functions:           53
  Imported:           5
  Non-imported:      48
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 9.43% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7926
  call:             140 (1.77% of all instructions)
  call_indirect:     15 (0.19% of all instructions, 9.68% of all calls)

Globals:
  #0 i32
     init: i32.const 70288
     12 × global.get   22 × global.set   34 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     12 (25.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.08%) × [-880]
    1  (2.08%) × [-256]
    1  (2.08%) × [-208]
    1  (2.08%) × [-32]
    5 (10.42%) × [-16]
   39 (81.25%) × []
  functions with stack allocation total: 9 (18.75%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"print_groupwasi.wasm",1,2.0833333,"[-880]",-880,880
sp_csv_line:"print_groupwasi.wasm",1,2.0833333,"[-256]",-256,256
sp_csv_line:"print_groupwasi.wasm",1,2.0833333,"[-208]",-208,208
sp_csv_line:"print_groupwasi.wasm",1,2.0833333,"[-32]",-32,32
sp_csv_line:"print_groupwasi.wasm",5,10.416667,"[-16]",-16,16
sp_csv_line:"print_groupwasi.wasm",39,81.25,"[]",0,0

Counts of function types (15 unique types):
    1  (1.89%) × [i32, i32, i32] -> []
    1  (1.89%) × [i32, i32, i32, i32, i32] -> []
    1  (1.89%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.89%) × [i64, i32] -> []
    1  (1.89%) × [i64, i64, i64] -> [i64]
    1  (1.89%) × [f64, i32] -> [f64]
    2  (3.77%) × [] -> [i32]
    2  (3.77%) × [i32, i64, i32] -> [i64]
    2  (3.77%) × [i32, i64, i32, i32] -> [i32]
    3  (5.66%) × [i32, i32, i32, i32] -> [i32]
    4  (7.55%) × [i32] -> []
    7 (13.21%) × [] -> []
    9 (16.98%) × [i32] -> [i32]
    9 (16.98%) × [i32, i32] -> [i32]
    9 (16.98%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (12.50% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i64, i64, i64] -> [i64]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i64, i64, i64] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i64, i64, i64] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 10
  total classes: 3

CSV data for further analysis: print_groupwasi.wasm,7926,140,15,9.67742,53,5,3,3,1,10,5,4,99,25,25.252525,25,25.252525,24,24.242424

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"print_groupwasi.wasm",0,1,1,"local.(get|tee)"
"print_groupwasi.wasm",1,1,4,"i32.load"
"print_groupwasi.wasm",2,2,10,"i32.load"
