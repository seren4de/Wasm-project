Input file: spec2defwasi.wasm
  binary:    spec2defwasi.wasm

Functions:          145
  Imported:          12
  Non-imported:     133
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 4.14% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     31340
  call:             538 (1.72% of all instructions)
  call_indirect:     26 (0.08% of all instructions, 4.61% of all calls)

Globals:
  #0 i32
     init: i32.const 74720
     48 × global.get   91 × global.set  139 total (35/65% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     48 (36.09% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.75%) × [-880]
    1  (0.75%) × [-256]
    1  (0.75%) × [-208]
    1  (0.75%) × [-128]
    2  (1.50%) × [-112]
    5  (3.76%) × [-32]
   16 (12.03%) × [-16]
  106 (79.70%) × []
  functions with stack allocation total: 27 (20.30%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"spec2defwasi.wasm",1,0.7518797,"[-880]",-880,880
sp_csv_line:"spec2defwasi.wasm",1,0.7518797,"[-256]",-256,256
sp_csv_line:"spec2defwasi.wasm",1,0.7518797,"[-208]",-208,208
sp_csv_line:"spec2defwasi.wasm",1,0.7518797,"[-128]",-128,128
sp_csv_line:"spec2defwasi.wasm",2,1.5037594,"[-112]",-112,112
sp_csv_line:"spec2defwasi.wasm",5,3.7593985,"[-32]",-32,32
sp_csv_line:"spec2defwasi.wasm",16,12.030075,"[-16]",-16,16
sp_csv_line:"spec2defwasi.wasm",106,79.69925,"[]",0,0

Counts of function types (22 unique types):
    1  (0.69%) × [i32, i32, i32] -> []
    1  (0.69%) × [i32, i32, i32, i32] -> []
    1  (0.69%) × [i32, i32, i32, i32, i32] -> []
    1  (0.69%) × [i32, i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.69%) × [i32, i32, i32, i32, i64, i64, i32, i32] -> [i32]
    1  (0.69%) × [i32, i32, i32, i64] -> [i64]
    1  (0.69%) × [i32, i64] -> []
    1  (0.69%) × [i32, i64, i32] -> [i32]
    1  (0.69%) × [i32, i64, i64, i64, i64] -> []
    1  (0.69%) × [f64, i32] -> [f64]
    2  (1.38%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (1.38%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    2  (1.38%) × [i32, i64, i32] -> [i64]
    2  (1.38%) × [i32, i64, i32, i32] -> [i32]
    3  (2.07%) × [] -> [i32]
    5  (3.45%) × [i32, i32] -> []
    8  (5.52%) × [i32, i32, i32, i32] -> [i32]
    9  (6.21%) × [i32] -> []
   11  (7.59%) × [] -> []
   26 (17.93%) × [i32] -> [i32]
   31 (21.38%) × [i32, i32, i32] -> [i32]
   34 (23.45%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (9.02% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    16 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               31
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     8 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 8
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 16
  total classes: 4

CSV data for further analysis: spec2defwasi.wasm,31340,538,26,4.609929,145,6,6,4,1,16,6.5,8,540,74,13.703704,74,13.703704,73,13.518518

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"spec2defwasi.wasm",0,1,1,"i32.load"
"spec2defwasi.wasm",1,1,1,"local.(get|tee)"
"spec2defwasi.wasm",2,1,8,"i32.load"
"spec2defwasi.wasm",3,4,16,"i32.load"
