Input file: test_tsearchwasi.wasm
  binary:    test_tsearchwasi.wasm

Functions:           63
  Imported:           5
  Non-imported:      58
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          7
  Of those, unique functions:     7 (i.e., at least 11.11% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     12631
  call:             160 (1.27% of all instructions)
  call_indirect:     18 (0.14% of all instructions, 10.11% of all calls)

Globals:
  #0 i32
     init: i32.const 70960
     15 × global.get   27 × global.set   42 total (36/64% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     15 (25.86% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.72%) × [-880]
    1  (1.72%) × [-256]
    1  (1.72%) × [-208]
    1  (1.72%) × [-192]
    1  (1.72%) × [-32]
    7 (12.07%) × [-16]
   46 (79.31%) × []
  functions with stack allocation total: 12 (20.69%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_tsearchwasi.wasm",1,1.7241379,"[-880]",-880,880
sp_csv_line:"test_tsearchwasi.wasm",1,1.7241379,"[-256]",-256,256
sp_csv_line:"test_tsearchwasi.wasm",1,1.7241379,"[-208]",-208,208
sp_csv_line:"test_tsearchwasi.wasm",1,1.7241379,"[-192]",-192,192
sp_csv_line:"test_tsearchwasi.wasm",1,1.7241379,"[-32]",-32,32
sp_csv_line:"test_tsearchwasi.wasm",7,12.068966,"[-16]",-16,16
sp_csv_line:"test_tsearchwasi.wasm",46,79.31035,"[]",0,0

Counts of function types (15 unique types):
    1  (1.59%) × [i32, i32, i32, i32] -> []
    1  (1.59%) × [i32, i32, i32, i32, i32] -> []
    1  (1.59%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.59%) × [f64, i32] -> [f64]
    2  (3.17%) × [] -> [i32]
    2  (3.17%) × [i32, i32] -> []
    2  (3.17%) × [i32, i64, i32] -> [i64]
    2  (3.17%) × [i32, i64, i32, i32] -> [i32]
    3  (4.76%) × [i32, i32, i32] -> []
    3  (4.76%) × [i32, i32, i32, i32] -> [i32]
    6  (9.52%) × [i32] -> []
    7 (11.11%) × [] -> []
    9 (14.29%) × [i32, i32] -> [i32]
   11 (17.46%) × [i32, i32, i32] -> [i32]
   12 (19.05%) × [i32] -> [i32]

Functions with at least one call_indirect: 7 (12.07% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> []
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 9
  total classes: 5

CSV data for further analysis: test_tsearchwasi.wasm,12631,160,18,10.11236,63,7,3,5,1,9,3.6,3,131,27,20.610687,27,20.610687,22,16.793894

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_tsearchwasi.wasm",0,1,1,"local.(get|tee)"
"test_tsearchwasi.wasm",1,1,1,"local.(get|tee)"
"test_tsearchwasi.wasm",2,1,3,"local.(get|tee)"
"test_tsearchwasi.wasm",3,1,4,"i32.load"
"test_tsearchwasi.wasm",4,2,9,"i32.load"
