Input file: nbtestwasi.wasm
  binary:    nbtestwasi.wasm

Functions:           66
  Imported:          10
  Non-imported:      56
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 4.55% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7863
  call:              91 (1.16% of all instructions)
  call_indirect:     11 (0.14% of all instructions, 10.78% of all calls)

Globals:
  #0 i32
     init: i32.const 73072
     15 × global.get   29 × global.set   44 total (34/66% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     15 (26.79% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.79%) × [-112]
    1  (1.79%) × [-48]
    1  (1.79%) × [-32]
   11 (19.64%) × [-16]
   42 (75.00%) × []
  functions with stack allocation total: 14 (25.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"nbtestwasi.wasm",1,1.7857143,"[-112]",-112,112
sp_csv_line:"nbtestwasi.wasm",1,1.7857143,"[-48]",-48,48
sp_csv_line:"nbtestwasi.wasm",1,1.7857143,"[-32]",-32,32
sp_csv_line:"nbtestwasi.wasm",11,19.642857,"[-16]",-16,16
sp_csv_line:"nbtestwasi.wasm",42,75,"[]",0,0

Counts of function types (12 unique types):
    1  (1.52%) × [i32, i64, i64, i32] -> []
    2  (3.03%) × [i32, i64, i32] -> [i64]
    2  (3.03%) × [i32, i64, i32, i32] -> [i32]
    2  (3.03%) × [i32, i64, i64, i64, i64] -> []
    2  (3.03%) × [i32, i64, i64, i64, i64, i32] -> []
    3  (4.55%) × [] -> [i32]
    6  (9.09%) × [] -> []
    7 (10.61%) × [i32] -> []
    7 (10.61%) × [i32, i32, i32] -> [i32]
    8 (12.12%) × [i32, i32, i32, i32] -> [i32]
   12 (18.18%) × [i32] -> [i32]
   14 (21.21%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 3 (5.36% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  total classes: 2

CSV data for further analysis: nbtestwasi.wasm,7863,91,11,10.784314,66,3,2,2,4,7,5.5,7,57,11,19.298246,11,19.298246,11,19.298246

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"nbtestwasi.wasm",0,1,4,"i32.load"
"nbtestwasi.wasm",1,1,7,"i32.load"
