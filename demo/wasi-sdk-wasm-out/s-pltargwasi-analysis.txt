Input file: s-pltargwasi.wasm
  binary:    s-pltargwasi.wasm

Functions:           34
  Imported:           5
  Non-imported:      29
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          0
  Of those, unique functions:     0 (i.e., at least 0.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5300
  call:              60 (1.13% of all instructions)
  call_indirect:      0 (0.00% of all instructions, 0.00% of all calls)

Globals:
  #0 i32
     init: i32.const 67088
     4 × global.get   8 × global.set  12 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      4 (13.79% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    3 (10.34%) × [-16]
   26 (89.66%) × []
  functions with stack allocation total: 3 (10.34%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-pltargwasi.wasm",3,10.344828,"[-16]",-16,16
sp_csv_line:"s-pltargwasi.wasm",26,89.655174,"[]",0,0

Counts of function types (6 unique types):
    2  (5.88%) × [] -> [i32]
    2  (5.88%) × [i32, i32, i32] -> [i32]
    6 (17.65%) × [i32] -> []
    6 (17.65%) × [i32] -> [i32]
    7 (20.59%) × [] -> []
   11 (32.35%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 0 (0.00% of all functions)

Table elements initialization:
  0 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  0 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  total classes: 0

