Input file: stacksizeemcc.wasm
  binary:    stacksizeemcc.wasm

Functions:           31
  Imported:           3
  Non-imported:      28
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 32.26% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      1163
  call:              28 (2.41% of all instructions)
  call_indirect:      2 (0.17% of all instructions, 6.67% of all calls)

Globals:
  #0 i32
     init: i32.const 5243952
     14 × global.get   27 × global.set   41 total (34/66% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     15 (53.57% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (3.57%) × [-16]
   27 (96.43%) × []
  functions with stack allocation total: 1 (3.57%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"stacksizeemcc.wasm",1,3.5714285,"[-16]",-16,16
sp_csv_line:"stacksizeemcc.wasm",27,96.42857,"[]",0,0

Counts of function types (5 unique types):
    3  (9.68%) × [i32, i32] -> [i32]
    4 (12.90%) × [i32] -> []
    5 (16.13%) × [] -> []
    6 (19.35%) × [] -> [i32]
   13 (41.94%) × [i32] -> [i32]

Functions with at least one call_indirect: 2 (7.14% of all functions)

Table elements initialization:
         range: [    1,    9]   length:   9   unique funcs:    9   type: [i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [] -> []
  2 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    9
         functions matching by type and present in permissable table index range:              9
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 9
    count (how often class appears): 1
  total classes: 2

CSV data for further analysis: stacksizeemcc.wasm,1163,28,2,6.6666665,31,10,1,2,1,1,1,1,18,10,55.555557,10,55.555557,1,5.5555553

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"stacksizeemcc.wasm",0,1,1,"i32.load"
"stacksizeemcc.wasm",1,9,1,"local.(get|tee)"
