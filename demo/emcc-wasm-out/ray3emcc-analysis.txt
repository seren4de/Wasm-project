Input file: ray3emcc.wasm
  binary:    ray3emcc.wasm

Functions:          100
  Imported:           7
  Non-imported:      93
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          9
  Of those, unique functions:     9 (i.e., at least 9.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13531
  call:             209 (1.54% of all instructions)
  call_indirect:     11 (0.08% of all instructions, 5.00% of all calls)

Globals:
  #0 i32
     init: i32.const 5246576
     25 × global.get   38 × global.set   63 total (40/60% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     26 (27.96% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.08%) × [-560]
    1  (1.08%) × [-256]
    1  (1.08%) × [-208]
    1  (1.08%) × [-80]
    4  (4.30%) × [-32]
    6  (6.45%) × [-16]
   79 (84.95%) × []
  functions with stack allocation total: 14 (15.05%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"ray3emcc.wasm",1,1.0752689,"[-560]",-560,560
sp_csv_line:"ray3emcc.wasm",1,1.0752689,"[-256]",-256,256
sp_csv_line:"ray3emcc.wasm",1,1.0752689,"[-208]",-208,208
sp_csv_line:"ray3emcc.wasm",1,1.0752689,"[-80]",-80,80
sp_csv_line:"ray3emcc.wasm",4,4.3010755,"[-32]",-32,32
sp_csv_line:"ray3emcc.wasm",6,6.451613,"[-16]",-16,16
sp_csv_line:"ray3emcc.wasm",79,84.946236,"[]",0,0

Counts of function types (25 unique types):
    1  (1.00%) × [i32, i32] -> []
    1  (1.00%) × [i32, i32] -> [f32]
    1  (1.00%) × [i32, i32, i32, i32, i32] -> []
    1  (1.00%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.00%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.00%) × [i32, i64, i32, i32] -> [i32]
    1  (1.00%) × [i32, f32, i32] -> []
    1  (1.00%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (1.00%) × [i64, i32, i32] -> [i32]
    1  (1.00%) × [i64, i64] -> [f64]
    1  (1.00%) × [f32] -> [f32]
    1  (1.00%) × [f64] -> [i64]
    1  (1.00%) × [f64, i32] -> [f64]
    2  (2.00%) × [i32, i32, i32, i32] -> []
    2  (2.00%) × [i32, i64, i64, i32] -> []
    2  (2.00%) × [i64, i32] -> [i32]
    3  (3.00%) × [i32, i32, i32] -> []
    3  (3.00%) × [i32, i64, i32] -> [i64]
    4  (4.00%) × [i32, i32, i32, i32] -> [i32]
    8  (8.00%) × [] -> []
   10 (10.00%) × [i32] -> []
   11 (11.00%) × [] -> [i32]
   11 (11.00%) × [i32, i32] -> [i32]
   12 (12.00%) × [i32, i32, i32] -> [i32]
   19 (19.00%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (8.60% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 5
  total classes: 6

CSV data for further analysis: ray3emcc.wasm,13531,209,11,5,100,9,7,6,1,5,1.8333333333333333,1,95,19,20,19,20,17,17.894737

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"ray3emcc.wasm",0,1,1,"i32.load"
"ray3emcc.wasm",1,2,1,"i32.load"
"ray3emcc.wasm",2,1,1,"local.(get|tee)"
"ray3emcc.wasm",3,1,1,"local.(get|tee)"
"ray3emcc.wasm",4,2,2,"i32.load"
"ray3emcc.wasm",5,2,5,"i32.load"
