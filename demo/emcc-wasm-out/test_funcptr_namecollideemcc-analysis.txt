Input file: test_funcptr_namecollideemcc.wasm
  binary:    test_funcptr_namecollideemcc.wasm

Functions:           40
  Imported:           4
  Non-imported:      36
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 12.50% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      1419
  call:              48 (3.38% of all instructions)
  call_indirect:      7 (0.49% of all instructions, 12.73% of all calls)

Globals:
  #0 i32
     init: i32.const 5245152
      9 × global.get   16 × global.set   25 total (36/64% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     10 (27.78% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.78%) × [-32]
    2  (5.56%) × [-16]
   33 (91.67%) × []
  functions with stack allocation total: 3 (8.33%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_funcptr_namecollideemcc.wasm",1,2.7777777,"[-32]",-32,32
sp_csv_line:"test_funcptr_namecollideemcc.wasm",2,5.5555553,"[-16]",-16,16
sp_csv_line:"test_funcptr_namecollideemcc.wasm",33,91.666664,"[]",0,0

Counts of function types (9 unique types):
    1  (2.50%) × [i32, i32] -> []
    1  (2.50%) × [i32, i64, i32] -> [i64]
    2  (5.00%) × [i32, i32, i32, i32] -> [i32]
    3  (7.50%) × [i32, i32, i32] -> [i32]
    5 (12.50%) × [i32, i32] -> [i32]
    6 (15.00%) × [] -> []
    7 (17.50%) × [] -> [i32]
    7 (17.50%) × [i32] -> [i32]
    8 (20.00%) × [i32] -> []

Functions with at least one call_indirect: 5 (13.89% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [] -> []
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  total classes: 4

CSV data for further analysis: test_funcptr_namecollideemcc.wasm,1419,48,7,12.727273,40,5,3,4,1,4,1.75,1,27,7,25.925926,7,25.925926,6,22.222221

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_funcptr_namecollideemcc.wasm",0,1,1,"i32.load"
"test_funcptr_namecollideemcc.wasm",1,1,1,"local.(get|tee)"
"test_funcptr_namecollideemcc.wasm",2,1,1,"i32.load"
"test_funcptr_namecollideemcc.wasm",3,1,4,"i32.load"
