Input file: sudoku_cemcc.wasm
  binary:    sudoku_cemcc.wasm

Functions:           47
  Imported:           4
  Non-imported:      43
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 8.51% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      8520
  call:              54 (0.63% of all instructions)
  call_indirect:      5 (0.06% of all instructions, 8.47% of all calls)

Globals:
  #0 i32
     init: i32.const 5245616
     11 × global.get   16 × global.set   27 total (41/59% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     12 (27.91% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.33%) × [-32]
    3  (6.98%) × [-16]
   39 (90.70%) × []
  functions with stack allocation total: 4 (9.30%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"sudoku_cemcc.wasm",1,2.3255813,"[-32]",-32,32
sp_csv_line:"sudoku_cemcc.wasm",3,6.976744,"[-16]",-16,16
sp_csv_line:"sudoku_cemcc.wasm",39,90.69768,"[]",0,0

Counts of function types (10 unique types):
    1  (2.13%) × [i32, i32, i32, i32] -> [i32]
    1  (2.13%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (2.13%) × [i32, i64, i32, i32] -> [i32]
    2  (4.26%) × [i32, i32] -> [i32]
    2  (4.26%) × [i32, i64, i32] -> [i64]
    5 (10.64%) × [i32, i32, i32] -> [i32]
    6 (12.77%) × [] -> []
    8 (17.02%) × [i32] -> []
    9 (19.15%) × [] -> [i32]
   12 (25.53%) × [i32] -> [i32]

Functions with at least one call_indirect: 4 (9.30% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  total classes: 3

CSV data for further analysis: sudoku_cemcc.wasm,8520,54,5,8.474576,47,4,3,3,1,3,1.6666666666666667,1,23,5,21.73913,5,21.73913,5,21.73913

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"sudoku_cemcc.wasm",0,1,1,"i32.load"
"sudoku_cemcc.wasm",1,1,1,"i32.load"
"sudoku_cemcc.wasm",2,1,3,"i32.load"
