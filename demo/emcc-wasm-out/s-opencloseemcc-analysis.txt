Input file: s-opencloseemcc.wasm
  binary:    s-opencloseemcc.wasm

Functions:           54
  Imported:           5
  Non-imported:      49
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 9.26% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5446
  call:              81 (1.49% of all instructions)
  call_indirect:      4 (0.07% of all instructions, 4.71% of all calls)

Globals:
  #0 i32
     init: i32.const 5244528
     10 × global.get   16 × global.set   26 total (38/62% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (22.45% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    3  (6.12%) × [-32]
    3  (6.12%) × [-16]
   43 (87.76%) × []
  functions with stack allocation total: 6 (12.24%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-opencloseemcc.wasm",3,6.122449,"[-32]",-32,32
sp_csv_line:"s-opencloseemcc.wasm",3,6.122449,"[-16]",-16,16
sp_csv_line:"s-opencloseemcc.wasm",43,87.755104,"[]",0,0

Counts of function types (9 unique types):
    1  (1.85%) × [i32, i64, i32, i32] -> [i32]
    2  (3.70%) × [i32, i64, i32] -> [i64]
    3  (5.56%) × [i32, i32, i32, i32] -> [i32]
    5  (9.26%) × [i32, i32] -> [i32]
    5  (9.26%) × [i32, i32, i32] -> [i32]
    6 (11.11%) × [] -> []
    8 (14.81%) × [] -> [i32]
    9 (16.67%) × [i32] -> []
   15 (27.78%) × [i32] -> [i32]

Functions with at least one call_indirect: 3 (6.12% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  total classes: 4

CSV data for further analysis: s-opencloseemcc.wasm,5446,81,4,4.7058825,54,5,5,4,1,1,1,1,28,5,17.857143,5,17.857143,5,17.857143

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"s-opencloseemcc.wasm",0,1,1,"i32.load"
"s-opencloseemcc.wasm",1,1,1,"i32.load"
"s-opencloseemcc.wasm",2,2,1,"i32.load"
"s-opencloseemcc.wasm",3,1,1,"i32.load"
