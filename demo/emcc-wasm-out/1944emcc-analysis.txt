Input file: 1944emcc.wasm
  binary:    1944emcc.wasm

Functions:           60
  Imported:           5
  Non-imported:      55
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 8.33% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      6421
  call:             102 (1.59% of all instructions)
  call_indirect:      8 (0.12% of all instructions, 7.27% of all calls)

Globals:
  #0 i32
     init: i32.const 5248272
     10 × global.get   16 × global.set   26 total (38/62% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (20.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    3  (5.45%) × [-32]
    3  (5.45%) × [-16]
   49 (89.09%) × []
  functions with stack allocation total: 6 (10.91%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"1944emcc.wasm",3,5.4545455,"[-32]",-32,32
sp_csv_line:"1944emcc.wasm",3,5.4545455,"[-16]",-16,16
sp_csv_line:"1944emcc.wasm",49,89.09091,"[]",0,0

Counts of function types (9 unique types):
    1  (1.67%) × [i32, i64, i32, i32] -> [i32]
    2  (3.33%) × [i32, i64, i32] -> [i64]
    4  (6.67%) × [i32, i32, i32, i32] -> [i32]
    5  (8.33%) × [i32, i32] -> [i32]
    7 (11.67%) × [] -> []
    7 (11.67%) × [i32, i32, i32] -> [i32]
    8 (13.33%) × [] -> [i32]
   10 (16.67%) × [i32] -> []
   16 (26.67%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (9.09% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 4
  total classes: 4

CSV data for further analysis: 1944emcc.wasm,6421,102,8,7.2727275,60,5,5,4,1,4,2,2,55,12,21.818182,12,21.818182,12,21.818182

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"1944emcc.wasm",0,1,1,"i32.load"
"1944emcc.wasm",1,1,1,"i32.load"
"1944emcc.wasm",2,1,2,"i32.load"
"1944emcc.wasm",3,2,4,"i32.load"
