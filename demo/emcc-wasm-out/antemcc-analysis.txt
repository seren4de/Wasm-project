Input file: antemcc.wasm
  binary:    antemcc.wasm

Functions:           94
  Imported:           7
  Non-imported:      87
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          8
  Of those, unique functions:     8 (i.e., at least 8.51% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     10869
  call:             184 (1.69% of all instructions)
  call_indirect:     11 (0.10% of all instructions, 5.64% of all calls)

Globals:
  #0 i32
     init: i32.const 5246544
     21 × global.get   39 × global.set   60 total (35/65% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     22 (25.29% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.15%) × [-560]
    1  (1.15%) × [-256]
    1  (1.15%) × [-208]
    1  (1.15%) × [-80]
    3  (3.45%) × [-32]
    8  (9.20%) × [-16]
   72 (82.76%) × []
  functions with stack allocation total: 15 (17.24%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"antemcc.wasm",1,1.1494253,"[-560]",-560,560
sp_csv_line:"antemcc.wasm",1,1.1494253,"[-256]",-256,256
sp_csv_line:"antemcc.wasm",1,1.1494253,"[-208]",-208,208
sp_csv_line:"antemcc.wasm",1,1.1494253,"[-80]",-80,80
sp_csv_line:"antemcc.wasm",3,3.4482758,"[-32]",-32,32
sp_csv_line:"antemcc.wasm",8,9.195402,"[-16]",-16,16
sp_csv_line:"antemcc.wasm",72,82.75862,"[]",0,0

Counts of function types (26 unique types):
    1  (1.06%) × [] -> [f64]
    1  (1.06%) × [i32, i32, i32] -> []
    1  (1.06%) × [i32, i32, i32, i32] -> []
    1  (1.06%) × [i32, i32, i32, i32, i32] -> []
    1  (1.06%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.06%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.06%) × [i32, i64] -> []
    1  (1.06%) × [i32, i64, i32] -> [i32]
    1  (1.06%) × [i32, i64, i32, i32] -> [i32]
    1  (1.06%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (1.06%) × [i64, i32, i32] -> [i32]
    1  (1.06%) × [i64, i64] -> [f64]
    1  (1.06%) × [f64] -> []
    1  (1.06%) × [f64] -> [i64]
    1  (1.06%) × [f64, i32] -> [f64]
    2  (2.13%) × [i32, i32] -> []
    2  (2.13%) × [i32, i32, i32, i32] -> [i32]
    2  (2.13%) × [i32, i64, i64, i32] -> []
    2  (2.13%) × [i64, i32] -> [i32]
    3  (3.19%) × [i32, i64, i32] -> [i64]
    8  (8.51%) × [i32] -> []
    8  (8.51%) × [i32, i32, i32] -> [i32]
    9  (9.57%) × [] -> []
   11 (11.70%) × [i32, i32] -> [i32]
   12 (12.77%) × [] -> [i32]
   20 (21.28%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (9.20% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  total classes: 5

CSV data for further analysis: antemcc.wasm,10869,184,11,5.6410255,94,8,4,5,1,6,2.2,1,66,13,19.69697,13,19.69697,11,16.666666

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"antemcc.wasm",0,1,1,"i32.load"
"antemcc.wasm",1,1,1,"local.(get|tee)"
"antemcc.wasm",2,1,1,"local.(get|tee)"
"antemcc.wasm",3,2,2,"i32.load"
"antemcc.wasm",4,1,6,"i32.load"
