Input file: test-rewb-bsdemcc.wasm
  binary:    test-rewb-bsdemcc.wasm

Functions:          129
  Imported:           4
  Non-imported:     125
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          7
  Of those, unique functions:     7 (i.e., at least 5.43% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     19455
  call:             535 (2.75% of all instructions)
  call_indirect:      9 (0.05% of all instructions, 1.65% of all calls)

Globals:
  #0 i32
     init: i32.const 5259104
     25 × global.get   46 × global.set   71 total (35/65% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     26 (20.80% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.80%) × [-288]
    1  (0.80%) × [-256]
    1  (0.80%) × [-208]
    1  (0.80%) × [-48]
    2  (1.60%) × [-240]
    2  (1.60%) × [-32]
   13 (10.40%) × [-16]
  104 (83.20%) × []
  functions with stack allocation total: 21 (16.80%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test-rewb-bsdemcc.wasm",1,0.8,"[-288]",-288,288
sp_csv_line:"test-rewb-bsdemcc.wasm",1,0.8,"[-256]",-256,256
sp_csv_line:"test-rewb-bsdemcc.wasm",1,0.8,"[-208]",-208,208
sp_csv_line:"test-rewb-bsdemcc.wasm",1,0.8,"[-48]",-48,48
sp_csv_line:"test-rewb-bsdemcc.wasm",2,1.6,"[-240]",-240,240
sp_csv_line:"test-rewb-bsdemcc.wasm",2,1.6,"[-32]",-32,32
sp_csv_line:"test-rewb-bsdemcc.wasm",13,10.4,"[-16]",-16,16
sp_csv_line:"test-rewb-bsdemcc.wasm",104,83.2,"[]",0,0

Counts of function types (18 unique types):
    1  (0.78%) × [i32, i32, i32, i32] -> []
    1  (0.78%) × [i32, i32, i32, i32, i32] -> []
    1  (0.78%) × [i32, i32, i32, i32, i32, i32] -> []
    1  (0.78%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.78%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.78%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.78%) × [i32, i64, i32, i32] -> [i32]
    2  (1.55%) × [i32, i32, i32] -> []
    3  (2.33%) × [i32, i32] -> []
    3  (2.33%) × [i32, i64, i32] -> [i64]
    7  (5.43%) × [] -> []
    7  (5.43%) × [i32, i32, i32, i32] -> [i32]
    9  (6.98%) × [i32, i32, i32, i32, i32] -> [i32]
   10  (7.75%) × [i32] -> []
   12  (9.30%) × [] -> [i32]
   15 (11.63%) × [i32, i32] -> [i32]
   15 (11.63%) × [i32, i32, i32] -> [i32]
   39 (30.23%) × [i32] -> [i32]

Functions with at least one call_indirect: 4 (3.20% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  total classes: 4

CSV data for further analysis: test-rewb-bsdemcc.wasm,19455,535,9,1.6544118,129,7,4,4,1,6,2.25,1,115,10,8.695652,10,8.695652,4,3.4782608

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test-rewb-bsdemcc.wasm",0,1,1,"i32.load"
"test-rewb-bsdemcc.wasm",1,1,1,"i32.load"
"test-rewb-bsdemcc.wasm",2,2,1,"i32.load"
"test-rewb-bsdemcc.wasm",3,1,6,"local.(get|tee)"
