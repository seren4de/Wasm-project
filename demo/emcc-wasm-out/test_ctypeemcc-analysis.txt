Input file: test_ctypeemcc.wasm
  binary:    test_ctypeemcc.wasm

Functions:           79
  Imported:           4
  Non-imported:      75
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         21
  Of those, unique functions:    21 (i.e., at least 26.58% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      8481
  call:             347 (4.09% of all instructions)
  call_indirect:     15 (0.18% of all instructions, 4.14% of all calls)

Globals:
  #0 i32
     init: i32.const 5248064
     12 × global.get   20 × global.set   32 total (38/62% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     13 (17.33% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.33%) × [-560]
    1  (1.33%) × [-256]
    1  (1.33%) × [-208]
    1  (1.33%) × [-80]
    2  (2.67%) × [-32]
    2  (2.67%) × [-16]
   67 (89.33%) × []
  functions with stack allocation total: 8 (10.67%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_ctypeemcc.wasm",1,1.3333334,"[-560]",-560,560
sp_csv_line:"test_ctypeemcc.wasm",1,1.3333334,"[-256]",-256,256
sp_csv_line:"test_ctypeemcc.wasm",1,1.3333334,"[-208]",-208,208
sp_csv_line:"test_ctypeemcc.wasm",1,1.3333334,"[-80]",-80,80
sp_csv_line:"test_ctypeemcc.wasm",2,2.6666667,"[-32]",-32,32
sp_csv_line:"test_ctypeemcc.wasm",2,2.6666667,"[-16]",-16,16
sp_csv_line:"test_ctypeemcc.wasm",67,89.333336,"[]",0,0

Counts of function types (22 unique types):
    1  (1.27%) × [i32, i32] -> []
    1  (1.27%) × [i32, i32, i32] -> []
    1  (1.27%) × [i32, i32, i32, i32] -> []
    1  (1.27%) × [i32, i32, i32, i32] -> [i32]
    1  (1.27%) × [i32, i32, i32, i32, i32] -> []
    1  (1.27%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.27%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.27%) × [i32, i64, i32, i32] -> [i32]
    1  (1.27%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (1.27%) × [i64, i32, i32] -> [i32]
    1  (1.27%) × [i64, i64] -> [f64]
    1  (1.27%) × [f64] -> [i64]
    1  (1.27%) × [f64, i32] -> [f64]
    2  (2.53%) × [i32, i64, i64, i32] -> []
    2  (2.53%) × [i64, i32] -> [i32]
    3  (3.80%) × [i32, i32] -> [i32]
    3  (3.80%) × [i32, i64, i32] -> [i64]
    7  (8.86%) × [] -> []
    7  (8.86%) × [i32] -> []
    7  (8.86%) × [i32, i32, i32] -> [i32]
   10 (12.66%) × [] -> [i32]
   25 (31.65%) × [i32] -> [i32]

Functions with at least one call_indirect: 7 (9.33% of all functions)

Table elements initialization:
         range: [    1,   13]   length:  13   unique funcs:   13   type: [i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [] -> []
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   19,   19]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   20,   20]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   21,   21]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  9 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     7 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):   15
         functions matching by type and present in permissable table index range:             15
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #5
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 15
    count (how often class appears): 7
  total classes: 6

CSV data for further analysis: test_ctypeemcc.wasm,8481,347,15,4.1436462,79,21,4,6,1,7,2.5,1,215,114,53.023254,114,53.023254,7,3.2558138

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_ctypeemcc.wasm",0,1,1,"i32.load"
"test_ctypeemcc.wasm",1,1,1,"local.(get|tee)"
"test_ctypeemcc.wasm",2,2,1,"i32.load"
"test_ctypeemcc.wasm",3,1,1,"local.(get|tee)"
"test_ctypeemcc.wasm",4,1,4,"i32.load"
"test_ctypeemcc.wasm",5,15,7,"local.(get|tee)"
