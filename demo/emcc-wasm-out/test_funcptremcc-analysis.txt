Input file: test_funcptremcc.wasm
  binary:    test_funcptremcc.wasm

Functions:           72
  Imported:           4
  Non-imported:      68
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 16.67% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5882
  call:             126 (2.14% of all instructions)
  call_indirect:     17 (0.29% of all instructions, 11.89% of all calls)

Globals:
  #0 i32
     init: i32.const 5246048
     14 × global.get   22 × global.set   36 total (39/61% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     15 (22.06% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.47%) × [-560]
    1  (1.47%) × [-256]
    1  (1.47%) × [-208]
    1  (1.47%) × [-80]
    2  (2.94%) × [-32]
    3  (4.41%) × [-16]
   59 (86.76%) × []
  functions with stack allocation total: 9 (13.24%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_funcptremcc.wasm",1,1.4705882,"[-560]",-560,560
sp_csv_line:"test_funcptremcc.wasm",1,1.4705882,"[-256]",-256,256
sp_csv_line:"test_funcptremcc.wasm",1,1.4705882,"[-208]",-208,208
sp_csv_line:"test_funcptremcc.wasm",1,1.4705882,"[-80]",-80,80
sp_csv_line:"test_funcptremcc.wasm",2,2.9411764,"[-32]",-32,32
sp_csv_line:"test_funcptremcc.wasm",3,4.4117646,"[-16]",-16,16
sp_csv_line:"test_funcptremcc.wasm",59,86.76471,"[]",0,0

Counts of function types (22 unique types):
    1  (1.39%) × [i32, i32] -> []
    1  (1.39%) × [i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32, i32] -> []
    1  (1.39%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.39%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.39%) × [i32, i64, i32, i32] -> [i32]
    1  (1.39%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (1.39%) × [i64, i32, i32] -> [i32]
    1  (1.39%) × [i64, i64] -> [f64]
    1  (1.39%) × [f64] -> [i64]
    1  (1.39%) × [f64, i32] -> [f64]
    2  (2.78%) × [i32, i32, i32, i32] -> [i32]
    2  (2.78%) × [i32, i64, i64, i32] -> []
    2  (2.78%) × [i64, i32] -> [i32]
    3  (4.17%) × [i32, i64, i32] -> [i64]
    5  (6.94%) × [i32, i32] -> [i32]
    7  (9.72%) × [] -> []
    7  (9.72%) × [i32] -> []
    7  (9.72%) × [i32, i32, i32] -> [i32]
   12 (16.67%) × [] -> [i32]
   13 (18.06%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (11.76% of all functions)

Table elements initialization:
         range: [    1,    2]   length:   2   unique funcs:    2   type: [] -> [i32]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [] -> []
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  10 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source: local.(get|tee)   type [] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 6
  total classes: 7

CSV data for further analysis: test_funcptremcc.wasm,5882,126,17,11.888112,72,12,4,7,1,6,2.4285714285714284,1,145,30,20.689655,30,20.689655,8,5.5172415

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_funcptremcc.wasm",0,1,1,"i32.load"
"test_funcptremcc.wasm",1,1,1,"local.(get|tee)"
"test_funcptremcc.wasm",2,2,1,"i32.load"
"test_funcptremcc.wasm",3,1,1,"local.(get|tee)"
"test_funcptremcc.wasm",4,4,2,"local.(get|tee)"
"test_funcptremcc.wasm",5,1,5,"i32.load"
"test_funcptremcc.wasm",6,2,6,"local.(get|tee)"
