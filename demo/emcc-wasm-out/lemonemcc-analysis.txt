Input file: lemonemcc.wasm
  binary:    lemonemcc.wasm

Functions:          286
  Imported:          10
  Non-imported:     276
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         17
  Of those, unique functions:    17 (i.e., at least 5.94% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     78819
  call:            1195 (1.52% of all instructions)
  call_indirect:     32 (0.04% of all instructions, 2.61% of all calls)

Globals:
  #0 i32
     init: i32.const 5253744
     144 × global.get   248 × global.set   392 total (37/63% split)
  #1 i32
     init: i32.const 0
       2 × global.get     1 × global.set     3 total (67/33% split)
  #2 i32
     init: i32.const 0
       1 × global.get     1 × global.set     2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:    145 (52.54% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.36%) × [-8976]
    1  (0.36%) × [-560]
    1  (0.36%) × [-432]
    1  (0.36%) × [-336]
    1  (0.36%) × [-128]
    1  (0.36%) × [-112]
    1  (0.36%) × [-96]
    1  (0.36%) × [-48]
    2  (0.72%) × [-256]
    2  (0.72%) × [-240]
    2  (0.72%) × [-208]
    2  (0.72%) × [-160]
    2  (0.72%) × [-80]
    4  (1.45%) × [-32]
   18  (6.52%) × [-16]
  236 (85.51%) × []
  functions with stack allocation total: 40 (14.49%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-8976]",-8976,8976
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-560]",-560,560
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-432]",-432,432
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-336]",-336,336
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-128]",-128,128
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-112]",-112,112
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-96]",-96,96
sp_csv_line:"lemonemcc.wasm",1,0.36231884,"[-48]",-48,48
sp_csv_line:"lemonemcc.wasm",2,0.7246377,"[-256]",-256,256
sp_csv_line:"lemonemcc.wasm",2,0.7246377,"[-240]",-240,240
sp_csv_line:"lemonemcc.wasm",2,0.7246377,"[-208]",-208,208
sp_csv_line:"lemonemcc.wasm",2,0.7246377,"[-160]",-160,160
sp_csv_line:"lemonemcc.wasm",2,0.7246377,"[-80]",-80,80
sp_csv_line:"lemonemcc.wasm",4,1.4492754,"[-32]",-32,32
sp_csv_line:"lemonemcc.wasm",18,6.521739,"[-16]",-16,16
sp_csv_line:"lemonemcc.wasm",236,85.50725,"[]",0,0

Counts of function types (36 unique types):
    1  (0.35%) × [i32, i32] -> [i64]
    1  (0.35%) × [i32, i32] -> [f64]
    1  (0.35%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.35%) × [i32, i32, i32, i32, i32, i32] -> []
    1  (0.35%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.35%) × [i32, i32, i32, i64] -> [i64]
    1  (0.35%) × [i32, i64] -> []
    1  (0.35%) × [i32, i64, i32, i32] -> [i32]
    1  (0.35%) × [i32, i64, i64] -> []
    1  (0.35%) × [i32, f32] -> []
    1  (0.35%) × [i32, f64] -> []
    1  (0.35%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.35%) × [i64, i32, i32] -> [i32]
    1  (0.35%) × [i64, i64] -> [i32]
    1  (0.35%) × [i64, i64] -> [f64]
    1  (0.35%) × [f64] -> [i64]
    2  (0.70%) × [i32] -> [i64]
    2  (0.70%) × [i32, i32, i32, i32, i32] -> []
    2  (0.70%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    2  (0.70%) × [i32, i64, i32] -> [i32]
    2  (0.70%) × [i64, i32] -> [i32]
    2  (0.70%) × [i64, i64, i64, i64] -> [i32]
    2  (0.70%) × [f64, i32] -> [f64]
    3  (1.05%) × [i32, i64, i32] -> [i64]
    3  (1.05%) × [i32, i64, i64, i32] -> []
    5  (1.75%) × [i32, i32, i32] -> []
    7  (2.45%) × [i32, i64, i64, i64, i64] -> []
    8  (2.80%) × [i32, i32, i32, i32] -> [i32]
   12  (4.20%) × [i32, i32, i32, i32] -> []
   13  (4.55%) × [i32, i32] -> []
   20  (6.99%) × [] -> []
   24  (8.39%) × [i32, i32, i32] -> [i32]
   25  (8.74%) × [] -> [i32]
   35 (12.24%) × [i32] -> []
   47 (16.43%) × [i32, i32] -> [i32]
   54 (18.88%) × [i32] -> [i32]

Functions with at least one call_indirect: 20 (7.25% of all functions)

Table elements initialization:
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,    7]   length:   2   unique funcs:    2   type: [i32] -> []
         range: [    8,    8]   length:   1   unique funcs:    1   type: [] -> []
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   13]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  10 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):               35
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               54
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               54
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               47
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [f64] -> []
         functions matching by type (regardless whether they are in the table):                0
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
  11 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #5
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #6
    type: [f64] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #7
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 3
  class #8
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 4
  class #9
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  class #10
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  total classes: 11

CSV data for further analysis: lemonemcc.wasm,78819,1195,32,2.607987,286,17,8,11,1,10,2.909090909090909,1,910,93,10.21978,93,10.21978,39,4.285714

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"lemonemcc.wasm",0,1,1,"i32.load"
"lemonemcc.wasm",1,2,1,"i32.load"
"lemonemcc.wasm",2,2,1,"local.(get|tee)"
"lemonemcc.wasm",3,1,1,"local.(get|tee)"
"lemonemcc.wasm",4,2,1,"local.(get|tee)"
"lemonemcc.wasm",5,1,1,"local.(get|tee)"
"lemonemcc.wasm",6,0,1,"local.(get|tee)"
"lemonemcc.wasm",7,2,3,"i32.load"
"lemonemcc.wasm",8,2,4,"local.(get|tee)"
"lemonemcc.wasm",9,5,8,"local.(get|tee)"
"lemonemcc.wasm",10,3,10,"i32.load"
