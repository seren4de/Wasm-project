Input file: mkkeywordhashemcc.wasm
  binary:    mkkeywordhashemcc.wasm

Functions:           88
  Imported:           6
  Non-imported:      82
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         11
  Of those, unique functions:    11 (i.e., at least 12.50% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11319
  call:             219 (1.93% of all instructions)
  call_indirect:     14 (0.12% of all instructions, 6.01% of all calls)

Globals:
  #0 i32
     init: i32.const 5257344
     23 × global.get   41 × global.set   64 total (36/64% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (29.27% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.22%) × [-560]
    1  (1.22%) × [-80]
    2  (2.44%) × [-256]
    2  (2.44%) × [-240]
    2  (2.44%) × [-208]
    2  (2.44%) × [-32]
    5  (6.10%) × [-16]
   67 (81.71%) × []
  functions with stack allocation total: 15 (18.29%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"mkkeywordhashemcc.wasm",1,1.2195122,"[-560]",-560,560
sp_csv_line:"mkkeywordhashemcc.wasm",1,1.2195122,"[-80]",-80,80
sp_csv_line:"mkkeywordhashemcc.wasm",2,2.4390244,"[-256]",-256,256
sp_csv_line:"mkkeywordhashemcc.wasm",2,2.4390244,"[-240]",-240,240
sp_csv_line:"mkkeywordhashemcc.wasm",2,2.4390244,"[-208]",-208,208
sp_csv_line:"mkkeywordhashemcc.wasm",2,2.4390244,"[-32]",-32,32
sp_csv_line:"mkkeywordhashemcc.wasm",5,6.097561,"[-16]",-16,16
sp_csv_line:"mkkeywordhashemcc.wasm",67,81.70731,"[]",0,0

Counts of function types (23 unique types):
    1  (1.14%) × [i32, i32, i32, i32] -> [i32]
    1  (1.14%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.14%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (1.14%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.14%) × [i32, i64, i32, i32] -> [i32]
    1  (1.14%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (1.14%) × [i64, i32, i32] -> [i32]
    1  (1.14%) × [i64, i64] -> [f64]
    1  (1.14%) × [f64] -> [i64]
    1  (1.14%) × [f64, i32] -> [f64]
    2  (2.27%) × [i32, i32, i32] -> []
    2  (2.27%) × [i32, i32, i32, i32, i32] -> []
    2  (2.27%) × [i32, i64, i64, i32] -> []
    2  (2.27%) × [i64, i32] -> [i32]
    3  (3.41%) × [i32, i32] -> []
    3  (3.41%) × [i32, i32, i32, i32] -> []
    3  (3.41%) × [i32, i64, i32] -> [i64]
    7  (7.95%) × [i32] -> []
    8  (9.09%) × [] -> []
    9 (10.23%) × [i32, i32, i32] -> [i32]
   10 (11.36%) × [] -> [i32]
   12 (13.64%) × [i32, i32] -> [i32]
   15 (17.05%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (9.76% of all functions)

Table elements initialization:
         range: [    1,    3]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [] -> []
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  9 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #5
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 6
  total classes: 6

CSV data for further analysis: mkkeywordhashemcc.wasm,11319,219,14,6.0085835,88,11,4,6,1,6,2.3333333333333335,1,123,27,21.95122,27,21.95122,7,5.6910567

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"mkkeywordhashemcc.wasm",0,1,1,"i32.load"
"mkkeywordhashemcc.wasm",1,1,1,"local.(get|tee)"
"mkkeywordhashemcc.wasm",2,2,1,"i32.load"
"mkkeywordhashemcc.wasm",3,1,1,"local.(get|tee)"
"mkkeywordhashemcc.wasm",4,1,4,"i32.load"
"mkkeywordhashemcc.wasm",5,3,6,"local.(get|tee)"
