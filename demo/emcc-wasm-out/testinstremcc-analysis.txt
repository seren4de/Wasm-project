Input file: testinstremcc.wasm
  binary:    testinstremcc.wasm

Functions:          105
  Imported:           8
  Non-imported:      97
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          8
  Of those, unique functions:     8 (i.e., at least 7.62% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     10964
  call:             204 (1.86% of all instructions)
  call_indirect:      9 (0.08% of all instructions, 4.23% of all calls)

Globals:
  #0 i32
     init: i32.const 5248848
     26 × global.get   50 × global.set   76 total (34/66% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     27 (27.84% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.03%) × [-560]
    1  (1.03%) × [-256]
    1  (1.03%) × [-208]
    1  (1.03%) × [-144]
    1  (1.03%) × [-80]
    3  (3.09%) × [-32]
   11 (11.34%) × [-16]
   78 (80.41%) × []
  functions with stack allocation total: 19 (19.59%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"testinstremcc.wasm",1,1.0309278,"[-560]",-560,560
sp_csv_line:"testinstremcc.wasm",1,1.0309278,"[-256]",-256,256
sp_csv_line:"testinstremcc.wasm",1,1.0309278,"[-208]",-208,208
sp_csv_line:"testinstremcc.wasm",1,1.0309278,"[-144]",-144,144
sp_csv_line:"testinstremcc.wasm",1,1.0309278,"[-80]",-80,80
sp_csv_line:"testinstremcc.wasm",3,3.0927835,"[-32]",-32,32
sp_csv_line:"testinstremcc.wasm",11,11.340206,"[-16]",-16,16
sp_csv_line:"testinstremcc.wasm",78,80.41237,"[]",0,0

Counts of function types (26 unique types):
    1  (0.95%) × [] -> [f64]
    1  (0.95%) × [i32, i32, i32] -> []
    1  (0.95%) × [i32, i32, i32, i32] -> []
    1  (0.95%) × [i32, i32, i32, i32, i32] -> []
    1  (0.95%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.95%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.95%) × [i32, i64] -> []
    1  (0.95%) × [i32, i64, i32] -> [i32]
    1  (0.95%) × [i32, i64, i32, i32] -> [i32]
    1  (0.95%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.95%) × [i64, i32, i32] -> [i32]
    1  (0.95%) × [i64, i64] -> [f64]
    1  (0.95%) × [f64] -> []
    1  (0.95%) × [f64] -> [i64]
    1  (0.95%) × [f64, i32] -> [f64]
    2  (1.90%) × [i32, i32] -> []
    2  (1.90%) × [i32, i64, i64, i32] -> []
    2  (1.90%) × [i64, i32] -> [i32]
    3  (2.86%) × [i32, i64, i32] -> [i64]
    5  (4.76%) × [i32, i32, i32, i32] -> [i32]
    8  (7.62%) × [] -> []
    9  (8.57%) × [i32] -> []
   11 (10.48%) × [i32, i32, i32] -> [i32]
   12 (11.43%) × [] -> [i32]
   16 (15.24%) × [i32, i32] -> [i32]
   20 (19.05%) × [i32] -> [i32]

Functions with at least one call_indirect: 7 (7.22% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  total classes: 5

CSV data for further analysis: testinstremcc.wasm,10964,204,9,4.2253523,105,8,4,5,1,5,1.8,1,69,10,14.492754,10,14.492754,8,11.594203

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"testinstremcc.wasm",0,1,1,"i32.load"
"testinstremcc.wasm",1,1,1,"local.(get|tee)"
"testinstremcc.wasm",2,2,1,"i32.load"
"testinstremcc.wasm",3,1,1,"local.(get|tee)"
"testinstremcc.wasm",4,1,5,"i32.load"
