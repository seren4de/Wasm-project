Input file: s-dataemcc.wasm
  binary:    s-dataemcc.wasm

Functions:           29
  Imported:           4
  Non-imported:      25
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 20.69% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:       462
  call:              24 (5.19% of all instructions)
  call_indirect:      1 (0.22% of all instructions, 4.00% of all calls)

Globals:
  #0 i32
     init: i32.const 5245280
     8 × global.get   8 × global.set  16 total (50/50% split)
  #1 i32
     init: i32.const 0
     2 × global.get   1 × global.set   3 total (67/33% split)
  #2 i32
     init: i32.const 0
     1 × global.get   1 × global.set   2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (36.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (4.00%) × [-32]
    1  (4.00%) × [-16]
   23 (92.00%) × []
  functions with stack allocation total: 2 (8.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-dataemcc.wasm",1,4,"[-32]",-32,32
sp_csv_line:"s-dataemcc.wasm",1,4,"[-16]",-16,16
sp_csv_line:"s-dataemcc.wasm",23,92,"[]",0,0

Counts of function types (9 unique types):
    1  (3.45%) × [i32, i32, i32] -> [i32]
    1  (3.45%) × [i32, i32, i32, i32] -> [i32]
    1  (3.45%) × [i32, i64, i32, i32] -> [i32]
    2  (6.90%) × [i32, i32] -> [i32]
    3 (10.34%) × [i32, i64, i32] -> [i64]
    4 (13.79%) × [i32] -> []
    5 (17.24%) × [] -> []
    6 (20.69%) × [] -> [i32]
    6 (20.69%) × [i32] -> [i32]

Functions with at least one call_indirect: 1 (4.00% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  1 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  total classes: 1

CSV data for further analysis: s-dataemcc.wasm,462,24,1,4,29,6,1,1,1,1,1,1,5,1,20,1,20,1,20

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"s-dataemcc.wasm",0,1,1,"i32.load"
