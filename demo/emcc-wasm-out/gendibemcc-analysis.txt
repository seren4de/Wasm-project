Input file: gendibemcc.wasm
  binary:    gendibemcc.wasm

Functions:          125
  Imported:           7
  Non-imported:     118
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 8.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     19029
  call:             514 (2.70% of all instructions)
  call_indirect:     12 (0.06% of all instructions, 2.28% of all calls)

Globals:
  #0 i32
     init: i32.const 5254080
     35 × global.get   66 × global.set  101 total (35/65% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     36 (30.51% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.85%) × [-560]
    1  (0.85%) × [-256]
    1  (0.85%) × [-208]
    1  (0.85%) × [-160]
    1  (0.85%) × [-80]
    4  (3.39%) × [-32]
    7  (5.93%) × [-16]
  102 (86.44%) × []
  functions with stack allocation total: 16 (13.56%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"gendibemcc.wasm",1,0.84745765,"[-560]",-560,560
sp_csv_line:"gendibemcc.wasm",1,0.84745765,"[-256]",-256,256
sp_csv_line:"gendibemcc.wasm",1,0.84745765,"[-208]",-208,208
sp_csv_line:"gendibemcc.wasm",1,0.84745765,"[-160]",-160,160
sp_csv_line:"gendibemcc.wasm",1,0.84745765,"[-80]",-80,80
sp_csv_line:"gendibemcc.wasm",4,3.3898306,"[-32]",-32,32
sp_csv_line:"gendibemcc.wasm",7,5.9322033,"[-16]",-16,16
sp_csv_line:"gendibemcc.wasm",102,86.44068,"[]",0,0

Counts of function types (23 unique types):
    1  (0.80%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.80%) × [i32, i32, i32, i32, i32, i32] -> []
    1  (0.80%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.80%) × [i32, i64, i32, i32] -> [i32]
    1  (0.80%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.80%) × [i64, i32, i32] -> [i32]
    1  (0.80%) × [i64, i64] -> [f64]
    1  (0.80%) × [f64] -> [i64]
    1  (0.80%) × [f64, i32] -> [f64]
    2  (1.60%) × [i32, i64, i64, i32] -> []
    2  (1.60%) × [i64, i32] -> [i32]
    3  (2.40%) × [i32, i32, i32, i32] -> []
    3  (2.40%) × [i32, i64, i32] -> [i64]
    4  (3.20%) × [i32, i32, i32] -> []
    4  (3.20%) × [i32, i32, i32, i32, i32] -> []
    5  (4.00%) × [i32, i32] -> []
    5  (4.00%) × [i32, i32, i32, i32] -> [i32]
    8  (6.40%) × [] -> []
   11  (8.80%) × [] -> [i32]
   12  (9.60%) × [i32] -> []
   14 (11.20%) × [i32, i32, i32] -> [i32]
   21 (16.80%) × [i32] -> [i32]
   22 (17.60%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 9 (7.63% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 6
  total classes: 6

CSV data for further analysis: gendibemcc.wasm,19029,514,12,2.2813687,125,10,8,6,1,6,2,1,125,27,21.6,27,21.6,25,20

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"gendibemcc.wasm",0,1,1,"i32.load"
"gendibemcc.wasm",1,2,1,"i32.load"
"gendibemcc.wasm",2,1,1,"local.(get|tee)"
"gendibemcc.wasm",3,1,1,"local.(get|tee)"
"gendibemcc.wasm",4,2,2,"i32.load"
"gendibemcc.wasm",5,3,6,"i32.load"
