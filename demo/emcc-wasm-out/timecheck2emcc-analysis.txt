Input file: timecheck2emcc.wasm
  binary:    timecheck2emcc.wasm

Functions:          116
  Imported:           6
  Non-imported:     110
  Exported:          10

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 8.62% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14399
  call:             245 (1.70% of all instructions)
  call_indirect:     12 (0.08% of all instructions, 4.67% of all calls)

Globals:
  #0 i32
     init: i32.const 5247008
     23 × global.get   38 × global.set   61 total (38/62% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (21.82% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.91%) × [-560]
    1  (0.91%) × [-304]
    1  (0.91%) × [-256]
    1  (0.91%) × [-208]
    1  (0.91%) × [-112]
    1  (0.91%) × [-80]
    2  (1.82%) × [-32]
    7  (6.36%) × [-16]
   95 (86.36%) × []
  functions with stack allocation total: 15 (13.64%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"timecheck2emcc.wasm",1,0.90909094,"[-560]",-560,560
sp_csv_line:"timecheck2emcc.wasm",1,0.90909094,"[-304]",-304,304
sp_csv_line:"timecheck2emcc.wasm",1,0.90909094,"[-256]",-256,256
sp_csv_line:"timecheck2emcc.wasm",1,0.90909094,"[-208]",-208,208
sp_csv_line:"timecheck2emcc.wasm",1,0.90909094,"[-112]",-112,112
sp_csv_line:"timecheck2emcc.wasm",1,0.90909094,"[-80]",-80,80
sp_csv_line:"timecheck2emcc.wasm",2,1.8181819,"[-32]",-32,32
sp_csv_line:"timecheck2emcc.wasm",7,6.3636365,"[-16]",-16,16
sp_csv_line:"timecheck2emcc.wasm",95,86.36364,"[]",0,0

Counts of function types (27 unique types):
    1  (0.86%) × [i32, i32] -> [i64]
    1  (0.86%) × [i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.86%) × [i32, i64, i32, i32] -> [i32]
    1  (0.86%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i64, i32] -> [i64]
    1  (0.86%) × [i64, i32, i32, i32, i32, i32] -> []
    1  (0.86%) × [f64] -> [i64]
    1  (0.86%) × [f64, i32] -> [f64]
    2  (1.72%) × [i32, i32, i32, i32] -> [i32]
    2  (1.72%) × [i32, i64, i64, i32] -> []
    2  (1.72%) × [i64, i32, i32] -> [i32]
    2  (1.72%) × [i64, i64] -> [f64]
    3  (2.59%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    3  (2.59%) × [i32, i64, i32] -> [i64]
    3  (2.59%) × [i64, i32] -> [i32]
    6  (5.17%) × [i32, i32] -> []
    9  (7.76%) × [i32] -> []
    9  (7.76%) × [i32, i32, i32] -> [i32]
   10  (8.62%) × [] -> []
   11  (9.48%) × [] -> [i32]
   20 (17.24%) × [i32, i32] -> [i32]
   21 (18.10%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (7.27% of all functions)

Table elements initialization:
         range: [    1,    2]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [] -> []
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  9 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 4
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  total classes: 6

CSV data for further analysis: timecheck2emcc.wasm,14399,245,12,4.6692605,116,10,4,6,1,4,2,1,140,25,17.857143,25,17.857143,7,5

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"timecheck2emcc.wasm",0,1,1,"i32.load"
"timecheck2emcc.wasm",1,1,1,"local.(get|tee)"
"timecheck2emcc.wasm",2,2,1,"i32.load"
"timecheck2emcc.wasm",3,1,1,"local.(get|tee)"
"timecheck2emcc.wasm",4,4,4,"local.(get|tee)"
"timecheck2emcc.wasm",5,1,4,"i32.load"
