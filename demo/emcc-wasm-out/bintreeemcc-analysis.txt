Input file: bintreeemcc.wasm
  binary:    bintreeemcc.wasm

Functions:          123
  Imported:           7
  Non-imported:     116
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          9
  Of those, unique functions:     9 (i.e., at least 7.32% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     22735
  call:             431 (1.90% of all instructions)
  call_indirect:     10 (0.04% of all instructions, 2.27% of all calls)

Globals:
  #0 i32
     init: i32.const 5248448
     44 × global.get   82 × global.set  126 total (35/65% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     45 (38.79% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.86%) × [-8976]
    1  (0.86%) × [-560]
    1  (0.86%) × [-432]
    1  (0.86%) × [-336]
    1  (0.86%) × [-304]
    1  (0.86%) × [-256]
    1  (0.86%) × [-208]
    1  (0.86%) × [-128]
    1  (0.86%) × [-112]
    1  (0.86%) × [-96]
    1  (0.86%) × [-48]
    2  (1.72%) × [-80]
    4  (3.45%) × [-32]
   13 (11.21%) × [-16]
   86 (74.14%) × []
  functions with stack allocation total: 30 (25.86%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-8976]",-8976,8976
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-560]",-560,560
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-432]",-432,432
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-336]",-336,336
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-304]",-304,304
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-256]",-256,256
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-208]",-208,208
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-128]",-128,128
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-112]",-112,112
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-96]",-96,96
sp_csv_line:"bintreeemcc.wasm",1,0.86206895,"[-48]",-48,48
sp_csv_line:"bintreeemcc.wasm",2,1.7241379,"[-80]",-80,80
sp_csv_line:"bintreeemcc.wasm",4,3.4482758,"[-32]",-32,32
sp_csv_line:"bintreeemcc.wasm",13,11.206897,"[-16]",-16,16
sp_csv_line:"bintreeemcc.wasm",86,74.13793,"[]",0,0

Counts of function types (35 unique types):
    1  (0.81%) × [i32, i32] -> [i64]
    1  (0.81%) × [i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.81%) × [i32, i32, i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.81%) × [i32, i32, i32, i64] -> [i64]
    1  (0.81%) × [i32, i32, i64] -> []
    1  (0.81%) × [i32, i64] -> []
    1  (0.81%) × [i32, i64, i32, i32] -> [i32]
    1  (0.81%) × [i32, i64, i64] -> []
    1  (0.81%) × [i32, f32] -> []
    1  (0.81%) × [i32, f64] -> []
    1  (0.81%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.81%) × [i64, i32, i32] -> [i32]
    1  (0.81%) × [i64, i64] -> [i32]
    1  (0.81%) × [i64, i64] -> [f32]
    1  (0.81%) × [i64, i64] -> [f64]
    1  (0.81%) × [f64] -> [i64]
    2  (1.63%) × [i32, i32, i32, i32] -> []
    2  (1.63%) × [i64, i32] -> [i32]
    2  (1.63%) × [i64, i64, i64, i64] -> [i32]
    2  (1.63%) × [f64, i32] -> [f64]
    3  (2.44%) × [i32, i32, i32, i32] -> [i32]
    3  (2.44%) × [i32, i64, i32] -> [i64]
    3  (2.44%) × [i32, i64, i64, i32] -> []
    4  (3.25%) × [i32, i32] -> []
    7  (5.69%) × [] -> []
    7  (5.69%) × [i32, i64, i64, i64, i64] -> []
    8  (6.50%) × [i32] -> []
    9  (7.32%) × [i32, i32, i32] -> [i32]
   13 (10.57%) × [i32, i32] -> [i32]
   14 (11.38%) × [] -> [i32]
   24 (19.51%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (6.90% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  9 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 6
  total classes: 5

CSV data for further analysis: bintreeemcc.wasm,22735,431,10,2.2675736,123,9,5,5,1,6,2,1,69,17,24.637682,17,24.637682,15,21.73913

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"bintreeemcc.wasm",0,1,1,"i32.load"
"bintreeemcc.wasm",1,1,1,"local.(get|tee)"
"bintreeemcc.wasm",2,2,1,"i32.load"
"bintreeemcc.wasm",3,1,1,"local.(get|tee)"
"bintreeemcc.wasm",4,2,6,"i32.load"
