Input file: t_fmemopenemcc.wasm
  binary:    t_fmemopenemcc.wasm

Functions:          158
  Imported:           4
  Non-imported:     154
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 7.59% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25032
  call:             728 (2.91% of all instructions)
  call_indirect:     18 (0.07% of all instructions, 2.41% of all calls)

Globals:
  #0 i32
     init: i32.const 5252048
     41 × global.get   77 × global.set  118 total (35/65% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     42 (27.27% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.65%) × [-560]
    1  (0.65%) × [-256]
    1  (0.65%) × [-208]
    1  (0.65%) × [-80]
    2  (1.30%) × [-32]
    8  (5.19%) × [-16]
  140 (90.91%) × []
  functions with stack allocation total: 14 (9.09%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"t_fmemopenemcc.wasm",1,0.64935064,"[-560]",-560,560
sp_csv_line:"t_fmemopenemcc.wasm",1,0.64935064,"[-256]",-256,256
sp_csv_line:"t_fmemopenemcc.wasm",1,0.64935064,"[-208]",-208,208
sp_csv_line:"t_fmemopenemcc.wasm",1,0.64935064,"[-80]",-80,80
sp_csv_line:"t_fmemopenemcc.wasm",2,1.2987013,"[-32]",-32,32
sp_csv_line:"t_fmemopenemcc.wasm",8,5.194805,"[-16]",-16,16
sp_csv_line:"t_fmemopenemcc.wasm",140,90.90909,"[]",0,0

Counts of function types (24 unique types):
    1  (0.63%) × [i32, i32, i32] -> []
    1  (0.63%) × [i32, i32, i32, i32, i32] -> []
    1  (0.63%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.63%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.63%) × [i32, i64, i32, i32] -> [i32]
    1  (0.63%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.63%) × [i64, i32, i32] -> [i32]
    1  (0.63%) × [i64, i64] -> [f64]
    1  (0.63%) × [f64] -> [i64]
    1  (0.63%) × [f64, i32] -> [f64]
    2  (1.27%) × [i32] -> [i64]
    2  (1.27%) × [i32, i32] -> []
    2  (1.27%) × [i32, i32, i32, i32] -> []
    2  (1.27%) × [i32, i64, i32] -> [i32]
    2  (1.27%) × [i32, i64, i64, i32] -> []
    2  (1.27%) × [i64, i32] -> [i32]
    4  (2.53%) × [i32, i32, i32, i32] -> [i32]
    4  (2.53%) × [i32, i64, i32] -> [i64]
   10  (6.33%) × [i32, i32] -> [i32]
   11  (6.96%) × [] -> [i32]
   12  (7.59%) × [i32] -> []
   12  (7.59%) × [i32, i32, i32] -> [i32]
   28 (17.72%) × [i32] -> [i32]
   55 (34.81%) × [] -> []

Functions with at least one call_indirect: 14 (9.09% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  10 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               55
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 1
  class #4
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #5
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 3
  class #6
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  total classes: 7

CSV data for further analysis: t_fmemopenemcc.wasm,25032,728,18,2.4128687,158,12,10,7,1,10,2.5714285714285716,1,222,48,21.621622,48,21.621622,43,19.36937

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"t_fmemopenemcc.wasm",0,1,1,"i32.load"
"t_fmemopenemcc.wasm",1,3,1,"i32.load"
"t_fmemopenemcc.wasm",2,1,1,"local.(get|tee)"
"t_fmemopenemcc.wasm",3,3,1,"local.(get|tee)"
"t_fmemopenemcc.wasm",4,1,1,"local.(get|tee)"
"t_fmemopenemcc.wasm",5,3,3,"i32.load"
"t_fmemopenemcc.wasm",6,3,10,"i32.load"
