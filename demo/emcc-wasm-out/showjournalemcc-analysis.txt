Input file: showjournalemcc.wasm
  binary:    showjournalemcc.wasm

Functions:          109
  Imported:           7
  Non-imported:     102
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 9.17% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     12325
  call:             246 (2.00% of all instructions)
  call_indirect:     16 (0.13% of all instructions, 6.11% of all calls)

Globals:
  #0 i32
     init: i32.const 5246944
     24 × global.get   46 × global.set   70 total (34/66% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (24.51% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.98%) × [-560]
    1  (0.98%) × [-256]
    1  (0.98%) × [-208]
    1  (0.98%) × [-160]
    1  (0.98%) × [-80]
    4  (3.92%) × [-32]
    7  (6.86%) × [-16]
   86 (84.31%) × []
  functions with stack allocation total: 16 (15.69%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"showjournalemcc.wasm",1,0.98039216,"[-560]",-560,560
sp_csv_line:"showjournalemcc.wasm",1,0.98039216,"[-256]",-256,256
sp_csv_line:"showjournalemcc.wasm",1,0.98039216,"[-208]",-208,208
sp_csv_line:"showjournalemcc.wasm",1,0.98039216,"[-160]",-160,160
sp_csv_line:"showjournalemcc.wasm",1,0.98039216,"[-80]",-80,80
sp_csv_line:"showjournalemcc.wasm",4,3.9215686,"[-32]",-32,32
sp_csv_line:"showjournalemcc.wasm",7,6.8627453,"[-16]",-16,16
sp_csv_line:"showjournalemcc.wasm",86,84.31373,"[]",0,0

Counts of function types (24 unique types):
    1  (0.92%) × [i32, i32] -> []
    1  (0.92%) × [i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [i32, i64, i32, i32] -> [i32]
    1  (0.92%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [i64, i32, i32] -> [i32]
    1  (0.92%) × [i64, i64] -> [f64]
    1  (0.92%) × [f64] -> [i64]
    1  (0.92%) × [f64, i32] -> [f64]
    2  (1.83%) × [i32] -> [i64]
    2  (1.83%) × [i32, i64, i32] -> [i32]
    2  (1.83%) × [i32, i64, i64, i32] -> []
    2  (1.83%) × [i64, i32] -> [i32]
    3  (2.75%) × [i32, i64, i32] -> [i64]
    6  (5.50%) × [i32, i32, i32, i32] -> [i32]
    9  (8.26%) × [] -> []
   11 (10.09%) × [] -> [i32]
   11 (10.09%) × [i32] -> []
   12 (11.01%) × [i32, i32] -> [i32]
   15 (13.76%) × [i32, i32, i32] -> [i32]
   22 (20.18%) × [i32] -> [i32]

Functions with at least one call_indirect: 12 (11.76% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #4
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #5
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 3
  class #6
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 8
  total classes: 7

CSV data for further analysis: showjournalemcc.wasm,12325,246,16,6.10687,109,10,8,7,1,8,2.2857142857142856,1,165,37,22.424242,37,22.424242,33,20

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"showjournalemcc.wasm",0,1,1,"i32.load"
"showjournalemcc.wasm",1,2,1,"i32.load"
"showjournalemcc.wasm",2,1,1,"local.(get|tee)"
"showjournalemcc.wasm",3,2,1,"local.(get|tee)"
"showjournalemcc.wasm",4,1,1,"local.(get|tee)"
"showjournalemcc.wasm",5,2,3,"i32.load"
"showjournalemcc.wasm",6,3,8,"i32.load"
