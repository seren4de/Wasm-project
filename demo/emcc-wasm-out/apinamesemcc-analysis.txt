Input file: apinamesemcc.wasm
  binary:    apinamesemcc.wasm

Functions:          117
  Imported:           7
  Non-imported:     110
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 8.55% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16185
  call:             272 (1.68% of all instructions)
  call_indirect:     19 (0.12% of all instructions, 6.53% of all calls)

Globals:
  #0 i32
     init: i32.const 5249888
     28 × global.get   52 × global.set   80 total (35/65% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     29 (26.36% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.91%) × [-560]
    1  (0.91%) × [-80]
    2  (1.82%) × [-256]
    2  (1.82%) × [-240]
    2  (1.82%) × [-208]
    4  (3.64%) × [-32]
    6  (5.45%) × [-16]
   92 (83.64%) × []
  functions with stack allocation total: 18 (16.36%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"apinamesemcc.wasm",1,0.90909094,"[-560]",-560,560
sp_csv_line:"apinamesemcc.wasm",1,0.90909094,"[-80]",-80,80
sp_csv_line:"apinamesemcc.wasm",2,1.8181819,"[-256]",-256,256
sp_csv_line:"apinamesemcc.wasm",2,1.8181819,"[-240]",-240,240
sp_csv_line:"apinamesemcc.wasm",2,1.8181819,"[-208]",-208,208
sp_csv_line:"apinamesemcc.wasm",4,3.6363637,"[-32]",-32,32
sp_csv_line:"apinamesemcc.wasm",6,5.4545455,"[-16]",-16,16
sp_csv_line:"apinamesemcc.wasm",92,83.63636,"[]",0,0

Counts of function types (23 unique types):
    1  (0.85%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.85%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.85%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.85%) × [i32, i64, i32, i32] -> [i32]
    1  (0.85%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.85%) × [i64, i32, i32] -> [i32]
    1  (0.85%) × [i64, i64] -> [f64]
    1  (0.85%) × [f64] -> [i64]
    1  (0.85%) × [f64, i32] -> [f64]
    2  (1.71%) × [i32, i32, i32, i32] -> []
    2  (1.71%) × [i32, i32, i32, i32, i32] -> []
    2  (1.71%) × [i32, i64, i64, i32] -> []
    2  (1.71%) × [i64, i32] -> [i32]
    3  (2.56%) × [i32, i32, i32] -> []
    3  (2.56%) × [i32, i32, i32, i32] -> [i32]
    3  (2.56%) × [i32, i64, i32] -> [i64]
    5  (4.27%) × [i32, i32] -> []
   10  (8.55%) × [] -> []
   11  (9.40%) × [] -> [i32]
   11  (9.40%) × [i32] -> []
   13 (11.11%) × [i32, i32, i32] -> [i32]
   14 (11.97%) × [i32, i32] -> [i32]
   27 (23.08%) × [i32] -> [i32]

Functions with at least one call_indirect: 12 (10.91% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [] -> []
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    6,    7]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 2
  class #5
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #6
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 7
  total classes: 7

CSV data for further analysis: apinamesemcc.wasm,16185,272,19,6.5292096,117,10,7,7,1,7,2.7142857142857144,1,224,29,12.946428,29,12.946428,21,9.375

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"apinamesemcc.wasm",0,1,1,"i32.load"
"apinamesemcc.wasm",1,2,1,"i32.load"
"apinamesemcc.wasm",2,1,1,"local.(get|tee)"
"apinamesemcc.wasm",3,1,1,"local.(get|tee)"
"apinamesemcc.wasm",4,2,2,"i32.load"
"apinamesemcc.wasm",5,1,6,"local.(get|tee)"
"apinamesemcc.wasm",6,2,7,"i32.load"
