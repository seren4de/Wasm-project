Input file: 400emcc.wasm
  binary:    400emcc.wasm

Functions:          137
  Imported:           6
  Non-imported:     131
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 7.30% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     23045
  call:             457 (1.98% of all instructions)
  call_indirect:     11 (0.05% of all instructions, 2.35% of all calls)

Globals:
  #0 i32
     init: i32.const 5249792
     41 × global.get   78 × global.set  119 total (34/66% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     42 (32.06% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.76%) × [-8976]
    1  (0.76%) × [-560]
    1  (0.76%) × [-432]
    1  (0.76%) × [-336]
    1  (0.76%) × [-304]
    1  (0.76%) × [-256]
    1  (0.76%) × [-208]
    1  (0.76%) × [-160]
    1  (0.76%) × [-144]
    1  (0.76%) × [-128]
    1  (0.76%) × [-112]
    1  (0.76%) × [-96]
    1  (0.76%) × [-48]
    2  (1.53%) × [-80]
    3  (2.29%) × [-32]
   18 (13.74%) × [-16]
   95 (72.52%) × []
  functions with stack allocation total: 36 (27.48%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-8976]",-8976,8976
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-560]",-560,560
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-432]",-432,432
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-336]",-336,336
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-304]",-304,304
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-256]",-256,256
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-208]",-208,208
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-160]",-160,160
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-144]",-144,144
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-128]",-128,128
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-112]",-112,112
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-96]",-96,96
sp_csv_line:"400emcc.wasm",1,0.7633588,"[-48]",-48,48
sp_csv_line:"400emcc.wasm",2,1.5267175,"[-80]",-80,80
sp_csv_line:"400emcc.wasm",3,2.2900763,"[-32]",-32,32
sp_csv_line:"400emcc.wasm",18,13.7404585,"[-16]",-16,16
sp_csv_line:"400emcc.wasm",95,72.51908,"[]",0,0

Counts of function types (35 unique types):
    1  (0.73%) × [i32, i32] -> [i64]
    1  (0.73%) × [i32, i32, i32] -> []
    1  (0.73%) × [i32, i32, i32, i32, i32] -> []
    1  (0.73%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.73%) × [i32, i32, i32, i32, i32, i32] -> []
    1  (0.73%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.73%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.73%) × [i32, i32, i32, i64] -> [i64]
    1  (0.73%) × [i32, i32, i64] -> []
    1  (0.73%) × [i32, i64] -> []
    1  (0.73%) × [i32, i64, i32, i32] -> [i32]
    1  (0.73%) × [i32, i64, i64] -> []
    1  (0.73%) × [i32, f32] -> []
    1  (0.73%) × [i32, f64] -> []
    1  (0.73%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.73%) × [i64, i32, i32] -> [i32]
    1  (0.73%) × [i64, i64] -> [i32]
    1  (0.73%) × [i64, i64] -> [f32]
    1  (0.73%) × [i64, i64] -> [f64]
    1  (0.73%) × [f64] -> [i64]
    2  (1.46%) × [i32, i32, i32, i32] -> []
    2  (1.46%) × [i64, i32] -> [i32]
    2  (1.46%) × [i64, i64, i64, i64] -> [i32]
    2  (1.46%) × [f64, i32] -> [f64]
    3  (2.19%) × [i32, i64, i32] -> [i64]
    3  (2.19%) × [i32, i64, i64, i32] -> []
    4  (2.92%) × [i32, i32] -> []
    6  (4.38%) × [i32, i32, i32, i32] -> [i32]
    7  (5.11%) × [] -> []
    7  (5.11%) × [i32, i64, i64, i64, i64] -> []
    9  (6.57%) × [i32] -> []
   13  (9.49%) × [] -> [i32]
   15 (10.95%) × [i32, i32, i32] -> [i32]
   20 (14.60%) × [i32, i32] -> [i32]
   22 (16.06%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (6.87% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [    9,   10]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  9 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  total classes: 5

CSV data for further analysis: 400emcc.wasm,23045,457,11,2.3504274,137,10,6,5,1,7,2.2,1,120,26,21.666666,26,21.666666,24,20

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"400emcc.wasm",0,1,1,"i32.load"
"400emcc.wasm",1,1,1,"local.(get|tee)"
"400emcc.wasm",2,2,1,"i32.load"
"400emcc.wasm",3,1,1,"local.(get|tee)"
"400emcc.wasm",4,3,7,"i32.load"
