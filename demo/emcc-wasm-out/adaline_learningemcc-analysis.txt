Input file: adaline_learningemcc.wasm
  binary:    adaline_learningemcc.wasm

Functions:          145
  Imported:           8
  Non-imported:     137
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 6.90% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     22285
  call:             464 (2.08% of all instructions)
  call_indirect:     11 (0.05% of all instructions, 2.32% of all calls)

Globals:
  #0 i32
     init: i32.const 5250880
     49 × global.get   93 × global.set  142 total (35/65% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     50 (36.50% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.73%) × [-8976]
    1  (0.73%) × [-560]
    1  (0.73%) × [-432]
    1  (0.73%) × [-336]
    1  (0.73%) × [-256]
    1  (0.73%) × [-208]
    1  (0.73%) × [-128]
    1  (0.73%) × [-112]
    1  (0.73%) × [-96]
    1  (0.73%) × [-48]
    2  (1.46%) × [-160]
    2  (1.46%) × [-80]
    5  (3.65%) × [-32]
   16 (11.68%) × [-16]
  102 (74.45%) × []
  functions with stack allocation total: 35 (25.55%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-8976]",-8976,8976
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-560]",-560,560
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-432]",-432,432
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-336]",-336,336
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-256]",-256,256
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-208]",-208,208
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-128]",-128,128
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-112]",-112,112
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-96]",-96,96
sp_csv_line:"adaline_learningemcc.wasm",1,0.729927,"[-48]",-48,48
sp_csv_line:"adaline_learningemcc.wasm",2,1.459854,"[-160]",-160,160
sp_csv_line:"adaline_learningemcc.wasm",2,1.459854,"[-80]",-80,80
sp_csv_line:"adaline_learningemcc.wasm",5,3.649635,"[-32]",-32,32
sp_csv_line:"adaline_learningemcc.wasm",16,11.678832,"[-16]",-16,16
sp_csv_line:"adaline_learningemcc.wasm",102,74.45255,"[]",0,0

Counts of function types (40 unique types):
    1  (0.69%) × [i32] -> [i64]
    1  (0.69%) × [i32, i32] -> [i64]
    1  (0.69%) × [i32, i32] -> [f32]
    1  (0.69%) × [i32, i32, i32] -> []
    1  (0.69%) × [i32, i32, i32] -> [f64]
    1  (0.69%) × [i32, i32, i32, i32, i32] -> []
    1  (0.69%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.69%) × [i32, i32, i32, i32, i32, i32] -> []
    1  (0.69%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.69%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.69%) × [i32, i32, f64] -> []
    1  (0.69%) × [i32, i64, i32] -> [i32]
    1  (0.69%) × [i32, i64, i32, i32] -> [i32]
    1  (0.69%) × [i32, i64, i64] -> []
    1  (0.69%) × [i32, f32] -> []
    1  (0.69%) × [i32, f64] -> []
    1  (0.69%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.69%) × [i64, i32, i32] -> [i32]
    1  (0.69%) × [i64, i64] -> [i32]
    1  (0.69%) × [i64, i64] -> [f32]
    1  (0.69%) × [i64, i64] -> [f64]
    1  (0.69%) × [f64] -> [i32]
    1  (0.69%) × [f64] -> [i64]
    2  (1.38%) × [i32, i64] -> []
    2  (1.38%) × [i64, i32] -> [i32]
    2  (1.38%) × [i64, i64, i64, i64] -> [i32]
    2  (1.38%) × [f64, i32] -> [f64]
    3  (2.07%) × [i32, i32] -> []
    3  (2.07%) × [i32, i64, i32] -> [i64]
    3  (2.07%) × [i32, i64, i64, i32] -> []
    3  (2.07%) × [f64] -> []
    4  (2.76%) × [i32, i32, i32, i32] -> [i32]
    5  (3.45%) × [i32, i32, i32, i32] -> []
    7  (4.83%) × [i32, i64, i64, i64, i64] -> []
    9  (6.21%) × [] -> []
   11  (7.59%) × [i32] -> []
   13  (8.97%) × [i32, i32, i32] -> [i32]
   14  (9.66%) × [i32, i32] -> [i32]
   19 (13.10%) × [] -> [i32]
   20 (13.79%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (6.57% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  10 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  total classes: 5

CSV data for further analysis: adaline_learningemcc.wasm,22285,464,11,2.3157895,145,10,6,5,1,7,2.2,1,107,26,24.299065,26,24.299065,24,22.429907

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"adaline_learningemcc.wasm",0,1,1,"i32.load"
"adaline_learningemcc.wasm",1,1,1,"local.(get|tee)"
"adaline_learningemcc.wasm",2,2,1,"i32.load"
"adaline_learningemcc.wasm",3,1,1,"local.(get|tee)"
"adaline_learningemcc.wasm",4,3,7,"i32.load"
