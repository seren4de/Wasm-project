Input file: kallsymsemcc.wasm
  binary:    kallsymsemcc.wasm

Functions:          164
  Imported:           7
  Non-imported:     157
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 6.10% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     30534
  call:             542 (1.78% of all instructions)
  call_indirect:     16 (0.05% of all instructions, 2.87% of all calls)

Globals:
  #0 i32
     init: i32.const 5512336
      61 × global.get   106 × global.set   167 total (37/63% split)
  #1 i32
     init: i32.const 0
       2 × global.get     1 × global.set     3 total (67/33% split)
  #2 i32
     init: i32.const 0
       1 × global.get     1 × global.set     2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     62 (39.49% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.64%) × [-8976]
    1  (0.64%) × [-1056]
    1  (0.64%) × [-560]
    1  (0.64%) × [-432]
    1  (0.64%) × [-336]
    1  (0.64%) × [-304]
    1  (0.64%) × [-128]
    1  (0.64%) × [-112]
    1  (0.64%) × [-96]
    1  (0.64%) × [-48]
    2  (1.27%) × [-256]
    2  (1.27%) × [-240]
    2  (1.27%) × [-208]
    2  (1.27%) × [-80]
    4  (2.55%) × [-32]
   14  (8.92%) × [-16]
  121 (77.07%) × []
  functions with stack allocation total: 36 (22.93%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-8976]",-8976,8976
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-1056]",-1056,1056
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-560]",-560,560
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-432]",-432,432
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-336]",-336,336
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-304]",-304,304
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-128]",-128,128
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-112]",-112,112
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-96]",-96,96
sp_csv_line:"kallsymsemcc.wasm",1,0.6369427,"[-48]",-48,48
sp_csv_line:"kallsymsemcc.wasm",2,1.2738854,"[-256]",-256,256
sp_csv_line:"kallsymsemcc.wasm",2,1.2738854,"[-240]",-240,240
sp_csv_line:"kallsymsemcc.wasm",2,1.2738854,"[-208]",-208,208
sp_csv_line:"kallsymsemcc.wasm",2,1.2738854,"[-80]",-80,80
sp_csv_line:"kallsymsemcc.wasm",4,2.5477707,"[-32]",-32,32
sp_csv_line:"kallsymsemcc.wasm",14,8.917197,"[-16]",-16,16
sp_csv_line:"kallsymsemcc.wasm",121,77.07006,"[]",0,0

Counts of function types (36 unique types):
    1  (0.61%) × [i32, i32] -> [i64]
    1  (0.61%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.61%) × [i32, i32, i32, i32, i32, i32] -> []
    1  (0.61%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.61%) × [i32, i32, i32, i64] -> [i64]
    1  (0.61%) × [i32, i32, i64] -> []
    1  (0.61%) × [i32, i64] -> []
    1  (0.61%) × [i32, i64] -> [i32]
    1  (0.61%) × [i32, i64, i32, i32] -> [i32]
    1  (0.61%) × [i32, i64, i64] -> []
    1  (0.61%) × [i32, f32] -> []
    1  (0.61%) × [i32, f64] -> []
    1  (0.61%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.61%) × [i64, i32, i32] -> [i32]
    1  (0.61%) × [i64, i64] -> [i32]
    1  (0.61%) × [i64, i64] -> [f32]
    1  (0.61%) × [i64, i64] -> [f64]
    1  (0.61%) × [f64] -> [i64]
    2  (1.22%) × [i32, i32, i32] -> []
    2  (1.22%) × [i32, i32, i32, i32, i32] -> []
    2  (1.22%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    2  (1.22%) × [i64, i32] -> [i32]
    2  (1.22%) × [i64, i64, i64, i64] -> [i32]
    2  (1.22%) × [f64, i32] -> [f64]
    3  (1.83%) × [i32, i32, i32, i32] -> []
    3  (1.83%) × [i32, i32, i32, i32] -> [i32]
    3  (1.83%) × [i32, i64, i32] -> [i64]
    3  (1.83%) × [i32, i64, i64, i32] -> []
    7  (4.27%) × [i32, i64, i64, i64, i64] -> []
    9  (5.49%) × [i32, i32] -> []
   10  (6.10%) × [i32] -> []
   14  (8.54%) × [] -> []
   14  (8.54%) × [] -> [i32]
   17 (10.37%) × [i32, i32, i32] -> [i32]
   21 (12.80%) × [i32, i32] -> [i32]
   30 (18.29%) × [i32] -> [i32]

Functions with at least one call_indirect: 10 (6.37% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [] -> []
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  10 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 6
  total classes: 6

CSV data for further analysis: kallsymsemcc.wasm,30534,542,16,2.8673835,164,10,5,6,1,6,2.6666666666666665,1,255,23,9.019608,23,9.019608,15,5.882353

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"kallsymsemcc.wasm",0,1,1,"i32.load"
"kallsymsemcc.wasm",1,1,1,"local.(get|tee)"
"kallsymsemcc.wasm",2,2,1,"i32.load"
"kallsymsemcc.wasm",3,1,1,"local.(get|tee)"
"kallsymsemcc.wasm",4,1,6,"local.(get|tee)"
"kallsymsemcc.wasm",5,2,6,"i32.load"
