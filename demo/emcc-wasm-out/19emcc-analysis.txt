Input file: 19emcc.wasm
  binary:    19emcc.wasm

Functions:           83
  Imported:           5
  Non-imported:      78
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         18
  Of those, unique functions:    18 (i.e., at least 21.69% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      6287
  call:             141 (2.24% of all instructions)
  call_indirect:     11 (0.17% of all instructions, 7.24% of all calls)

Globals:
  #0 i32
     init: i32.const 5247520
     17 × global.get   30 × global.set   47 total (36/64% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     18 (23.08% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.28%) × [-560]
    1  (1.28%) × [-256]
    1  (1.28%) × [-208]
    1  (1.28%) × [-80]
    3  (3.85%) × [-32]
    3  (3.85%) × [-16]
   68 (87.18%) × []
  functions with stack allocation total: 10 (12.82%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"19emcc.wasm",1,1.2820513,"[-560]",-560,560
sp_csv_line:"19emcc.wasm",1,1.2820513,"[-256]",-256,256
sp_csv_line:"19emcc.wasm",1,1.2820513,"[-208]",-208,208
sp_csv_line:"19emcc.wasm",1,1.2820513,"[-80]",-80,80
sp_csv_line:"19emcc.wasm",3,3.8461537,"[-32]",-32,32
sp_csv_line:"19emcc.wasm",3,3.8461537,"[-16]",-16,16
sp_csv_line:"19emcc.wasm",68,87.17949,"[]",0,0

Counts of function types (22 unique types):
    1  (1.20%) × [i32, i32, i32] -> []
    1  (1.20%) × [i32, i32, i32, i32] -> []
    1  (1.20%) × [i32, i32, i32, i32, i32] -> []
    1  (1.20%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.20%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.20%) × [i32, i64, i32, i32] -> [i32]
    1  (1.20%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (1.20%) × [i64, i32, i32] -> [i32]
    1  (1.20%) × [i64, i64] -> [f64]
    1  (1.20%) × [f64] -> [i64]
    1  (1.20%) × [f64, i32] -> [f64]
    2  (2.41%) × [i32, i32] -> []
    2  (2.41%) × [i32, i32, i32, i32] -> [i32]
    2  (2.41%) × [i32, i64, i64, i32] -> []
    2  (2.41%) × [i64, i32] -> [i32]
    3  (3.61%) × [i32, i64, i32] -> [i64]
    4  (4.82%) × [i32, i32] -> [i32]
    8  (9.64%) × [i32] -> []
    9 (10.84%) × [i32, i32, i32] -> [i32]
   10 (12.05%) × [] -> [i32]
   13 (15.66%) × [i32] -> [i32]
   17 (20.48%) × [] -> []

Functions with at least one call_indirect: 9 (11.54% of all functions)

Table elements initialization:
         range: [    1,   10]   length:  10   unique funcs:   10   type: [] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  9 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):   10
         functions matching by type and present in permissable table index range:             10
     1 × unrestricted                         source: local.(get|tee)   type [] -> []
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):   10
         functions matching by type and present in permissable table index range:             10
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 10
    count (how often class appears): 1
  class #1
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 10
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #4
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 6
  total classes: 6

CSV data for further analysis: 19emcc.wasm,6287,141,11,7.236842,83,18,14,6,1,6,1.8333333333333333,1,94,36,38.29787,36,38.29787,24,25.531916

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"19emcc.wasm",0,10,1,"i32.load"
"19emcc.wasm",1,10,1,"local.(get|tee)"
"19emcc.wasm",2,1,1,"local.(get|tee)"
"19emcc.wasm",3,2,1,"i32.load"
"19emcc.wasm",4,1,1,"local.(get|tee)"
"19emcc.wasm",5,2,6,"i32.load"
