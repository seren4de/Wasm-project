Input file: watchdog-simpleemcc.wasm
  binary:    watchdog-simpleemcc.wasm

Functions:           66
  Imported:           5
  Non-imported:      61
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 9.09% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      1797
  call:              88 (4.90% of all instructions)
  call_indirect:      6 (0.33% of all instructions, 6.38% of all calls)

Globals:
  #0 i32
     init: i32.const 5247632
     13 × global.get   22 × global.set   35 total (37/63% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     14 (22.95% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    2  (3.28%) × [-32]
    7 (11.48%) × [-16]
   52 (85.25%) × []
  functions with stack allocation total: 9 (14.75%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"watchdog-simpleemcc.wasm",2,3.2786884,"[-32]",-32,32
sp_csv_line:"watchdog-simpleemcc.wasm",7,11.4754095,"[-16]",-16,16
sp_csv_line:"watchdog-simpleemcc.wasm",52,85.2459,"[]",0,0

Counts of function types (13 unique types):
    1  (1.52%) × [] -> [f64]
    1  (1.52%) × [i32, i64] -> []
    1  (1.52%) × [i32, i64, i32] -> [i32]
    1  (1.52%) × [i32, i64, i32, i32] -> [i32]
    1  (1.52%) × [f64] -> []
    3  (4.55%) × [i32, i64, i32] -> [i64]
    4  (6.06%) × [i32, i32, i32, i32] -> [i32]
    5  (7.58%) × [i32, i32, i32] -> [i32]
    7 (10.61%) × [] -> []
    8 (12.12%) × [i32] -> []
   10 (15.15%) × [i32, i32] -> [i32]
   11 (16.67%) × [] -> [i32]
   13 (19.70%) × [i32] -> [i32]

Functions with at least one call_indirect: 4 (6.56% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  total classes: 3

CSV data for further analysis: watchdog-simpleemcc.wasm,1797,88,6,6.382979,66,6,4,3,1,4,2,1,30,7,23.333334,7,23.333334,7,23.333334

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"watchdog-simpleemcc.wasm",0,1,1,"i32.load"
"watchdog-simpleemcc.wasm",1,2,1,"i32.load"
"watchdog-simpleemcc.wasm",2,1,4,"i32.load"
