Input file: mkconfigemcc.wasm
  binary:    mkconfigemcc.wasm

Functions:          110
  Imported:           7
  Non-imported:     103
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 9.09% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     12393
  call:             258 (2.08% of all instructions)
  call_indirect:     16 (0.13% of all instructions, 5.84% of all calls)

Globals:
  #0 i32
     init: i32.const 5247024
     20 × global.get   38 × global.set   58 total (34/66% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     21 (20.39% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.97%) × [-560]
    1  (0.97%) × [-256]
    1  (0.97%) × [-208]
    1  (0.97%) × [-160]
    1  (0.97%) × [-80]
    4  (3.88%) × [-32]
    6  (5.83%) × [-16]
   88 (85.44%) × []
  functions with stack allocation total: 15 (14.56%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"mkconfigemcc.wasm",1,0.9708738,"[-560]",-560,560
sp_csv_line:"mkconfigemcc.wasm",1,0.9708738,"[-256]",-256,256
sp_csv_line:"mkconfigemcc.wasm",1,0.9708738,"[-208]",-208,208
sp_csv_line:"mkconfigemcc.wasm",1,0.9708738,"[-160]",-160,160
sp_csv_line:"mkconfigemcc.wasm",1,0.9708738,"[-80]",-80,80
sp_csv_line:"mkconfigemcc.wasm",4,3.883495,"[-32]",-32,32
sp_csv_line:"mkconfigemcc.wasm",6,5.8252425,"[-16]",-16,16
sp_csv_line:"mkconfigemcc.wasm",88,85.43689,"[]",0,0

Counts of function types (24 unique types):
    1  (0.91%) × [i32, i32] -> []
    1  (0.91%) × [i32, i32, i32] -> []
    1  (0.91%) × [i32, i32, i32, i32] -> []
    1  (0.91%) × [i32, i32, i32, i32, i32] -> []
    1  (0.91%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.91%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.91%) × [i32, i64, i32, i32] -> [i32]
    1  (0.91%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.91%) × [i64, i32, i32] -> [i32]
    1  (0.91%) × [i64, i64] -> [f64]
    1  (0.91%) × [f64] -> [i64]
    1  (0.91%) × [f64, i32] -> [f64]
    2  (1.82%) × [i32] -> [i64]
    2  (1.82%) × [i32, i64, i32] -> [i32]
    2  (1.82%) × [i32, i64, i64, i32] -> []
    2  (1.82%) × [i64, i32] -> [i32]
    3  (2.73%) × [i32, i64, i32] -> [i64]
    6  (5.45%) × [i32, i32, i32, i32] -> [i32]
    8  (7.27%) × [] -> []
   10  (9.09%) × [i32] -> []
   11 (10.00%) × [] -> [i32]
   15 (13.64%) × [i32, i32] -> [i32]
   16 (14.55%) × [i32, i32, i32] -> [i32]
   21 (19.09%) × [i32] -> [i32]

Functions with at least one call_indirect: 12 (11.65% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  9 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #4
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #5
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 3
  class #6
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 8
  total classes: 7

CSV data for further analysis: mkconfigemcc.wasm,12393,258,16,5.839416,110,10,8,7,1,8,2.2857142857142856,1,171,37,21.637426,37,21.637426,33,19.298246

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"mkconfigemcc.wasm",0,1,1,"i32.load"
"mkconfigemcc.wasm",1,2,1,"i32.load"
"mkconfigemcc.wasm",2,1,1,"local.(get|tee)"
"mkconfigemcc.wasm",3,2,1,"local.(get|tee)"
"mkconfigemcc.wasm",4,1,1,"local.(get|tee)"
"mkconfigemcc.wasm",5,2,3,"i32.load"
"mkconfigemcc.wasm",6,3,8,"i32.load"
