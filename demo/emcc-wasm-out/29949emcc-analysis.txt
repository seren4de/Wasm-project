Input file: 29949emcc.wasm
  binary:    29949emcc.wasm

Functions:          108
  Imported:           7
  Non-imported:     101
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          9
  Of those, unique functions:     9 (i.e., at least 8.33% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11936
  call:             253 (2.12% of all instructions)
  call_indirect:     12 (0.10% of all instructions, 4.53% of all calls)

Globals:
  #0 i32
     init: i32.const 5248800
     23 × global.get   41 × global.set   64 total (36/64% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (23.76% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.99%) × [-560]
    1  (0.99%) × [-256]
    1  (0.99%) × [-208]
    1  (0.99%) × [-80]
    4  (3.96%) × [-32]
    6  (5.94%) × [-16]
   87 (86.14%) × []
  functions with stack allocation total: 14 (13.86%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"29949emcc.wasm",1,0.990099,"[-560]",-560,560
sp_csv_line:"29949emcc.wasm",1,0.990099,"[-256]",-256,256
sp_csv_line:"29949emcc.wasm",1,0.990099,"[-208]",-208,208
sp_csv_line:"29949emcc.wasm",1,0.990099,"[-80]",-80,80
sp_csv_line:"29949emcc.wasm",4,3.960396,"[-32]",-32,32
sp_csv_line:"29949emcc.wasm",6,5.940594,"[-16]",-16,16
sp_csv_line:"29949emcc.wasm",87,86.13861,"[]",0,0

Counts of function types (22 unique types):
    1  (0.93%) × [i32, i32, i32] -> []
    1  (0.93%) × [i32, i32, i32, i32] -> []
    1  (0.93%) × [i32, i32, i32, i32, i32] -> []
    1  (0.93%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.93%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.93%) × [i32, i64, i32, i32] -> [i32]
    1  (0.93%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.93%) × [i64, i32, i32] -> [i32]
    1  (0.93%) × [i64, i64] -> [f64]
    1  (0.93%) × [f64] -> [i64]
    1  (0.93%) × [f64, i32] -> [f64]
    2  (1.85%) × [i32, i64, i64, i32] -> []
    2  (1.85%) × [i64, i32] -> [i32]
    3  (2.78%) × [i32, i64, i32] -> [i64]
    4  (3.70%) × [i32, i32] -> []
    4  (3.70%) × [i32, i32, i32, i32] -> [i32]
    8  (7.41%) × [] -> []
   11 (10.19%) × [] -> [i32]
   12 (11.11%) × [i32] -> []
   12 (11.11%) × [i32, i32, i32] -> [i32]
   18 (16.67%) × [i32, i32] -> [i32]
   21 (19.44%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (8.91% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32] -> []
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 6
  total classes: 6

CSV data for further analysis: 29949emcc.wasm,11936,253,12,4.5283017,108,9,7,6,1,6,2,1,112,21,18.75,21,18.75,19,16.964285

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"29949emcc.wasm",0,1,1,"i32.load"
"29949emcc.wasm",1,2,1,"i32.load"
"29949emcc.wasm",2,1,1,"local.(get|tee)"
"29949emcc.wasm",3,1,1,"local.(get|tee)"
"29949emcc.wasm",4,2,2,"i32.load"
"29949emcc.wasm",5,2,6,"i32.load"
