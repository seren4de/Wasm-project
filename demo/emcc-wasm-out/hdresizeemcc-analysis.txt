Input file: hdresizeemcc.wasm
  binary:    hdresizeemcc.wasm

Functions:          114
  Imported:           7
  Non-imported:     107
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 8.77% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     12785
  call:             253 (1.98% of all instructions)
  call_indirect:     15 (0.12% of all instructions, 5.60% of all calls)

Globals:
  #0 i32
     init: i32.const 5249168
     25 × global.get   44 × global.set   69 total (36/64% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     26 (24.30% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.93%) × [-560]
    1  (0.93%) × [-256]
    1  (0.93%) × [-208]
    1  (0.93%) × [-160]
    1  (0.93%) × [-80]
    4  (3.74%) × [-32]
    8  (7.48%) × [-16]
   90 (84.11%) × []
  functions with stack allocation total: 17 (15.89%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"hdresizeemcc.wasm",1,0.93457943,"[-560]",-560,560
sp_csv_line:"hdresizeemcc.wasm",1,0.93457943,"[-256]",-256,256
sp_csv_line:"hdresizeemcc.wasm",1,0.93457943,"[-208]",-208,208
sp_csv_line:"hdresizeemcc.wasm",1,0.93457943,"[-160]",-160,160
sp_csv_line:"hdresizeemcc.wasm",1,0.93457943,"[-80]",-80,80
sp_csv_line:"hdresizeemcc.wasm",4,3.7383177,"[-32]",-32,32
sp_csv_line:"hdresizeemcc.wasm",8,7.4766355,"[-16]",-16,16
sp_csv_line:"hdresizeemcc.wasm",90,84.11215,"[]",0,0

Counts of function types (25 unique types):
    1  (0.88%) × [i32, i32, i32] -> []
    1  (0.88%) × [i32, i32, i32, i32] -> []
    1  (0.88%) × [i32, i32, i32, i32, i32] -> []
    1  (0.88%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [i32, i32, i32, i64] -> [i64]
    1  (0.88%) × [i32, i64, i32, i32] -> [i32]
    1  (0.88%) × [i32, i64, i64, i64, i64] -> []
    1  (0.88%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [i64, i32, i32] -> [i32]
    1  (0.88%) × [i64, i64] -> [f64]
    1  (0.88%) × [f64] -> [i64]
    1  (0.88%) × [f64, i32] -> [f64]
    2  (1.75%) × [i32, i32] -> []
    2  (1.75%) × [i32, i64, i32] -> [i32]
    2  (1.75%) × [i32, i64, i64, i32] -> []
    2  (1.75%) × [i64, i32] -> [i32]
    3  (2.63%) × [i32, i64, i32] -> [i64]
    7  (6.14%) × [i32, i32, i32, i32] -> [i32]
    8  (7.02%) × [] -> []
   10  (8.77%) × [i32] -> []
   11  (9.65%) × [] -> [i32]
   14 (12.28%) × [i32, i32, i32] -> [i32]
   15 (13.16%) × [i32, i32] -> [i32]
   25 (21.93%) × [i32] -> [i32]

Functions with at least one call_indirect: 11 (10.28% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 3
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 8
  total classes: 6

CSV data for further analysis: hdresizeemcc.wasm,12785,253,15,5.597015,114,10,8,6,1,8,2.5,1,157,35,22.292994,35,22.292994,33,21.019108

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"hdresizeemcc.wasm",0,1,1,"i32.load"
"hdresizeemcc.wasm",1,2,1,"i32.load"
"hdresizeemcc.wasm",2,1,1,"local.(get|tee)"
"hdresizeemcc.wasm",3,1,1,"local.(get|tee)"
"hdresizeemcc.wasm",4,2,3,"i32.load"
"hdresizeemcc.wasm",5,3,8,"i32.load"
