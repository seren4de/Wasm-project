Input file: test_setenv_leakemcc.wasm
  binary:    test_setenv_leakemcc.wasm

Functions:          116
  Imported:          10
  Non-imported:     106
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 8.62% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13149
  call:             251 (1.91% of all instructions)
  call_indirect:     13 (0.10% of all instructions, 4.92% of all calls)

Globals:
  #0 i32
     init: i32.const 5247792
     22 × global.get   42 × global.set   64 total (34/66% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     23 (21.70% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.94%) × [-560]
    1  (0.94%) × [-256]
    1  (0.94%) × [-208]
    1  (0.94%) × [-160]
    1  (0.94%) × [-80]
    4  (3.77%) × [-32]
    9  (8.49%) × [-16]
   88 (83.02%) × []
  functions with stack allocation total: 18 (16.98%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_setenv_leakemcc.wasm",1,0.9433962,"[-560]",-560,560
sp_csv_line:"test_setenv_leakemcc.wasm",1,0.9433962,"[-256]",-256,256
sp_csv_line:"test_setenv_leakemcc.wasm",1,0.9433962,"[-208]",-208,208
sp_csv_line:"test_setenv_leakemcc.wasm",1,0.9433962,"[-160]",-160,160
sp_csv_line:"test_setenv_leakemcc.wasm",1,0.9433962,"[-80]",-80,80
sp_csv_line:"test_setenv_leakemcc.wasm",4,3.7735848,"[-32]",-32,32
sp_csv_line:"test_setenv_leakemcc.wasm",9,8.490566,"[-16]",-16,16
sp_csv_line:"test_setenv_leakemcc.wasm",88,83.01887,"[]",0,0

Counts of function types (22 unique types):
    1  (0.86%) × [i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, i64, i32, i32] -> [i32]
    1  (0.86%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i64, i32, i32] -> [i32]
    1  (0.86%) × [i64, i64] -> [f64]
    1  (0.86%) × [f64] -> [i64]
    1  (0.86%) × [f64, i32] -> [f64]
    2  (1.72%) × [i32, i64, i64, i32] -> []
    2  (1.72%) × [i64, i32] -> [i32]
    3  (2.59%) × [i32, i32] -> []
    3  (2.59%) × [i32, i64, i32] -> [i64]
    5  (4.31%) × [i32, i32, i32, i32] -> [i32]
    9  (7.76%) × [] -> []
   10  (8.62%) × [i32] -> []
   11  (9.48%) × [] -> [i32]
   16 (13.79%) × [i32, i32] -> [i32]
   20 (17.24%) × [i32, i32, i32] -> [i32]
   24 (20.69%) × [i32] -> [i32]

Functions with at least one call_indirect: 10 (9.43% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, f64, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  total classes: 6

CSV data for further analysis: test_setenv_leakemcc.wasm,13149,251,13,4.9242425,116,10,8,6,1,7,2.1666666666666665,1,183,30,16.393442,30,16.393442,28,15.300547

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_setenv_leakemcc.wasm",0,1,1,"i32.load"
"test_setenv_leakemcc.wasm",1,2,1,"i32.load"
"test_setenv_leakemcc.wasm",2,1,1,"local.(get|tee)"
"test_setenv_leakemcc.wasm",3,1,1,"local.(get|tee)"
"test_setenv_leakemcc.wasm",4,2,2,"i32.load"
"test_setenv_leakemcc.wasm",5,3,7,"i32.load"
