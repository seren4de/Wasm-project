Input file: copy_stdioemcc.wasm
  binary:    copy_stdioemcc.wasm

Functions:           70
  Imported:           5
  Non-imported:      65
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          7
  Of those, unique functions:     7 (i.e., at least 10.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      4974
  call:              94 (1.89% of all instructions)
  call_indirect:      6 (0.12% of all instructions, 6.00% of all calls)

Globals:
  #0 i32
     init: i32.const 5246000
     12 × global.get   19 × global.set   31 total (39/61% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     13 (20.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    3  (4.62%) × [-32]
    5  (7.69%) × [-16]
   57 (87.69%) × []
  functions with stack allocation total: 8 (12.31%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"copy_stdioemcc.wasm",3,4.6153846,"[-32]",-32,32
sp_csv_line:"copy_stdioemcc.wasm",5,7.6923075,"[-16]",-16,16
sp_csv_line:"copy_stdioemcc.wasm",57,87.69231,"[]",0,0

Counts of function types (9 unique types):
    1  (1.43%) × [i32, i64, i32, i32] -> [i32]
    3  (4.29%) × [i32, i32, i32, i32] -> [i32]
    3  (4.29%) × [i32, i64, i32] -> [i64]
    5  (7.14%) × [i32, i32, i32] -> [i32]
    8 (11.43%) × [] -> []
    8 (11.43%) × [i32] -> []
    9 (12.86%) × [i32, i32] -> [i32]
   11 (15.71%) × [] -> [i32]
   22 (31.43%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (7.69% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [] -> []
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 4
  total classes: 3

CSV data for further analysis: copy_stdioemcc.wasm,4974,94,6,6,70,7,5,3,1,4,2,1,31,11,35.48387,11,35.48387,11,35.48387

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"copy_stdioemcc.wasm",0,1,1,"i32.load"
"copy_stdioemcc.wasm",1,2,1,"i32.load"
"copy_stdioemcc.wasm",2,2,4,"i32.load"
