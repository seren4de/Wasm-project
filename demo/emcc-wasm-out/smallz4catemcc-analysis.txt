Input file: smallz4catemcc.wasm
  binary:    smallz4catemcc.wasm

Functions:           86
  Imported:           7
  Non-imported:      79
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          9
  Of those, unique functions:     9 (i.e., at least 10.47% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      9953
  call:             148 (1.49% of all instructions)
  call_indirect:     44 (0.44% of all instructions, 22.92% of all calls)

Globals:
  #0 i32
     init: i32.const 5247392
     16 × global.get   29 × global.set   45 total (36/64% split)
  #1 i32
     init: i32.const 0
      2 × global.get    1 × global.set    3 total (67/33% split)
  #2 i32
     init: i32.const 0
      1 × global.get    1 × global.set    2 total (50/50% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     17 (21.52% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    3  (3.80%) × [-32]
    5  (6.33%) × [-16]
   71 (89.87%) × []
  functions with stack allocation total: 8 (10.13%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"smallz4catemcc.wasm",3,3.7974684,"[-32]",-32,32
sp_csv_line:"smallz4catemcc.wasm",5,6.329114,"[-16]",-16,16
sp_csv_line:"smallz4catemcc.wasm",71,89.87342,"[]",0,0

Counts of function types (13 unique types):
    1  (1.16%) × [i32, i32, i32] -> []
    1  (1.16%) × [i32, i32, i32, i32] -> []
    1  (1.16%) × [i32, i64, i32, i32] -> [i32]
    2  (2.33%) × [i32] -> [i64]
    2  (2.33%) × [i32, i64, i32] -> [i32]
    3  (3.49%) × [i32, i64, i32] -> [i64]
    5  (5.81%) × [i32, i32, i32, i32] -> [i32]
    8  (9.30%) × [] -> []
    8  (9.30%) × [i32, i32, i32] -> [i32]
   11 (12.79%) × [] -> [i32]
   11 (12.79%) × [i32] -> []
   13 (15.12%) × [i32, i32] -> [i32]
   20 (23.26%) × [i32] -> [i32]

Functions with at least one call_indirect: 11 (13.92% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> []
         range: [    3,    3]   length:   1   unique funcs:    1   type: [] -> []
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    7,    8]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
    26 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     4 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
  7 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 3
  class #4
    type: [i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 8
  class #6
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 26
  total classes: 7

CSV data for further analysis: smallz4catemcc.wasm,9953,148,44,22.916666,86,9,8,7,1,26,6.285714285714286,3,628,110,17.515924,110,17.515924,26,4.140127

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"smallz4catemcc.wasm",0,1,1,"i32.load"
"smallz4catemcc.wasm",1,3,1,"i32.load"
"smallz4catemcc.wasm",2,2,1,"local.(get|tee)"
"smallz4catemcc.wasm",3,2,3,"i32.load"
"smallz4catemcc.wasm",4,1,4,"local.(get|tee)"
"smallz4catemcc.wasm",5,2,8,"i32.load"
"smallz4catemcc.wasm",6,3,26,"local.(get|tee)"
