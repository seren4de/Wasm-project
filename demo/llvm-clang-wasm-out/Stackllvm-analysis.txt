Input file: Stackllvm.wasm
  binary:    Stackllvm.wasm

Functions:          112
  Imported:           7
  Non-imported:     105
  Exported:          97

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.46% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25428
  call:             576 (2.27% of all instructions)
  call_indirect:     13 (0.05% of all instructions, 2.21% of all calls)

Globals:
  #0 i32
     init: i32.const 74048
      36 × global.get   108 × global.set   144 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 74048
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 8508
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["top"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["n"]
     init: i32.const 1028
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["choice"]
     init: i32.const 1032
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["x"]
     init: i32.const 1036
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["stack"]
     init: i32.const 1040
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["i"]
     init: i32.const 1440
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__progname"]
     init: i32.const 3544
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__progname_full"]
     init: i32.const 3548
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__libc"]
     init: i32.const 3552
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__hwcap"]
     init: i32.const 3616
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__sysinfo"]
     init: i32.const 3620
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3544
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["program_invocation_name"]
     init: i32.const 3548
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__malloc_replaced"]
     init: i32.const 4680
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["__fsmu8"]
     init: i32.const 7888
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["__stdin_used"]
     init: i32.const 8504
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__stdout_used"]
     init: i32.const 8352
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__stderr_used"]
     init: i32.const 2496
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["stdout"]
     init: i32.const 5100
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["stdin"]
     init: i32.const 7544
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     36 (34.29% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.95%) × [-9472]
    1  (0.95%) × [-8064]
    1  (0.95%) × [-320]
    1  (0.95%) × [-288]
    1  (0.95%) × [-192]
    1  (0.95%) × [-112]
    1  (0.95%) × [-96]
    1  (0.95%) × [-80]
    2  (1.90%) × [-128]
    3  (2.86%) × [-32]
   19 (18.10%) × [-16]
   73 (69.52%) × []
  functions with stack allocation total: 32 (30.48%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-9472]",-9472,9472
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-8064]",-8064,8064
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-320]",-320,320
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-288]",-288,288
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-192]",-192,192
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-112]",-112,112
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-96]",-96,96
sp_csv_line:"Stackllvm.wasm",1,0.95238096,"[-80]",-80,80
sp_csv_line:"Stackllvm.wasm",2,1.9047619,"[-128]",-128,128
sp_csv_line:"Stackllvm.wasm",3,2.857143,"[-32]",-32,32
sp_csv_line:"Stackllvm.wasm",19,18.095238,"[-16]",-16,16
sp_csv_line:"Stackllvm.wasm",73,69.52381,"[]",0,0

Counts of function types (28 unique types):
    1  (0.89%) × [i32, i32] -> [i64]
    1  (0.89%) × [i32, i32, i32] -> []
    1  (0.89%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.89%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.89%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.89%) × [i32, i32, i32, i64] -> [i64]
    1  (0.89%) × [i32, i64] -> []
    1  (0.89%) × [i32, i64, i32] -> [i64]
    1  (0.89%) × [i32, f32] -> []
    1  (0.89%) × [i32, f64] -> []
    1  (0.89%) × [i64, i64] -> [f32]
    1  (0.89%) × [i64, i64] -> [f64]
    1  (0.89%) × [f64] -> [f64]
    1  (0.89%) × [f64, i32] -> [f64]
    2  (1.79%) × [i32, i32, i32, i32] -> []
    3  (2.68%) × [] -> [i32]
    3  (2.68%) × [i32, i32, i32, i32] -> [i32]
    3  (2.68%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.57%) × [i32, i32] -> []
    4  (3.57%) × [i32, i64, i64, i32] -> []
    4  (3.57%) × [i64, i64] -> [i32]
    7  (6.25%) × [i32, i64, i64, i64, i64] -> []
    7  (6.25%) × [i64, i64, i64, i64] -> [i32]
   10  (8.93%) × [] -> []
   10  (8.93%) × [i32] -> []
   12 (10.71%) × [i32, i32] -> [i32]
   12 (10.71%) × [i32, i32, i32] -> [i32]
   17 (15.18%) × [i32] -> [i32]

Functions with at least one call_indirect: 6 (5.71% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  total classes: 2

CSV data for further analysis: Stackllvm.wasm,25428,576,13,2.2071307,112,5,4,2,3,10,6.5,10,123,33,26.829268,33,26.829268,33,26.829268

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"Stackllvm.wasm",0,1,3,"i32.load"
"Stackllvm.wasm",1,3,10,"i32.load"
