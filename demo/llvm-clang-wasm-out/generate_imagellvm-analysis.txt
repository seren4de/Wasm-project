Input file: generate_imagellvm.wasm
  binary:    generate_imagellvm.wasm

Functions:          140
  Imported:           7
  Non-imported:     133
  Exported:         120

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 3.57% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     29355
  call:             707 (2.41% of all instructions)
  call_indirect:     20 (0.07% of all instructions, 2.75% of all calls)

Globals:
  #0 i32
     init: i32.const 73840
      46 × global.get   131 × global.set   177 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 73840
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 8300
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["gImageExecutionAddress"]
     init: i32.const 1036
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["gInputImageFile"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["gOutputImageFile"]
     init: i32.const 1028
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["gDataFile"]
     init: i32.const 1032
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["stderr"]
     init: i32.const 5000
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["gConfigurationHeader"]
     init: i32.const 1040
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__progname"]
     init: i32.const 1552
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__progname_full"]
     init: i32.const 1556
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__libc"]
     init: i32.const 1560
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__hwcap"]
     init: i32.const 1624
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__sysinfo"]
     init: i32.const 1628
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1552
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["program_invocation_name"]
     init: i32.const 1556
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__malloc_replaced"]
     init: i32.const 2680
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["__fsmu8"]
     init: i32.const 7792
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["__stdin_used"]
     init: i32.const 2696
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__stdout_used"]
     init: i32.const 8296
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__stderr_used"]
     init: i32.const 8144
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["stdout"]
     init: i32.const 5004
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     46 (34.59% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.75%) × [-9472]
    1  (0.75%) × [-8064]
    1  (0.75%) × [-320]
    1  (0.75%) × [-288]
    1  (0.75%) × [-192]
    1  (0.75%) × [-112]
    1  (0.75%) × [-96]
    1  (0.75%) × [-80]
    2  (1.50%) × [-128]
    4  (3.01%) × [-32]
    6  (4.51%) × [-144]
   21 (15.79%) × [-16]
   92 (69.17%) × []
  functions with stack allocation total: 41 (30.83%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-9472]",-9472,9472
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-8064]",-8064,8064
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-320]",-320,320
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-288]",-288,288
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-192]",-192,192
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-112]",-112,112
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-96]",-96,96
sp_csv_line:"generate_imagellvm.wasm",1,0.7518797,"[-80]",-80,80
sp_csv_line:"generate_imagellvm.wasm",2,1.5037594,"[-128]",-128,128
sp_csv_line:"generate_imagellvm.wasm",4,3.0075188,"[-32]",-32,32
sp_csv_line:"generate_imagellvm.wasm",6,4.511278,"[-144]",-144,144
sp_csv_line:"generate_imagellvm.wasm",21,15.789474,"[-16]",-16,16
sp_csv_line:"generate_imagellvm.wasm",92,69.172935,"[]",0,0

Counts of function types (29 unique types):
    1  (0.71%) × [i32, i32] -> [i64]
    1  (0.71%) × [i32, i32, i32] -> []
    1  (0.71%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.71%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.71%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.71%) × [i32, i32, i32, i64] -> [i64]
    1  (0.71%) × [i32, i64] -> []
    1  (0.71%) × [i32, i64, i32] -> [i64]
    1  (0.71%) × [i32, f32] -> []
    1  (0.71%) × [i32, f64] -> []
    1  (0.71%) × [i64, i64] -> [f32]
    1  (0.71%) × [i64, i64] -> [f64]
    1  (0.71%) × [f64] -> [f64]
    1  (0.71%) × [f64, i32] -> [f64]
    2  (1.43%) × [] -> [i32]
    2  (1.43%) × [i32, i32, i32, i32] -> []
    3  (2.14%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (2.86%) × [i32, i32, i32] -> [i64]
    4  (2.86%) × [i32, i32, i32, i32] -> [i32]
    4  (2.86%) × [i32, i64, i64, i32] -> []
    4  (2.86%) × [i64, i64] -> [i32]
    7  (5.00%) × [i32, i32] -> []
    7  (5.00%) × [i32, i64, i64, i64, i64] -> []
    7  (5.00%) × [i64, i64, i64, i64] -> [i32]
   12  (8.57%) × [] -> []
   13  (9.29%) × [i32] -> []
   16 (11.43%) × [i32, i32, i32] -> [i32]
   18 (12.86%) × [i32, i32] -> [i32]
   23 (16.43%) × [i32] -> [i32]

Functions with at least one call_indirect: 10 (7.52% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 13
  total classes: 4

CSV data for further analysis: generate_imagellvm.wasm,29355,707,20,2.7510316,140,5,5,4,1,13,5,5,248,45,18.14516,45,18.14516,45,18.14516

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"generate_imagellvm.wasm",0,0,1,"i32.load"
"generate_imagellvm.wasm",1,1,1,"i32.load"
"generate_imagellvm.wasm",2,1,5,"i32.load"
"generate_imagellvm.wasm",3,3,13,"i32.load"
