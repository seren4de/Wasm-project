Input file: trasherllvm.wasm
  binary:    trasherllvm.wasm

Functions:           91
  Imported:           5
  Non-imported:      86
  Exported:          82

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 5.49% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14443
  call:             295 (2.04% of all instructions)
  call_indirect:     22 (0.15% of all instructions, 6.94% of all calls)

Globals:
  #0 i32
     init: i32.const 70576
     24 × global.get   78 × global.set  102 total (24/76% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70576
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5028
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 3004
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 3572
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 3576
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 3580
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 3644
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 3648
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3572
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 3576
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdin_used"]
     init: i32.const 3672
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdout_used"]
     init: i32.const 5024
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stderr_used"]
     init: i32.const 4872
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["stdout"]
     init: i32.const 3008
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (27.91% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.16%) × [-8064]
    1  (1.16%) × [-288]
    1  (1.16%) × [-112]
    1  (1.16%) × [-96]
    1  (1.16%) × [-32]
   17 (19.77%) × [-16]
   64 (74.42%) × []
  functions with stack allocation total: 22 (25.58%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"trasherllvm.wasm",1,1.1627907,"[-8064]",-8064,8064
sp_csv_line:"trasherllvm.wasm",1,1.1627907,"[-288]",-288,288
sp_csv_line:"trasherllvm.wasm",1,1.1627907,"[-112]",-112,112
sp_csv_line:"trasherllvm.wasm",1,1.1627907,"[-96]",-96,96
sp_csv_line:"trasherllvm.wasm",1,1.1627907,"[-32]",-32,32
sp_csv_line:"trasherllvm.wasm",17,19.767443,"[-16]",-16,16
sp_csv_line:"trasherllvm.wasm",64,74.4186,"[]",0,0

Counts of function types (22 unique types):
    1  (1.10%) × [i32, i32, i32] -> []
    1  (1.10%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.10%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.10%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.10%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.10%) × [i32, i64, i32] -> []
    1  (1.10%) × [i32, i64, i32] -> [i64]
    1  (1.10%) × [i32, f64] -> []
    2  (2.20%) × [i32] -> [i64]
    2  (2.20%) × [i32, i32] -> []
    2  (2.20%) × [i32, i32, i32, i32] -> [i32]
    2  (2.20%) × [i32, i64, i32] -> [i32]
    3  (3.30%) × [] -> [i32]
    3  (3.30%) × [i32, i64, i64, i32] -> []
    3  (3.30%) × [i32, i64, i64, i64, i64] -> []
    4  (4.40%) × [i64, i64] -> [i32]
    6  (6.59%) × [i32] -> []
    7  (7.69%) × [] -> []
    7  (7.69%) × [i64, i64, i64, i64] -> [i32]
   12 (13.19%) × [i32, i32, i32] -> [i32]
   15 (16.48%) × [i32] -> [i32]
   15 (16.48%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (13.95% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    12 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 12
  total classes: 4

CSV data for further analysis: trasherllvm.wasm,14443,295,22,6.940063,91,5,4,4,1,12,5.5,6,160,45,28.125,45,28.125,42,26.25

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"trasherllvm.wasm",0,0,1,"i32.load"
"trasherllvm.wasm",1,1,3,"local.(get|tee)"
"trasherllvm.wasm",2,1,6,"i32.load"
"trasherllvm.wasm",3,3,12,"i32.load"
