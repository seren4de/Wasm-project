Input file: stride_ddllvm.wasm
  binary:    stride_ddllvm.wasm

Functions:          116
  Imported:           8
  Non-imported:     108
  Exported:          99

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 2.59% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17625
  call:             450 (2.55% of all instructions)
  call_indirect:     13 (0.07% of all instructions, 2.81% of all calls)

Globals:
  #0 i32
     init: i32.const 71744
     28 × global.get   94 × global.set  122 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 71744
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 6204
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 5484
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["optarg"]
     init: i32.const 2200
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["optopt"]
     init: i32.const 2204
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__progname"]
     init: i32.const 1048
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__progname_full"]
     init: i32.const 1052
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__libc"]
     init: i32.const 1056
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__hwcap"]
     init: i32.const 1120
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__sysinfo"]
     init: i32.const 1124
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1048
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["program_invocation_name"]
     init: i32.const 1052
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__malloc_replaced"]
     init: i32.const 2176
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["optind"]
     init: i32.const 6044
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["__optreset"]
     init: i32.const 2192
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["__optpos"]
     init: i32.const 2196
      0 × global.get    0 × global.set    0 total
  #18 i32
     export: ["opterr"]
     init: i32.const 6048
      0 × global.get    0 × global.set    0 total
  #19 i32
     export: ["optreset"]
     init: i32.const 2192
      0 × global.get    0 × global.set    0 total
  #20 i32
     export: ["__fsmu8"]
     init: i32.const 5264
      0 × global.get    0 × global.set    0 total
  #21 i32
     export: ["__stdin_used"]
     init: i32.const 2208
      0 × global.get    0 × global.set    0 total
  #22 i32
     export: ["__stdout_used"]
     init: i32.const 2208
      0 × global.get    0 × global.set    0 total
  #23 i32
     export: ["__stderr_used"]
     init: i32.const 6200
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     28 (25.93% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.93%) × [-8064]
    1  (0.93%) × [-288]
    1  (0.93%) × [-128]
    1  (0.93%) × [-112]
    1  (0.93%) × [-96]
    2  (1.85%) × [-32]
   18 (16.67%) × [-16]
   83 (76.85%) × []
  functions with stack allocation total: 25 (23.15%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"stride_ddllvm.wasm",1,0.9259259,"[-8064]",-8064,8064
sp_csv_line:"stride_ddllvm.wasm",1,0.9259259,"[-288]",-288,288
sp_csv_line:"stride_ddllvm.wasm",1,0.9259259,"[-128]",-128,128
sp_csv_line:"stride_ddllvm.wasm",1,0.9259259,"[-112]",-112,112
sp_csv_line:"stride_ddllvm.wasm",1,0.9259259,"[-96]",-96,96
sp_csv_line:"stride_ddllvm.wasm",2,1.8518518,"[-32]",-32,32
sp_csv_line:"stride_ddllvm.wasm",18,16.666666,"[-16]",-16,16
sp_csv_line:"stride_ddllvm.wasm",83,76.85185,"[]",0,0

Counts of function types (20 unique types):
    1  (0.86%) × [i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.86%) × [i32, f64] -> []
    2  (1.72%) × [] -> [i32]
    2  (1.72%) × [i32, i32, i32, i32] -> []
    2  (1.72%) × [i32, i32, i32, i32] -> [i32]
    2  (1.72%) × [i32, i64, i32] -> [i64]
    3  (2.59%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.59%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    3  (2.59%) × [i32, i64, i64, i32] -> []
    3  (2.59%) × [i32, i64, i64, i64, i64] -> []
    4  (3.45%) × [i64, i64] -> [i32]
    6  (5.17%) × [i32, i32] -> []
    7  (6.03%) × [i64, i64, i64, i64] -> [i32]
   10  (8.62%) × [] -> []
   16 (13.79%) × [i32] -> []
   16 (13.79%) × [i32, i32] -> [i32]
   16 (13.79%) × [i32, i32, i32] -> [i32]
   17 (14.66%) × [i32] -> [i32]

Functions with at least one call_indirect: 6 (5.56% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 9
  total classes: 3

CSV data for further analysis: stride_ddllvm.wasm,17625,450,13,2.8077753,116,3,2,3,1,9,4.333333333333333,3,160,12,7.5,12,7.5,12,7.5

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"stride_ddllvm.wasm",0,0,1,"i32.load"
"stride_ddllvm.wasm",1,1,3,"i32.load"
"stride_ddllvm.wasm",2,1,9,"i32.load"
