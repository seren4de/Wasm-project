Input file: vr-coefsllvm.wasm
  binary:    vr-coefsllvm.wasm

Functions:          106
  Imported:           7
  Non-imported:      99
  Exported:          88

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 3.77% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26257
  call:             402 (1.53% of all instructions)
  call_indirect:     12 (0.05% of all instructions, 2.90% of all calls)

Globals:
  #0 i32
     init: i32.const 74672
      32 × global.get   117 × global.set   149 total (21/79% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 74672
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 9132
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["__progname"]
     init: i32.const 6784
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["__progname_full"]
     init: i32.const 6788
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["__libc"]
     init: i32.const 6792
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__hwcap"]
     init: i32.const 6856
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__sysinfo"]
     init: i32.const 6860
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["program_invocation_short_name"]
     init: i32.const 6784
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["program_invocation_name"]
     init: i32.const 6788
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__malloc_replaced"]
     init: i32.const 7912
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__stdin_used"]
     init: i32.const 7936
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__stdout_used"]
     init: i32.const 9128
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__stderr_used"]
     init: i32.const 7936
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["stdout"]
     init: i32.const 4320
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     32 (32.32% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.01%) × [-8064]
    1  (1.01%) × [-560]
    1  (1.01%) × [-288]
    1  (1.01%) × [-128]
    1  (1.01%) × [-112]
    1  (1.01%) × [-96]
    1  (1.01%) × [-48]
    1  (1.01%) × [-32]
   18 (18.18%) × [-16]
   73 (73.74%) × []
  functions with stack allocation total: 26 (26.26%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-8064]",-8064,8064
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-560]",-560,560
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-288]",-288,288
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-128]",-128,128
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-112]",-112,112
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-96]",-96,96
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-48]",-48,48
sp_csv_line:"vr-coefsllvm.wasm",1,1.010101,"[-32]",-32,32
sp_csv_line:"vr-coefsllvm.wasm",18,18.181818,"[-16]",-16,16
sp_csv_line:"vr-coefsllvm.wasm",73,73.73737,"[]",0,0

Counts of function types (29 unique types):
    1  (0.94%) × [i32, i32, i32] -> []
    1  (0.94%) × [i32, i32, i32, i32] -> []
    1  (0.94%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.94%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.94%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.94%) × [i32, i32, f64, i32] -> []
    1  (0.94%) × [i32, i32, f64, i32] -> [f64]
    1  (0.94%) × [i32, i64, i32] -> [i64]
    1  (0.94%) × [i32, f64] -> []
    1  (0.94%) × [i32, f64, i32] -> []
    1  (0.94%) × [i32, f64, f64, f64, f64, i32, i32] -> []
    1  (0.94%) × [f64, i32] -> [i32]
    1  (0.94%) × [f64, i32] -> [f64]
    2  (1.89%) × [] -> [i32]
    2  (1.89%) × [i32, i32, i32, i32] -> [i32]
    2  (1.89%) × [f64, f64] -> [f64]
    2  (1.89%) × [f64, f64, i32] -> [f64]
    3  (2.83%) × [i32, i64, i64, i32] -> []
    3  (2.83%) × [i32, i64, i64, i64, i64] -> []
    4  (3.77%) × [i32, i32] -> []
    4  (3.77%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.77%) × [i64, i64] -> [i32]
    6  (5.66%) × [] -> []
    6  (5.66%) × [f64] -> [f64]
    7  (6.60%) × [i64, i64, i64, i64] -> [i32]
   10  (9.43%) × [i32] -> []
   10  (9.43%) × [i32, i32, i32] -> [i32]
   13 (12.26%) × [i32, i32] -> [i32]
   15 (14.15%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (5.05% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 9
  total classes: 2

CSV data for further analysis: vr-coefsllvm.wasm,26257,402,12,2.8985507,106,4,3,2,3,9,6,9,93,21,22.580645,21,22.580645,21,22.580645

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"vr-coefsllvm.wasm",0,1,3,"i32.load"
"vr-coefsllvm.wasm",1,2,9,"i32.load"
