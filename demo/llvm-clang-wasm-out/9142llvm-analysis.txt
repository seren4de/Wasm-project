Input file: 9142llvm.wasm
  binary:    9142llvm.wasm

Functions:          122
  Imported:           7
  Non-imported:     115
  Exported:         107

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.10% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26415
  call:             619 (2.34% of all instructions)
  call_indirect:     19 (0.07% of all instructions, 2.98% of all calls)

Globals:
  #0 i32
     init: i32.const 80144
      35 × global.get   109 × global.set   144 total (24/76% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 80144
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 14604
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["First_Header"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["Trigger"]
     init: i32.const 5619
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["Buffer"]
     init: i32.const 7149
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["Eip"]
     init: i32.const 7884
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["Nop"]
     init: i32.const 7150
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["Banner"]
     init: i32.const 7152
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["Calc_Shell_Code"]
     init: i32.const 5632
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["Bind_Shell_Code"]
     init: i32.const 5968
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["Add_User_Shell_Code"]
     init: i32.const 6672
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__progname"]
     init: i32.const 11360
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__progname_full"]
     init: i32.const 11364
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__libc"]
     init: i32.const 11368
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__hwcap"]
     init: i32.const 11432
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__sysinfo"]
     init: i32.const 11436
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["program_invocation_short_name"]
     init: i32.const 11360
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["program_invocation_name"]
     init: i32.const 11364
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__malloc_replaced"]
     init: i32.const 12488
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__fsmu8"]
     init: i32.const 11152
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__stdin_used"]
     init: i32.const 8184
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__stdout_used"]
     init: i32.const 8032
       0 × global.get     0 × global.set     0 total
  #24 i32
     export: ["__stderr_used"]
     init: i32.const 12504
       0 × global.get     0 × global.set     0 total
  #25 i32
     export: ["stdout"]
     init: i32.const 8360
       0 × global.get     0 × global.set     0 total
  #26 i32
     export: ["stdin"]
     init: i32.const 10808
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     35 (30.43% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.87%) × [-9472]
    1  (0.87%) × [-8064]
    1  (0.87%) × [-320]
    1  (0.87%) × [-288]
    1  (0.87%) × [-192]
    1  (0.87%) × [-112]
    1  (0.87%) × [-96]
    1  (0.87%) × [-80]
    2  (1.74%) × [-128]
    3  (2.61%) × [-32]
   21 (18.26%) × [-16]
   81 (70.43%) × []
  functions with stack allocation total: 34 (29.57%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-9472]",-9472,9472
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-8064]",-8064,8064
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-320]",-320,320
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-288]",-288,288
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-192]",-192,192
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-112]",-112,112
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-96]",-96,96
sp_csv_line:"9142llvm.wasm",1,0.8695652,"[-80]",-80,80
sp_csv_line:"9142llvm.wasm",2,1.7391304,"[-128]",-128,128
sp_csv_line:"9142llvm.wasm",3,2.6086957,"[-32]",-32,32
sp_csv_line:"9142llvm.wasm",21,18.26087,"[-16]",-16,16
sp_csv_line:"9142llvm.wasm",81,70.434784,"[]",0,0

Counts of function types (28 unique types):
    1  (0.82%) × [i32, i32] -> [i64]
    1  (0.82%) × [i32, i32, i32] -> []
    1  (0.82%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.82%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.82%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.82%) × [i32, i32, i32, i64] -> [i64]
    1  (0.82%) × [i32, i64] -> []
    1  (0.82%) × [i32, i64, i32] -> [i64]
    1  (0.82%) × [i32, f32] -> []
    1  (0.82%) × [i32, f64] -> []
    1  (0.82%) × [i64, i64] -> [f32]
    1  (0.82%) × [i64, i64] -> [f64]
    1  (0.82%) × [f64] -> [f64]
    1  (0.82%) × [f64, i32] -> [f64]
    2  (1.64%) × [i32, i32, i32, i32] -> []
    3  (2.46%) × [] -> [i32]
    3  (2.46%) × [i32, i32, i32, i32] -> [i32]
    3  (2.46%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.28%) × [i32, i32] -> []
    4  (3.28%) × [i32, i64, i64, i32] -> []
    4  (3.28%) × [i64, i64] -> [i32]
    7  (5.74%) × [] -> []
    7  (5.74%) × [i32, i64, i64, i64, i64] -> []
    7  (5.74%) × [i64, i64, i64, i64] -> [i32]
   11  (9.02%) × [i32] -> []
   12  (9.84%) × [i32, i32, i32] -> [i32]
   19 (15.57%) × [i32, i32] -> [i32]
   22 (18.03%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (7.83% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 13
  total classes: 3

CSV data for further analysis: 9142llvm.wasm,26415,619,19,2.9780564,122,5,5,3,1,13,6.333333333333333,5,183,45,24.590164,45,24.590164,45,24.590164

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"9142llvm.wasm",0,1,1,"i32.load"
"9142llvm.wasm",1,1,5,"i32.load"
"9142llvm.wasm",2,3,13,"i32.load"
