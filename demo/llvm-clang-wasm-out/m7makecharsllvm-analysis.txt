Input file: m7makecharsllvm.wasm
  binary:    m7makecharsllvm.wasm

Functions:          123
  Imported:           7
  Non-imported:     116
  Exported:          96

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 3.25% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     23055
  call:             466 (2.02% of all instructions)
  call_indirect:     19 (0.08% of all instructions, 3.92% of all calls)

Globals:
  #0 i32
     init: i32.const 96064
      38 × global.get   111 × global.set   149 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 96064
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 30524
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["optarg"]
     init: i32.const 11992
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["optind"]
     init: i32.const 30368
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["stderr"]
     init: i32.const 11320
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__progname"]
     init: i32.const 11896
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__progname_full"]
     init: i32.const 11900
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__libc"]
     init: i32.const 11904
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__hwcap"]
     init: i32.const 11968
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__sysinfo"]
     init: i32.const 11972
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["program_invocation_short_name"]
     init: i32.const 11896
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["program_invocation_name"]
     init: i32.const 11900
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__malloc_replaced"]
     init: i32.const 13040
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__optreset"]
     init: i32.const 11984
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__optpos"]
     init: i32.const 11988
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["optopt"]
     init: i32.const 11996
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["opterr"]
     init: i32.const 30372
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["optreset"]
     init: i32.const 11984
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__fsmu8"]
     init: i32.const 10992
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__stdin_used"]
     init: i32.const 13060
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__stdout_used"]
     init: i32.const 13056
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__stderr_used"]
     init: i32.const 30520
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     38 (32.76% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.86%) × [-8064]
    1  (0.86%) × [-288]
    1  (0.86%) × [-128]
    1  (0.86%) × [-112]
    1  (0.86%) × [-96]
    1  (0.86%) × [-32]
   18 (15.52%) × [-16]
   92 (79.31%) × []
  functions with stack allocation total: 24 (20.69%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"m7makecharsllvm.wasm",1,0.86206895,"[-8064]",-8064,8064
sp_csv_line:"m7makecharsllvm.wasm",1,0.86206895,"[-288]",-288,288
sp_csv_line:"m7makecharsllvm.wasm",1,0.86206895,"[-128]",-128,128
sp_csv_line:"m7makecharsllvm.wasm",1,0.86206895,"[-112]",-112,112
sp_csv_line:"m7makecharsllvm.wasm",1,0.86206895,"[-96]",-96,96
sp_csv_line:"m7makecharsllvm.wasm",1,0.86206895,"[-32]",-32,32
sp_csv_line:"m7makecharsllvm.wasm",18,15.5172415,"[-16]",-16,16
sp_csv_line:"m7makecharsllvm.wasm",92,79.31035,"[]",0,0

Counts of function types (21 unique types):
    1  (0.81%) × [i32, i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.81%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.81%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.81%) × [i32, i64, i32] -> [i64]
    1  (0.81%) × [i32, f64] -> []
    2  (1.63%) × [] -> [i32]
    2  (1.63%) × [i32, i32, i32, i32] -> []
    3  (2.44%) × [i32, i32, i32, i32] -> [i32]
    3  (2.44%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.44%) × [i32, i64, i64, i32] -> []
    3  (2.44%) × [i32, i64, i64, i64, i64] -> []
    4  (3.25%) × [i32, i32, i32] -> []
    4  (3.25%) × [i64, i64] -> [i32]
    7  (5.69%) × [i64, i64, i64, i64] -> [i32]
    8  (6.50%) × [] -> []
    8  (6.50%) × [i32, i32] -> []
   13 (10.57%) × [i32, i32, i32] -> [i32]
   17 (13.82%) × [i32, i32] -> [i32]
   18 (14.63%) × [i32] -> []
   22 (17.89%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (7.76% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 13
  total classes: 3

CSV data for further analysis: m7makecharsllvm.wasm,23055,466,19,3.9175258,123,4,4,3,1,13,6.333333333333333,5,196,32,16.32653,32,16.32653,32,16.32653

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"m7makecharsllvm.wasm",0,1,1,"i32.load"
"m7makecharsllvm.wasm",1,1,5,"i32.load"
"m7makecharsllvm.wasm",2,2,13,"i32.load"
