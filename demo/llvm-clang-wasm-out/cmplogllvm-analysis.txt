Input file: cmplogllvm.wasm
  binary:    cmplogllvm.wasm

Functions:          109
  Imported:           7
  Non-imported:     102
  Exported:          95

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.59% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16710
  call:             422 (2.53% of all instructions)
  call_indirect:     20 (0.12% of all instructions, 4.52% of all calls)

Globals:
  #0 i32
     init: i32.const 72928
     24 × global.get   81 × global.set  105 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72928
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 7388
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stdin"]
     init: i32.const 3136
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 3696
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 3700
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 3704
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 3768
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 3772
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3696
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 3700
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 4824
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 7232
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 7384
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 7080
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["stderr"]
     init: i32.const 3132
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["stdout"]
     init: i32.const 3140
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (23.53% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.98%) × [-8064]
    1  (0.98%) × [-288]
    1  (0.98%) × [-128]
    1  (0.98%) × [-112]
    1  (0.98%) × [-96]
    1  (0.98%) × [-32]
   17 (16.67%) × [-16]
   79 (77.45%) × []
  functions with stack allocation total: 23 (22.55%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"cmplogllvm.wasm",1,0.98039216,"[-8064]",-8064,8064
sp_csv_line:"cmplogllvm.wasm",1,0.98039216,"[-288]",-288,288
sp_csv_line:"cmplogllvm.wasm",1,0.98039216,"[-128]",-128,128
sp_csv_line:"cmplogllvm.wasm",1,0.98039216,"[-112]",-112,112
sp_csv_line:"cmplogllvm.wasm",1,0.98039216,"[-96]",-96,96
sp_csv_line:"cmplogllvm.wasm",1,0.98039216,"[-32]",-32,32
sp_csv_line:"cmplogllvm.wasm",17,16.666666,"[-16]",-16,16
sp_csv_line:"cmplogllvm.wasm",79,77.45098,"[]",0,0

Counts of function types (20 unique types):
    1  (0.92%) × [i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.92%) × [i32, i64, i32] -> [i64]
    1  (0.92%) × [i32, f64] -> []
    2  (1.83%) × [] -> [i32]
    3  (2.75%) × [i32, i32, i32, i32] -> [i32]
    3  (2.75%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.75%) × [i32, i64, i64, i32] -> []
    3  (2.75%) × [i32, i64, i64, i64, i64] -> []
    4  (3.67%) × [i32, i32] -> []
    4  (3.67%) × [i64, i64] -> [i32]
    7  (6.42%) × [i64, i64, i64, i64] -> [i32]
    9  (8.26%) × [] -> []
   13 (11.93%) × [i32, i32, i32] -> [i32]
   14 (12.84%) × [i32] -> []
   18 (16.51%) × [i32, i32] -> [i32]
   19 (17.43%) × [i32] -> [i32]

Functions with at least one call_indirect: 10 (9.80% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 13
  total classes: 4

CSV data for further analysis: cmplogllvm.wasm,16710,422,20,4.524887,109,5,5,4,1,13,5,5,202,45,22.277227,45,22.277227,45,22.277227

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"cmplogllvm.wasm",0,0,1,"i32.load"
"cmplogllvm.wasm",1,1,1,"i32.load"
"cmplogllvm.wasm",2,1,5,"i32.load"
"cmplogllvm.wasm",3,3,13,"i32.load"
