Input file: stacksizellvm.wasm
  binary:    stacksizellvm.wasm

Functions:           12
  Imported:           0
  Non-imported:      12
  Exported:          12

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          9
  Of those, unique functions:     9 (i.e., at least 75.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      1026
  call:              10 (0.97% of all instructions)
  call_indirect:      1 (0.10% of all instructions, 9.09% of all calls)

Globals:
  #0 i32
     init: i32.const 66608
     10 × global.get   21 × global.set   31 total (32/68% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 66608
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 1060
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["procs"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     10 (83.33% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   12(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"stacksizellvm.wasm",12,100,"[]",0,0

Counts of function types (3 unique types):
    1  (8.33%) × [] -> []
    1  (8.33%) × [i32, i32] -> [i32]
   10 (83.33%) × [i32] -> [i32]

Functions with at least one call_indirect: 1 (8.33% of all functions)

Table elements initialization:
         range: [    1,    9]   length:   9   unique funcs:    9   type: [i32] -> [i32]
  1 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    9
         functions matching by type and present in permissable table index range:              9
  1 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 9
    count (how often class appears): 1
  total classes: 1

CSV data for further analysis: stacksizellvm.wasm,1026,10,1,9.090909,12,9,0,1,1,1,1,1,10,9,90,9,90,0,0

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"stacksizellvm.wasm",0,9,1,"local.(get|tee)"
