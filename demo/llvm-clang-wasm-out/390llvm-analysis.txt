Input file: 390llvm.wasm
  binary:    390llvm.wasm

Functions:          126
  Imported:           8
  Non-imported:     118
  Exported:         109

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 3.17% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25796
  call:             605 (2.35% of all instructions)
  call_indirect:     15 (0.06% of all instructions, 2.42% of all calls)

Globals:
  #0 i32
     init: i32.const 71232
      35 × global.get   105 × global.set   140 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 71232
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5696
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 3308
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["remote"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["__progname"]
     init: i32.const 4548
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__progname_full"]
     init: i32.const 4552
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__libc"]
     init: i32.const 4556
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__hwcap"]
     init: i32.const 4620
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__sysinfo"]
     init: i32.const 4624
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4548
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["program_invocation_name"]
     init: i32.const 4552
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__malloc_replaced"]
     init: i32.const 5680
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__fsmu8"]
     init: i32.const 4208
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__stdin_used"]
     init: i32.const 4536
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__stdout_used"]
     init: i32.const 4536
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__stderr_used"]
     init: i32.const 1304
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     35 (29.66% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.85%) × [-9472]
    1  (0.85%) × [-8064]
    1  (0.85%) × [-320]
    1  (0.85%) × [-288]
    1  (0.85%) × [-192]
    1  (0.85%) × [-144]
    1  (0.85%) × [-112]
    1  (0.85%) × [-96]
    1  (0.85%) × [-80]
    2  (1.69%) × [-128]
    4  (3.39%) × [-32]
   19 (16.10%) × [-16]
   84 (71.19%) × []
  functions with stack allocation total: 34 (28.81%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-9472]",-9472,9472
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-8064]",-8064,8064
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-320]",-320,320
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-288]",-288,288
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-192]",-192,192
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-144]",-144,144
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-112]",-112,112
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-96]",-96,96
sp_csv_line:"390llvm.wasm",1,0.84745765,"[-80]",-80,80
sp_csv_line:"390llvm.wasm",2,1.6949153,"[-128]",-128,128
sp_csv_line:"390llvm.wasm",4,3.3898306,"[-32]",-32,32
sp_csv_line:"390llvm.wasm",19,16.101694,"[-16]",-16,16
sp_csv_line:"390llvm.wasm",84,71.18644,"[]",0,0

Counts of function types (28 unique types):
    1  (0.79%) × [i32, i32] -> [i64]
    1  (0.79%) × [i32, i32, i32] -> []
    1  (0.79%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.79%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.79%) × [i32, i32, i32, i64] -> [i64]
    1  (0.79%) × [i32, i64] -> []
    1  (0.79%) × [i32, i64, i32] -> [i64]
    1  (0.79%) × [i32, f32] -> []
    1  (0.79%) × [i32, f64] -> []
    1  (0.79%) × [i64, i64] -> [f32]
    1  (0.79%) × [i64, i64] -> [f64]
    1  (0.79%) × [f64] -> [f64]
    1  (0.79%) × [f64, i32] -> [f64]
    2  (1.59%) × [] -> [i32]
    2  (1.59%) × [i32, i32, i32, i32] -> []
    3  (2.38%) × [i32, i32, i32, i32] -> [i32]
    3  (2.38%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.38%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    4  (3.17%) × [i32, i32] -> []
    4  (3.17%) × [i32, i64, i64, i32] -> []
    4  (3.17%) × [i64, i64] -> [i32]
    7  (5.56%) × [i32, i64, i64, i64, i64] -> []
    7  (5.56%) × [i64, i64, i64, i64] -> [i32]
    9  (7.14%) × [] -> []
   13 (10.32%) × [i32] -> []
   16 (12.70%) × [i32, i32] -> [i32]
   17 (13.49%) × [i32, i32, i32] -> [i32]
   19 (15.08%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (6.78% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 11
  total classes: 3

CSV data for further analysis: 390llvm.wasm,25796,605,15,2.419355,126,4,3,3,1,11,5,3,199,25,12.562814,25,12.562814,25,12.562814

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"390llvm.wasm",0,0,1,"i32.load"
"390llvm.wasm",1,1,3,"i32.load"
"390llvm.wasm",2,2,11,"i32.load"
