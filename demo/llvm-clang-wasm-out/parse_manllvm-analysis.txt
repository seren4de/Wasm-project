Input file: parse_manllvm.wasm
  binary:    parse_manllvm.wasm

Functions:           34
  Imported:           3
  Non-imported:      31
  Exported:          31

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 14.71% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      1568
  call:              59 (3.76% of all instructions)
  call_indirect:     10 (0.64% of all instructions, 14.49% of all calls)

Globals:
  #0 i32
     init: i32.const 69040
      7 × global.get   18 × global.set   25 total (28/72% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 69040
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 3500
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["__progname"]
     init: i32.const 3112
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname_full"]
     init: i32.const 3116
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__libc"]
     init: i32.const 3120
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__hwcap"]
     init: i32.const 3184
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__sysinfo"]
     init: i32.const 3188
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3112
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_name"]
     init: i32.const 3116
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__stdin_used"]
     init: i32.const 3336
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdout_used"]
     init: i32.const 3488
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stderr_used"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["stdin"]
     init: i32.const 3492
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["stdout"]
     init: i32.const 3496
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      7 (22.58% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    6 (19.35%) × [-16]
   25 (80.65%) × []
  functions with stack allocation total: 6 (19.35%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"parse_manllvm.wasm",6,19.35484,"[-16]",-16,16
sp_csv_line:"parse_manllvm.wasm",25,80.645164,"[]",0,0

Counts of function types (9 unique types):
    1  (2.94%) × [i32, i32, i32, i32] -> [i32]
    1  (2.94%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (2.94%) × [i32, i64, i32] -> [i64]
    3  (8.82%) × [i32, i32] -> [i32]
    3  (8.82%) × [i32, i32, i32] -> [i32]
    4 (11.76%) × [] -> [i32]
    5 (14.71%) × [i32] -> []
    7 (20.59%) × [] -> []
    9 (26.47%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (16.13% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 6
  total classes: 3

CSV data for further analysis: parse_manllvm.wasm,1568,59,10,14.492754,34,5,4,3,1,6,3.3333333333333335,3,28,21,75,21,75,21,75

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"parse_manllvm.wasm",0,0,1,"i32.load"
"parse_manllvm.wasm",1,1,3,"i32.load"
"parse_manllvm.wasm",2,3,6,"i32.load"
