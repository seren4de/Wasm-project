Input file: subarrayllvm.wasm
  binary:    subarrayllvm.wasm

Functions:           68
  Imported:           4
  Non-imported:      64
  Exported:          59

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 5.88% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     12941
  call:             222 (1.72% of all instructions)
  call_indirect:     11 (0.09% of all instructions, 4.72% of all calls)

Globals:
  #0 i32
     init: i32.const 70336
     22 × global.get   65 × global.set   87 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70336
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 4796
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["__progname"]
     init: i32.const 3488
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname_full"]
     init: i32.const 3492
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__libc"]
     init: i32.const 3496
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__hwcap"]
     init: i32.const 3560
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__sysinfo"]
     init: i32.const 3564
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3488
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_name"]
     init: i32.const 3492
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__stdin_used"]
     init: i32.const 4640
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdout_used"]
     init: i32.const 4792
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stderr_used"]
     init: i32.const 4640
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["stdout"]
     init: i32.const 1028
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     22 (34.38% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.56%) × [-8064]
    1  (1.56%) × [-288]
    1  (1.56%) × [-112]
    1  (1.56%) × [-96]
    1  (1.56%) × [-32]
   13 (20.31%) × [-16]
   46 (71.88%) × []
  functions with stack allocation total: 18 (28.12%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"subarrayllvm.wasm",1,1.5625,"[-8064]",-8064,8064
sp_csv_line:"subarrayllvm.wasm",1,1.5625,"[-288]",-288,288
sp_csv_line:"subarrayllvm.wasm",1,1.5625,"[-112]",-112,112
sp_csv_line:"subarrayllvm.wasm",1,1.5625,"[-96]",-96,96
sp_csv_line:"subarrayllvm.wasm",1,1.5625,"[-32]",-32,32
sp_csv_line:"subarrayllvm.wasm",13,20.3125,"[-16]",-16,16
sp_csv_line:"subarrayllvm.wasm",46,71.875,"[]",0,0

Counts of function types (19 unique types):
    1  (1.47%) × [i32, i32, i32] -> []
    1  (1.47%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.47%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.47%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.47%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.47%) × [i32, i64, i32] -> [i64]
    1  (1.47%) × [i32, f64] -> []
    2  (2.94%) × [] -> [i32]
    2  (2.94%) × [i32, i32] -> []
    2  (2.94%) × [i32, i32, i32, i32] -> [i32]
    3  (4.41%) × [i32] -> []
    3  (4.41%) × [i32, i64, i64, i32] -> []
    3  (4.41%) × [i32, i64, i64, i64, i64] -> []
    4  (5.88%) × [i64, i64] -> [i32]
    5  (7.35%) × [] -> []
    7 (10.29%) × [i64, i64, i64, i64] -> [i32]
    8 (11.76%) × [i32, i32, i32] -> [i32]
   10 (14.71%) × [i32] -> [i32]
   12 (17.65%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 4 (6.25% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 8
  total classes: 2

CSV data for further analysis: subarrayllvm.wasm,12941,222,11,4.72103,68,4,3,2,3,8,5.5,8,67,19,28.35821,19,28.35821,19,28.35821

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"subarrayllvm.wasm",0,1,3,"i32.load"
"subarrayllvm.wasm",1,2,8,"i32.load"
