Input file: csvOutputllvm.wasm
  binary:    csvOutputllvm.wasm

Functions:          132
  Imported:           7
  Non-imported:     125
  Exported:         117

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 3.79% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     27121
  call:             648 (2.39% of all instructions)
  call_indirect:     27 (0.10% of all instructions, 4.00% of all calls)

Globals:
  #0 i32
     init: i32.const 74320
      37 × global.get   112 × global.set   149 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 74320
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 8780
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["numReg"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["persona"]
     init: i32.const 1040
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["stdin"]
     init: i32.const 5480
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["archivo"]
     init: i32.const 1920
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__progname"]
     init: i32.const 1924
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__progname_full"]
     init: i32.const 1928
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__libc"]
     init: i32.const 1932
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__hwcap"]
     init: i32.const 1996
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__sysinfo"]
     init: i32.const 2000
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1924
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["program_invocation_name"]
     init: i32.const 1928
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__malloc_replaced"]
     init: i32.const 3056
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__fsmu8"]
     init: i32.const 8272
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__stdin_used"]
     init: i32.const 8624
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["__stdout_used"]
     init: i32.const 8776
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["__stderr_used"]
     init: i32.const 3072
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["stdout"]
     init: i32.const 5484
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     37 (29.60% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.80%) × [-9472]
    1  (0.80%) × [-8064]
    1  (0.80%) × [-320]
    1  (0.80%) × [-288]
    1  (0.80%) × [-192]
    1  (0.80%) × [-112]
    1  (0.80%) × [-96]
    1  (0.80%) × [-80]
    2  (1.60%) × [-128]
    3  (2.40%) × [-32]
   21 (16.80%) × [-16]
   91 (72.80%) × []
  functions with stack allocation total: 34 (27.20%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-9472]",-9472,9472
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-8064]",-8064,8064
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-320]",-320,320
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-288]",-288,288
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-192]",-192,192
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-112]",-112,112
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-96]",-96,96
sp_csv_line:"csvOutputllvm.wasm",1,0.8,"[-80]",-80,80
sp_csv_line:"csvOutputllvm.wasm",2,1.6,"[-128]",-128,128
sp_csv_line:"csvOutputllvm.wasm",3,2.4,"[-32]",-32,32
sp_csv_line:"csvOutputllvm.wasm",21,16.8,"[-16]",-16,16
sp_csv_line:"csvOutputllvm.wasm",91,72.8,"[]",0,0

Counts of function types (30 unique types):
    1  (0.76%) × [i32, i32] -> [i64]
    1  (0.76%) × [i32, i32, i32] -> []
    1  (0.76%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.76%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.76%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.76%) × [i32, i32, i32, i64] -> [i64]
    1  (0.76%) × [i32, i64] -> []
    1  (0.76%) × [i32, i64, i32] -> [i64]
    1  (0.76%) × [i32, f32] -> []
    1  (0.76%) × [i32, f64] -> []
    1  (0.76%) × [i64, i64] -> [f32]
    1  (0.76%) × [i64, i64] -> [f64]
    1  (0.76%) × [f64] -> [f64]
    1  (0.76%) × [f64, i32] -> [f64]
    2  (1.52%) × [i32] -> [i64]
    2  (1.52%) × [i32, i32, i32, i32] -> []
    2  (1.52%) × [i32, i64, i32] -> [i32]
    3  (2.27%) × [i32, i32, i32, i32] -> [i32]
    3  (2.27%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.03%) × [] -> [i32]
    4  (3.03%) × [i32, i32] -> []
    4  (3.03%) × [i32, i64, i64, i32] -> []
    4  (3.03%) × [i64, i64] -> [i32]
    7  (5.30%) × [i32, i64, i64, i64, i64] -> []
    7  (5.30%) × [i64, i64, i64, i64] -> [i32]
    8  (6.06%) × [] -> []
   12  (9.09%) × [i32] -> []
   15 (11.36%) × [i32, i32, i32] -> [i32]
   17 (12.88%) × [i32, i32] -> [i32]
   24 (18.18%) × [i32] -> [i32]

Functions with at least one call_indirect: 14 (11.20% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    15 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     8 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 8
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 15
  total classes: 4

CSV data for further analysis: csvOutputllvm.wasm,27121,648,27,4,132,5,5,4,1,15,6.75,8,260,57,21.923077,57,21.923077,54,20.76923

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"csvOutputllvm.wasm",0,1,1,"i32.load"
"csvOutputllvm.wasm",1,1,3,"local.(get|tee)"
"csvOutputllvm.wasm",2,1,8,"i32.load"
"csvOutputllvm.wasm",3,3,15,"i32.load"
