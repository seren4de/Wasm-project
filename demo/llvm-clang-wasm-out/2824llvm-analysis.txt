Input file: 2824llvm.wasm
  binary:    2824llvm.wasm

Functions:          101
  Imported:           7
  Non-imported:      94
  Exported:          87

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.95% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16591
  call:             423 (2.55% of all instructions)
  call_indirect:     16 (0.10% of all instructions, 3.64% of all calls)

Globals:
  #0 i32
     init: i32.const 72928
     23 × global.get   78 × global.set  101 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72928
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 7388
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["__progname"]
     init: i32.const 5040
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname_full"]
     init: i32.const 5044
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__libc"]
     init: i32.const 5048
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__hwcap"]
     init: i32.const 5112
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__sysinfo"]
     init: i32.const 5116
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["program_invocation_short_name"]
     init: i32.const 5040
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_name"]
     init: i32.const 5044
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__malloc_replaced"]
     init: i32.const 6168
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdin_used"]
     init: i32.const 6184
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdout_used"]
     init: i32.const 7384
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stderr_used"]
     init: i32.const 6184
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["stdout"]
     init: i32.const 2584
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     23 (24.47% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.06%) × [-8064]
    1  (1.06%) × [-288]
    1  (1.06%) × [-128]
    1  (1.06%) × [-112]
    1  (1.06%) × [-96]
    1  (1.06%) × [-32]
   16 (17.02%) × [-16]
   72 (76.60%) × []
  functions with stack allocation total: 22 (23.40%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"2824llvm.wasm",1,1.0638298,"[-8064]",-8064,8064
sp_csv_line:"2824llvm.wasm",1,1.0638298,"[-288]",-288,288
sp_csv_line:"2824llvm.wasm",1,1.0638298,"[-128]",-128,128
sp_csv_line:"2824llvm.wasm",1,1.0638298,"[-112]",-112,112
sp_csv_line:"2824llvm.wasm",1,1.0638298,"[-96]",-96,96
sp_csv_line:"2824llvm.wasm",1,1.0638298,"[-32]",-32,32
sp_csv_line:"2824llvm.wasm",16,17.021276,"[-16]",-16,16
sp_csv_line:"2824llvm.wasm",72,76.59574,"[]",0,0

Counts of function types (20 unique types):
    1  (0.99%) × [i32, i32, i32] -> []
    1  (0.99%) × [i32, i32, i32, i32] -> []
    1  (0.99%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.99%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.99%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.99%) × [i32, i64, i32] -> [i64]
    1  (0.99%) × [i32, f64] -> []
    2  (1.98%) × [] -> [i32]
    2  (1.98%) × [i32, i32, i32, i32] -> [i32]
    3  (2.97%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.97%) × [i32, i64, i64, i32] -> []
    3  (2.97%) × [i32, i64, i64, i64, i64] -> []
    4  (3.96%) × [i32, i32] -> []
    4  (3.96%) × [i64, i64] -> [i32]
    6  (5.94%) × [] -> []
    7  (6.93%) × [i64, i64, i64, i64] -> [i32]
   11 (10.89%) × [i32] -> []
   11 (10.89%) × [i32, i32, i32] -> [i32]
   19 (18.81%) × [i32] -> [i32]
   19 (18.81%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (6.38% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  total classes: 3

CSV data for further analysis: 2824llvm.wasm,16591,423,16,3.644647,101,5,5,3,1,10,5.333333333333333,5,134,36,26.865671,36,26.865671,36,26.865671

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"2824llvm.wasm",0,1,1,"i32.load"
"2824llvm.wasm",1,1,5,"i32.load"
"2824llvm.wasm",2,3,10,"i32.load"
