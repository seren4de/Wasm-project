Input file: s-float-libcallllvm.wasm
  binary:    s-float-libcallllvm.wasm

Functions:            5
  Imported:           0
  Non-imported:       5
  Exported:           5

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          0
  Of those, unique functions:     0 (i.e., at least 0.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:       528
  call:               3 (0.57% of all instructions)
  call_indirect:      0 (0.00% of all instructions, 0.00% of all calls)

Globals:
  #0 i32
     init: i32.const 66576
     2 × global.get   7 × global.set   9 total (22/78% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 66576
     0 × global.get   0 × global.set   0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 1032
     0 × global.get   0 × global.set   0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
     0 × global.get   0 × global.set   0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      2 (40.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1 (20.00%) × [-16]
    4 (80.00%) × []
  functions with stack allocation total: 1 (20.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-float-libcallllvm.wasm",1,20,"[-16]",-16,16
sp_csv_line:"s-float-libcallllvm.wasm",4,80,"[]",0,0

Counts of function types (5 unique types):
    1 (20.00%) × [] -> []
    1 (20.00%) × [i32, i32] -> [i32]
    1 (20.00%) × [f32] -> [f32]
    1 (20.00%) × [f32, i32] -> [f32]
    1 (20.00%) × [f64] -> [f64]

Functions with at least one call_indirect: 0 (0.00% of all functions)

Table elements initialization:
  0 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  0 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  total classes: 0

