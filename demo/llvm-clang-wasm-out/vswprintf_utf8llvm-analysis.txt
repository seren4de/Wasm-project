Input file: vswprintf_utf8llvm.wasm
  binary:    vswprintf_utf8llvm.wasm

Functions:          105
  Imported:           7
  Non-imported:      98
  Exported:          92

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 5.71% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     18395
  call:             387 (2.10% of all instructions)
  call_indirect:     16 (0.09% of all instructions, 3.97% of all calls)

Globals:
  #0 i32
     init: i32.const 72096
      37 × global.get   134 × global.set   171 total (22/78% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72096
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 6548
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stdout"]
     init: i32.const 1712
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["__environ"]
     init: i32.const 4928
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["___environ"]
     init: i32.const 4928
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["_environ"]
     init: i32.const 4928
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["environ"]
     init: i32.const 4928
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["stderr"]
     init: i32.const 1708
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__progname"]
     init: i32.const 4932
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__progname_full"]
     init: i32.const 4936
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__libc"]
     init: i32.const 4940
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__hwcap"]
     init: i32.const 5004
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__sysinfo"]
     init: i32.const 5008
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4932
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["program_invocation_name"]
     init: i32.const 4936
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__c_dot_utf8"]
     init: i32.const 1460
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["__c_locale"]
     init: i32.const 1496
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["__c_dot_utf8_locale"]
     init: i32.const 1520
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__fsmu8"]
     init: i32.const 4176
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__stdin_used"]
     init: i32.const 5188
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__stdout_used"]
     init: i32.const 6544
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__stderr_used"]
     init: i32.const 6392
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     37 (37.76% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.02%) × [-8064]
    1  (1.02%) × [-1040]
    1  (1.02%) × [-416]
    1  (1.02%) × [-288]
    1  (1.02%) × [-272]
    1  (1.02%) × [-192]
    1  (1.02%) × [-176]
    1  (1.02%) × [-160]
    1  (1.02%) × [-144]
    1  (1.02%) × [-128]
    1  (1.02%) × [-112]
    1  (1.02%) × [-96]
    2  (2.04%) × [-32]
   21 (21.43%) × [-16]
   63 (64.29%) × []
  functions with stack allocation total: 35 (35.71%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-8064]",-8064,8064
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-1040]",-1040,1040
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-416]",-416,416
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-288]",-288,288
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-272]",-272,272
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-192]",-192,192
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-176]",-176,176
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-160]",-160,160
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-144]",-144,144
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-128]",-128,128
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-112]",-112,112
sp_csv_line:"vswprintf_utf8llvm.wasm",1,1.0204082,"[-96]",-96,96
sp_csv_line:"vswprintf_utf8llvm.wasm",2,2.0408163,"[-32]",-32,32
sp_csv_line:"vswprintf_utf8llvm.wasm",21,21.428572,"[-16]",-16,16
sp_csv_line:"vswprintf_utf8llvm.wasm",63,64.28571,"[]",0,0

Counts of function types (20 unique types):
    1  (0.95%) × [i32, i32, i32, i32] -> []
    1  (0.95%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.95%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.95%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.95%) × [i32, i64, i32] -> [i64]
    1  (0.95%) × [i32, f64] -> []
    2  (1.90%) × [i32, i32, i32] -> []
    3  (2.86%) × [] -> [i32]
    3  (2.86%) × [i32, i32] -> []
    3  (2.86%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.86%) × [i32, i64, i64, i32] -> []
    3  (2.86%) × [i32, i64, i64, i64, i64] -> []
    4  (3.81%) × [i64, i64] -> [i32]
    6  (5.71%) × [] -> []
    6  (5.71%) × [i32] -> []
    6  (5.71%) × [i32, i32, i32, i32] -> [i32]
    7  (6.67%) × [i64, i64, i64, i64] -> [i32]
   15 (14.29%) × [i32] -> [i32]
   17 (16.19%) × [i32, i32, i32] -> [i32]
   21 (20.00%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (6.12% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 11
  total classes: 2

CSV data for further analysis: vswprintf_utf8llvm.wasm,18395,387,16,3.9702234,105,6,5,2,5,11,8,11,192,49,25.520834,49,25.520834,49,25.520834

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"vswprintf_utf8llvm.wasm",0,1,5,"i32.load"
"vswprintf_utf8llvm.wasm",1,4,11,"i32.load"
