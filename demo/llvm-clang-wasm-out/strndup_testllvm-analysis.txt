Input file: strndup_testllvm.wasm
  binary:    strndup_testllvm.wasm

Functions:           18
  Imported:           3
  Non-imported:      15
  Exported:          15

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          0
  Of those, unique functions:     0 (i.e., at least 0.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      1771
  call:              25 (1.41% of all instructions)
  call_indirect:      0 (0.00% of all instructions, 0.00% of all calls)

Globals:
  #0 i32
     init: i32.const 66672
     3 × global.get   9 × global.set  12 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 66672
     0 × global.get   0 × global.set   0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 1128
     0 × global.get   0 × global.set   0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
     0 × global.get   0 × global.set   0 total
  #4 i32
     export: ["__progname"]
     init: i32.const 1028
     0 × global.get   0 × global.set   0 total
  #5 i32
     export: ["__progname_full"]
     init: i32.const 1032
     0 × global.get   0 × global.set   0 total
  #6 i32
     export: ["__libc"]
     init: i32.const 1036
     0 × global.get   0 × global.set   0 total
  #7 i32
     export: ["__hwcap"]
     init: i32.const 1100
     0 × global.get   0 × global.set   0 total
  #8 i32
     export: ["__sysinfo"]
     init: i32.const 1104
     0 × global.get   0 × global.set   0 total
  #9 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1028
     0 × global.get   0 × global.set   0 total
  #10 i32
     export: ["program_invocation_name"]
     init: i32.const 1032
     0 × global.get   0 × global.set   0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      3 (20.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    2 (13.33%) × [-16]
   13 (86.67%) × []
  functions with stack allocation total: 2 (13.33%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"strndup_testllvm.wasm",2,13.333333,"[-16]",-16,16
sp_csv_line:"strndup_testllvm.wasm",13,86.666664,"[]",0,0

Counts of function types (9 unique types):
    1  (5.56%) × [i32, i32, i32, i32] -> [i32]
    1  (5.56%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (5.56%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    2 (11.11%) × [] -> []
    2 (11.11%) × [] -> [i32]
    2 (11.11%) × [i32] -> []
    2 (11.11%) × [i32, i32, i32] -> [i32]
    3 (16.67%) × [i32] -> [i32]
    4 (22.22%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 0 (0.00% of all functions)

Table elements initialization:
  0 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  0 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  total classes: 0

