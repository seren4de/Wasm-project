Input file: kallsymsllvm.wasm
  binary:    kallsymsllvm.wasm

Functions:          152
  Imported:           7
  Non-imported:     145
  Exported:         113

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 3.95% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     35179
  call:             698 (1.98% of all instructions)
  call_indirect:     27 (0.08% of all instructions, 3.72% of all calls)

Globals:
  #0 i32
     init: i32.const 337456
      57 × global.get   145 × global.set   202 total (28/72% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 337456
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 271916
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stdin"]
     init: i32.const 2100
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["stderr"]
     init: i32.const 2096
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["best_table"]
     init: i32.const 267296
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["best_table_len"]
     init: i32.const 267808
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["token_profit"]
     init: i32.const 5152
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__progname"]
     init: i32.const 268088
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__progname_full"]
     init: i32.const 268092
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__libc"]
     init: i32.const 268096
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__hwcap"]
     init: i32.const 268160
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__sysinfo"]
     init: i32.const 268164
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["program_invocation_short_name"]
     init: i32.const 268088
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["program_invocation_name"]
     init: i32.const 268092
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__malloc_replaced"]
     init: i32.const 269216
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__fsmu8"]
     init: i32.const 4896
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["__stdin_used"]
     init: i32.const 271760
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["__stdout_used"]
     init: i32.const 271912
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__stderr_used"]
     init: i32.const 271608
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["stdout"]
     init: i32.const 2104
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     57 (39.31% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.69%) × [-9472]
    1  (0.69%) × [-8064]
    1  (0.69%) × [-1056]
    1  (0.69%) × [-736]
    1  (0.69%) × [-688]
    1  (0.69%) × [-320]
    1  (0.69%) × [-288]
    1  (0.69%) × [-192]
    1  (0.69%) × [-112]
    1  (0.69%) × [-96]
    1  (0.69%) × [-80]
    2  (1.38%) × [-128]
    3  (2.07%) × [-32]
   20 (13.79%) × [-16]
  109 (75.17%) × []
  functions with stack allocation total: 36 (24.83%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-9472]",-9472,9472
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-8064]",-8064,8064
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-1056]",-1056,1056
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-736]",-736,736
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-688]",-688,688
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-320]",-320,320
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-288]",-288,288
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-192]",-192,192
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-112]",-112,112
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-96]",-96,96
sp_csv_line:"kallsymsllvm.wasm",1,0.6896552,"[-80]",-80,80
sp_csv_line:"kallsymsllvm.wasm",2,1.3793104,"[-128]",-128,128
sp_csv_line:"kallsymsllvm.wasm",3,2.0689654,"[-32]",-32,32
sp_csv_line:"kallsymsllvm.wasm",20,13.793103,"[-16]",-16,16
sp_csv_line:"kallsymsllvm.wasm",109,75.17242,"[]",0,0

Counts of function types (30 unique types):
    1  (0.66%) × [i32, i32] -> [i64]
    1  (0.66%) × [i32, i32, i32] -> []
    1  (0.66%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.66%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.66%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.66%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.66%) × [i32, i32, i32, i64] -> [i64]
    1  (0.66%) × [i32, i64] -> []
    1  (0.66%) × [i32, i64] -> [i32]
    1  (0.66%) × [i32, i64, i32] -> [i64]
    1  (0.66%) × [i32, f32] -> []
    1  (0.66%) × [i32, f64] -> []
    1  (0.66%) × [i64, i64] -> [f32]
    1  (0.66%) × [i64, i64] -> [f64]
    1  (0.66%) × [f64] -> [f64]
    1  (0.66%) × [f64, i32] -> [f64]
    3  (1.97%) × [] -> [i32]
    3  (1.97%) × [i32, i32, i32, i32] -> []
    3  (1.97%) × [i32, i32, i32, i32] -> [i32]
    3  (1.97%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (2.63%) × [i32, i64, i64, i32] -> []
    4  (2.63%) × [i64, i64] -> [i32]
    7  (4.61%) × [i32, i32] -> []
    7  (4.61%) × [i32, i64, i64, i64, i64] -> []
    7  (4.61%) × [i64, i64, i64, i64] -> [i32]
   14  (9.21%) × [i32] -> []
   16 (10.53%) × [] -> []
   20 (13.16%) × [i32, i32] -> [i32]
   20 (13.16%) × [i32, i32, i32] -> [i32]
   25 (16.45%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (6.21% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    13 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 13
  total classes: 4

CSV data for further analysis: kallsymsllvm.wasm,35179,698,27,3.724138,152,6,4,4,1,13,6.75,10,479,46,9.60334,46,9.60334,33,6.889353

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"kallsymsllvm.wasm",0,0,1,"i32.load"
"kallsymsllvm.wasm",1,1,3,"i32.load"
"kallsymsllvm.wasm",2,3,10,"i32.load"
"kallsymsllvm.wasm",3,1,13,"local.(get|tee)"
