Input file: calc_vmlinuz_load_addrllvm.wasm
  binary:    calc_vmlinuz_load_addrllvm.wasm

Functions:          116
  Imported:           7
  Non-imported:     109
  Exported:         100

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.31% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25449
  call:             584 (2.29% of all instructions)
  call_indirect:     14 (0.06% of all instructions, 2.34% of all calls)

Globals:
  #0 i32
     init: i32.const 72304
      35 × global.get   105 × global.set   140 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72304
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 6756
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 3020
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 5304
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 5308
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 5312
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 5376
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 5380
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 5304
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 5308
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 6440
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__fsmu8"]
     init: i32.const 3920
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__stdin_used"]
     init: i32.const 4248
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__stdout_used"]
     init: i32.const 6752
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__stderr_used"]
     init: i32.const 6600
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["stdout"]
     init: i32.const 3024
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     35 (32.11% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.92%) × [-9472]
    1  (0.92%) × [-8064]
    1  (0.92%) × [-320]
    1  (0.92%) × [-288]
    1  (0.92%) × [-192]
    1  (0.92%) × [-144]
    1  (0.92%) × [-112]
    1  (0.92%) × [-96]
    1  (0.92%) × [-80]
    2  (1.83%) × [-128]
    3  (2.75%) × [-32]
   20 (18.35%) × [-16]
   75 (68.81%) × []
  functions with stack allocation total: 34 (31.19%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-9472]",-9472,9472
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-8064]",-8064,8064
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-320]",-320,320
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-288]",-288,288
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-192]",-192,192
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-144]",-144,144
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-112]",-112,112
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-96]",-96,96
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",1,0.9174312,"[-80]",-80,80
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",2,1.8348624,"[-128]",-128,128
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",3,2.7522936,"[-32]",-32,32
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",20,18.348623,"[-16]",-16,16
sp_csv_line:"calc_vmlinuz_load_addrllvm.wasm",75,68.80734,"[]",0,0

Counts of function types (28 unique types):
    1  (0.86%) × [i32, i32] -> [i64]
    1  (0.86%) × [i32, i32, i32] -> []
    1  (0.86%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.86%) × [i32, i32, i32, i64] -> [i64]
    1  (0.86%) × [i32, i64] -> []
    1  (0.86%) × [i32, i64, i32] -> [i64]
    1  (0.86%) × [i32, f32] -> []
    1  (0.86%) × [i32, f64] -> []
    1  (0.86%) × [i64, i64] -> [f32]
    1  (0.86%) × [i64, i64] -> [f64]
    1  (0.86%) × [f64] -> [f64]
    1  (0.86%) × [f64, i32] -> [f64]
    2  (1.72%) × [] -> [i32]
    2  (1.72%) × [i32, i32, i32, i32] -> []
    3  (2.59%) × [i32, i32, i32, i32] -> [i32]
    3  (2.59%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.45%) × [i32, i32] -> []
    4  (3.45%) × [i32, i64, i64, i32] -> []
    4  (3.45%) × [i64, i64] -> [i32]
    7  (6.03%) × [] -> []
    7  (6.03%) × [i32, i64, i64, i64, i64] -> []
    7  (6.03%) × [i64, i64, i64, i64] -> [i32]
   11  (9.48%) × [i32] -> []
   14 (12.07%) × [i32, i32] -> [i32]
   16 (13.79%) × [i32, i32, i32] -> [i32]
   18 (15.52%) × [i32] -> [i32]

Functions with at least one call_indirect: 7 (6.42% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 11
  total classes: 2

CSV data for further analysis: calc_vmlinuz_load_addrllvm.wasm,25449,584,14,2.3411372,116,5,4,2,3,11,7,11,179,36,20.111732,36,20.111732,36,20.111732

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"calc_vmlinuz_load_addrllvm.wasm",0,1,3,"i32.load"
"calc_vmlinuz_load_addrllvm.wasm",1,3,11,"i32.load"
