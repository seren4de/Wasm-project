Input file: 400llvm.wasm
  binary:    400llvm.wasm

Functions:          131
  Imported:           8
  Non-imported:     123
  Exported:         113

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 4.58% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26408
  call:             618 (2.34% of all instructions)
  call_indirect:     15 (0.06% of all instructions, 2.37% of all calls)

Globals:
  #0 i32
     init: i32.const 72800
      39 × global.get   114 × global.set   153 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72800
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 7256
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 3820
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["remote"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["__progname"]
     init: i32.const 6104
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__progname_full"]
     init: i32.const 6108
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__libc"]
     init: i32.const 6112
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__hwcap"]
     init: i32.const 6176
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__sysinfo"]
     init: i32.const 6180
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["program_invocation_short_name"]
     init: i32.const 6104
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["program_invocation_name"]
     init: i32.const 6108
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__malloc_replaced"]
     init: i32.const 7240
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__fsmu8"]
     init: i32.const 4720
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__stdin_used"]
     init: i32.const 5048
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__stdout_used"]
     init: i32.const 1456
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__stderr_used"]
     init: i32.const 1304
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["stdout"]
     init: i32.const 3824
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     39 (31.71% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.81%) × [-9472]
    1  (0.81%) × [-8064]
    1  (0.81%) × [-320]
    1  (0.81%) × [-288]
    1  (0.81%) × [-192]
    1  (0.81%) × [-160]
    1  (0.81%) × [-144]
    1  (0.81%) × [-112]
    1  (0.81%) × [-96]
    1  (0.81%) × [-80]
    2  (1.63%) × [-128]
    4  (3.25%) × [-32]
   22 (17.89%) × [-16]
   85 (69.11%) × []
  functions with stack allocation total: 38 (30.89%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-9472]",-9472,9472
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-8064]",-8064,8064
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-320]",-320,320
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-288]",-288,288
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-192]",-192,192
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-160]",-160,160
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-144]",-144,144
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-112]",-112,112
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-96]",-96,96
sp_csv_line:"400llvm.wasm",1,0.8130081,"[-80]",-80,80
sp_csv_line:"400llvm.wasm",2,1.6260163,"[-128]",-128,128
sp_csv_line:"400llvm.wasm",4,3.2520325,"[-32]",-32,32
sp_csv_line:"400llvm.wasm",22,17.886179,"[-16]",-16,16
sp_csv_line:"400llvm.wasm",85,69.10569,"[]",0,0

Counts of function types (28 unique types):
    1  (0.76%) × [i32, i32] -> [i64]
    1  (0.76%) × [i32, i32, i32] -> []
    1  (0.76%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.76%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.76%) × [i32, i32, i32, i64] -> [i64]
    1  (0.76%) × [i32, i64] -> []
    1  (0.76%) × [i32, i64, i32] -> [i64]
    1  (0.76%) × [i32, f32] -> []
    1  (0.76%) × [i32, f64] -> []
    1  (0.76%) × [i64, i64] -> [f32]
    1  (0.76%) × [i64, i64] -> [f64]
    1  (0.76%) × [f64] -> [f64]
    1  (0.76%) × [f64, i32] -> [f64]
    2  (1.53%) × [] -> [i32]
    2  (1.53%) × [i32, i32, i32, i32] -> []
    3  (2.29%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.29%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    4  (3.05%) × [i32, i32] -> []
    4  (3.05%) × [i32, i64, i64, i32] -> []
    4  (3.05%) × [i64, i64] -> [i32]
    5  (3.82%) × [i32, i32, i32, i32] -> [i32]
    7  (5.34%) × [i32, i64, i64, i64, i64] -> []
    7  (5.34%) × [i64, i64, i64, i64] -> [i32]
    9  (6.87%) × [] -> []
   13  (9.92%) × [i32] -> []
   17 (12.98%) × [i32, i32] -> [i32]
   19 (14.50%) × [i32] -> [i32]
   19 (14.50%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 8 (6.50% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 11
  total classes: 3

CSV data for further analysis: 400llvm.wasm,26408,618,15,2.3696682,131,6,5,3,1,11,5,3,221,47,21.266968,47,21.266968,47,21.266968

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"400llvm.wasm",0,0,1,"i32.load"
"400llvm.wasm",1,1,3,"i32.load"
"400llvm.wasm",2,4,11,"i32.load"
