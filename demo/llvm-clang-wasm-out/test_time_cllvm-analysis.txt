Input file: test_time_cllvm.wasm
  binary:    test_time_cllvm.wasm

Functions:          102
  Imported:           7
  Non-imported:      95
  Exported:          89

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.90% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17282
  call:             300 (1.74% of all instructions)
  call_indirect:     11 (0.06% of all instructions, 3.54% of all calls)

Globals:
  #0 i32
     init: i32.const 71264
     28 × global.get   81 × global.set  109 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 71264
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5728
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["__environ"]
     init: i32.const 5544
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["___environ"]
     init: i32.const 5544
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["_environ"]
     init: i32.const 5544
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["environ"]
     init: i32.const 5544
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__progname"]
     init: i32.const 5380
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__progname_full"]
     init: i32.const 5384
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__libc"]
     init: i32.const 5388
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__hwcap"]
     init: i32.const 5452
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__sysinfo"]
     init: i32.const 5456
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["program_invocation_short_name"]
     init: i32.const 5380
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["program_invocation_name"]
     init: i32.const 5384
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__c_dot_utf8"]
     init: i32.const 3508
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["__c_locale"]
     init: i32.const 3544
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["__c_dot_utf8_locale"]
     init: i32.const 3568
      0 × global.get    0 × global.set    0 total
  #18 i32
     export: ["__stdin_used"]
     init: i32.const 5376
      0 × global.get    0 × global.set    0 total
  #19 i32
     export: ["__stdout_used"]
     init: i32.const 4320
      0 × global.get    0 × global.set    0 total
  #20 i32
     export: ["__stderr_used"]
     init: i32.const 5376
      0 × global.get    0 × global.set    0 total
  #21 i32
     export: ["stdout"]
     init: i32.const 1036
      0 × global.get    0 × global.set    0 total
  #22 i32
     export: ["__daylight"]
     init: i32.const 5572
      0 × global.get    0 × global.set    0 total
  #23 i32
     export: ["__timezone"]
     init: i32.const 5568
      0 × global.get    0 × global.set    0 total
  #24 i32
     export: ["__tzname"]
     init: i32.const 5576
      0 × global.get    0 × global.set    0 total
  #25 i32
     export: ["__utc"]
     init: i32.const 4064
      0 × global.get    0 × global.set    0 total
  #26 i32
     export: ["timezone"]
     init: i32.const 5568
      0 × global.get    0 × global.set    0 total
  #27 i32
     export: ["daylight"]
     init: i32.const 5572
      0 × global.get    0 × global.set    0 total
  #28 i32
     export: ["tzname"]
     init: i32.const 5576
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     28 (29.47% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.05%) × [-8064]
    1  (1.05%) × [-304]
    1  (1.05%) × [-288]
    1  (1.05%) × [-160]
    1  (1.05%) × [-144]
    1  (1.05%) × [-128]
    1  (1.05%) × [-112]
    1  (1.05%) × [-96]
    2  (2.11%) × [-32]
   16 (16.84%) × [-16]
   69 (72.63%) × []
  functions with stack allocation total: 26 (27.37%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-8064]",-8064,8064
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-304]",-304,304
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-288]",-288,288
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-160]",-160,160
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-144]",-144,144
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-128]",-128,128
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-112]",-112,112
sp_csv_line:"test_time_cllvm.wasm",1,1.0526316,"[-96]",-96,96
sp_csv_line:"test_time_cllvm.wasm",2,2.1052632,"[-32]",-32,32
sp_csv_line:"test_time_cllvm.wasm",16,16.842106,"[-16]",-16,16
sp_csv_line:"test_time_cllvm.wasm",69,72.63158,"[]",0,0

Counts of function types (24 unique types):
    1  (0.98%) × [i32] -> [i64]
    1  (0.98%) × [i32, i32] -> [i64]
    1  (0.98%) × [i32, i32, i32] -> []
    1  (0.98%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.98%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.98%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.98%) × [i32, i64, i32] -> [i64]
    1  (0.98%) × [i32, f64] -> []
    1  (0.98%) × [i64, i32] -> [i32]
    1  (0.98%) × [i64, i32] -> [i64]
    1  (0.98%) × [i64, i32, i32, i32, i32, i32] -> []
    2  (1.96%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.94%) × [] -> [i32]
    3  (2.94%) × [i32, i32] -> []
    3  (2.94%) × [i32, i64, i64, i32] -> []
    3  (2.94%) × [i32, i64, i64, i64, i64] -> []
    4  (3.92%) × [i32, i32, i32, i32] -> [i32]
    4  (3.92%) × [i64, i64] -> [i32]
    6  (5.88%) × [i32] -> []
    7  (6.86%) × [i64, i64, i64, i64] -> [i32]
    8  (7.84%) × [] -> []
   12 (11.76%) × [i32, i32, i32] -> [i32]
   18 (17.65%) × [i32] -> [i32]
   18 (17.65%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 4 (4.21% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 8
  total classes: 2

CSV data for further analysis: test_time_cllvm.wasm,17282,300,11,3.5369775,102,5,4,2,3,8,5.5,8,99,27,27.272728,27,27.272728,27,27.272728

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_time_cllvm.wasm",0,1,3,"i32.load"
"test_time_cllvm.wasm",1,3,8,"i32.load"
