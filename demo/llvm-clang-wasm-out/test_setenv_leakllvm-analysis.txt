Input file: test_setenv_leakllvm.wasm
  binary:    test_setenv_leakllvm.wasm

Functions:          115
  Imported:           7
  Non-imported:     108
  Exported:         100

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 5.22% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17226
  call:             445 (2.58% of all instructions)
  call_indirect:     18 (0.10% of all instructions, 3.89% of all calls)

Globals:
  #0 i32
     init: i32.const 72768
     26 × global.get   85 × global.set  111 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72768
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 7220
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stdin"]
     init: i32.const 1208
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["stdout"]
     init: i32.const 1212
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__environ"]
     init: i32.const 3664
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["___environ"]
     init: i32.const 3664
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["_environ"]
     init: i32.const 3664
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["environ"]
     init: i32.const 3664
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__progname"]
     init: i32.const 3680
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__progname_full"]
     init: i32.const 3684
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__libc"]
     init: i32.const 3688
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__hwcap"]
     init: i32.const 3752
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__sysinfo"]
     init: i32.const 3756
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3680
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["program_invocation_name"]
     init: i32.const 3684
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["__malloc_replaced"]
     init: i32.const 4808
      0 × global.get    0 × global.set    0 total
  #18 i32
     export: ["__stdin_used"]
     init: i32.const 7064
      0 × global.get    0 × global.set    0 total
  #19 i32
     export: ["__stdout_used"]
     init: i32.const 7216
      0 × global.get    0 × global.set    0 total
  #20 i32
     export: ["__stderr_used"]
     init: i32.const 4824
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     26 (24.07% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.93%) × [-8064]
    1  (0.93%) × [-288]
    1  (0.93%) × [-160]
    1  (0.93%) × [-128]
    1  (0.93%) × [-112]
    1  (0.93%) × [-96]
    1  (0.93%) × [-32]
   18 (16.67%) × [-16]
   83 (76.85%) × []
  functions with stack allocation total: 25 (23.15%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_setenv_leakllvm.wasm",1,0.9259259,"[-8064]",-8064,8064
sp_csv_line:"test_setenv_leakllvm.wasm",1,0.9259259,"[-288]",-288,288
sp_csv_line:"test_setenv_leakllvm.wasm",1,0.9259259,"[-160]",-160,160
sp_csv_line:"test_setenv_leakllvm.wasm",1,0.9259259,"[-128]",-128,128
sp_csv_line:"test_setenv_leakllvm.wasm",1,0.9259259,"[-112]",-112,112
sp_csv_line:"test_setenv_leakllvm.wasm",1,0.9259259,"[-96]",-96,96
sp_csv_line:"test_setenv_leakllvm.wasm",1,0.9259259,"[-32]",-32,32
sp_csv_line:"test_setenv_leakllvm.wasm",18,16.666666,"[-16]",-16,16
sp_csv_line:"test_setenv_leakllvm.wasm",83,76.85185,"[]",0,0

Counts of function types (20 unique types):
    1  (0.87%) × [i32, i32, i32] -> []
    1  (0.87%) × [i32, i32, i32, i32] -> []
    1  (0.87%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.87%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.87%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.87%) × [i32, i64, i32] -> [i64]
    1  (0.87%) × [i32, f64] -> []
    2  (1.74%) × [] -> [i32]
    3  (2.61%) × [i32, i32, i32, i32] -> [i32]
    3  (2.61%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.61%) × [i32, i64, i64, i32] -> []
    3  (2.61%) × [i32, i64, i64, i64, i64] -> []
    4  (3.48%) × [i64, i64] -> [i32]
    5  (4.35%) × [i32, i32] -> []
    7  (6.09%) × [] -> []
    7  (6.09%) × [i64, i64, i64, i64] -> [i32]
   11  (9.57%) × [i32] -> []
   16 (13.91%) × [i32, i32] -> [i32]
   20 (17.39%) × [i32, i32, i32] -> [i32]
   24 (20.87%) × [i32] -> [i32]

Functions with at least one call_indirect: 8 (7.41% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    12 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 12
  total classes: 3

CSV data for further analysis: test_setenv_leakllvm.wasm,17226,445,18,3.8876889,115,6,6,3,1,12,6,5,269,54,20.07435,54,20.07435,54,20.07435

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_setenv_leakllvm.wasm",0,1,1,"i32.load"
"test_setenv_leakllvm.wasm",1,1,5,"i32.load"
"test_setenv_leakllvm.wasm",2,4,12,"i32.load"
