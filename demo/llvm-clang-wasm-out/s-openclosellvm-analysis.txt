Input file: s-openclosellvm.wasm
  binary:    s-openclosellvm.wasm

Functions:           57
  Imported:           7
  Non-imported:      50
  Exported:          45

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 7.02% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5433
  call:             202 (3.72% of all instructions)
  call_indirect:      5 (0.09% of all instructions, 2.42% of all calls)

Globals:
  #0 i32
     init: i32.const 67856
      9 × global.get   30 × global.set   39 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 67856
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 2316
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["__progname"]
     init: i32.const 1160
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname_full"]
     init: i32.const 1164
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__libc"]
     init: i32.const 1168
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__hwcap"]
     init: i32.const 1232
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__sysinfo"]
     init: i32.const 1236
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1160
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_name"]
     init: i32.const 1164
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__malloc_replaced"]
     init: i32.const 2288
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdout_used"]
     init: i32.const 2304
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (18.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.00%) × [-128]
    7 (14.00%) × [-16]
   42 (84.00%) × []
  functions with stack allocation total: 8 (16.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-openclosellvm.wasm",1,2,"[-128]",-128,128
sp_csv_line:"s-openclosellvm.wasm",7,14,"[-16]",-16,16
sp_csv_line:"s-openclosellvm.wasm",42,84,"[]",0,0

Counts of function types (14 unique types):
    1  (1.75%) × [i32, i32, i32, i32] -> []
    1  (1.75%) × [i32, i32, i32, i32] -> [i32]
    1  (1.75%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.75%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.75%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.75%) × [i32, i64, i32] -> [i64]
    2  (3.51%) × [i32, i32] -> []
    2  (3.51%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (5.26%) × [] -> [i32]
    4  (7.02%) × [] -> []
    6 (10.53%) × [i32, i32, i32] -> [i32]
    8 (14.04%) × [i32, i32] -> [i32]
   11 (19.30%) × [i32] -> []
   15 (26.32%) × [i32] -> [i32]

Functions with at least one call_indirect: 2 (4.00% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 2
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  total classes: 3

CSV data for further analysis: s-openclosellvm.wasm,5433,202,5,2.415459,57,4,4,3,1,2,1.6666666666666667,2,29,7,24.137932,7,24.137932,7,24.137932

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"s-openclosellvm.wasm",0,1,1,"i32.load"
"s-openclosellvm.wasm",1,2,2,"i32.load"
"s-openclosellvm.wasm",2,1,2,"i32.load"
