Input file: adaline_learningllvm.wasm
  binary:    adaline_learningllvm.wasm

Functions:          137
  Imported:           7
  Non-imported:     130
  Exported:         121

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 4.38% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26749
  call:             659 (2.46% of all instructions)
  call_indirect:     19 (0.07% of all instructions, 2.80% of all calls)

Globals:
  #0 i32
     init: i32.const 73840
      49 × global.get   128 × global.set   177 total (28/72% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 73840
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 8300
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 3868
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 4596
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 4600
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 4604
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 4668
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 4672
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4596
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 4600
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 5728
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 8144
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 8296
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 7992
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["stdin"]
     init: i32.const 3872
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["stdout"]
     init: i32.const 3876
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     49 (37.69% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.77%) × [-9472]
    1  (0.77%) × [-8064]
    1  (0.77%) × [-288]
    1  (0.77%) × [-192]
    1  (0.77%) × [-112]
    1  (0.77%) × [-96]
    1  (0.77%) × [-80]
    2  (1.54%) × [-128]
    3  (2.31%) × [-32]
    4  (3.08%) × [-160]
   22 (16.92%) × [-16]
   92 (70.77%) × []
  functions with stack allocation total: 38 (29.23%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"adaline_learningllvm.wasm",1,0.7692308,"[-9472]",-9472,9472
sp_csv_line:"adaline_learningllvm.wasm",1,0.7692308,"[-8064]",-8064,8064
sp_csv_line:"adaline_learningllvm.wasm",1,0.7692308,"[-288]",-288,288
sp_csv_line:"adaline_learningllvm.wasm",1,0.7692308,"[-192]",-192,192
sp_csv_line:"adaline_learningllvm.wasm",1,0.7692308,"[-112]",-112,112
sp_csv_line:"adaline_learningllvm.wasm",1,0.7692308,"[-96]",-96,96
sp_csv_line:"adaline_learningllvm.wasm",1,0.7692308,"[-80]",-80,80
sp_csv_line:"adaline_learningllvm.wasm",2,1.5384616,"[-128]",-128,128
sp_csv_line:"adaline_learningllvm.wasm",3,2.3076923,"[-32]",-32,32
sp_csv_line:"adaline_learningllvm.wasm",4,3.0769231,"[-160]",-160,160
sp_csv_line:"adaline_learningllvm.wasm",22,16.923077,"[-16]",-16,16
sp_csv_line:"adaline_learningllvm.wasm",92,70.76923,"[]",0,0

Counts of function types (34 unique types):
    1  (0.73%) × [i32] -> [i64]
    1  (0.73%) × [i32, i32] -> [i64]
    1  (0.73%) × [i32, i32] -> [f32]
    1  (0.73%) × [i32, i32] -> [f64]
    1  (0.73%) × [i32, i32, i32] -> [f64]
    1  (0.73%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.73%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.73%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.73%) × [i32, i32, f64] -> []
    1  (0.73%) × [i32, i64] -> []
    1  (0.73%) × [i32, i64, i32] -> [i64]
    1  (0.73%) × [i32, f32] -> []
    1  (0.73%) × [i32, f64] -> []
    1  (0.73%) × [i64, i64] -> [f32]
    1  (0.73%) × [i64, i64] -> [f64]
    1  (0.73%) × [f64] -> [i32]
    1  (0.73%) × [f64] -> [f64]
    1  (0.73%) × [f64, i32] -> [f64]
    2  (1.46%) × [i32, i32, i32] -> []
    3  (2.19%) × [i32, i32, i32, i32] -> [i32]
    3  (2.19%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.19%) × [f64] -> []
    4  (2.92%) × [] -> [i32]
    4  (2.92%) × [i32, i32] -> []
    4  (2.92%) × [i32, i32, i32, i32] -> []
    4  (2.92%) × [i32, i64, i64, i32] -> []
    4  (2.92%) × [i64, i64] -> [i32]
    7  (5.11%) × [i32, i64, i64, i64, i64] -> []
    7  (5.11%) × [i64, i64, i64, i64] -> [i32]
    9  (6.57%) × [] -> []
   14 (10.22%) × [i32, i32] -> [i32]
   15 (10.95%) × [i32] -> []
   16 (11.68%) × [i32, i32, i32] -> [i32]
   20 (14.60%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (6.92% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 13
  total classes: 3

CSV data for further analysis: adaline_learningllvm.wasm,26749,659,19,2.8023598,137,6,5,3,1,13,6.333333333333333,5,222,57,25.675676,57,25.675676,57,25.675676

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"adaline_learningllvm.wasm",0,0,1,"i32.load"
"adaline_learningllvm.wasm",1,1,5,"i32.load"
"adaline_learningllvm.wasm",2,4,13,"i32.load"
