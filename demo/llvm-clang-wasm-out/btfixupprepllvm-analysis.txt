Input file: btfixupprepllvm.wasm
  binary:    btfixupprepllvm.wasm

Functions:           96
  Imported:           4
  Non-imported:      92
  Exported:          87

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 5.21% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     20874
  call:             412 (1.97% of all instructions)
  call_indirect:     14 (0.07% of all instructions, 3.29% of all calls)

Globals:
  #0 i32
     init: i32.const 100256
     32 × global.get   96 × global.set  128 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 100256
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 34714
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["buffer"]
     init: i32.const 1040
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["stdin"]
     init: i32.const 31992
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["mode"]
     init: i32.const 2068
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["stderr"]
     init: i32.const 31988
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["lastf"]
     init: i32.const 2072
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["lastfoffset"]
     init: i32.const 28856
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["lastfrelno"]
     init: i32.const 2076
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["last"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["array"]
     init: i32.const 2080
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__progname"]
     init: i32.const 26656
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__progname_full"]
     init: i32.const 26660
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__libc"]
     init: i32.const 26664
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["__hwcap"]
     init: i32.const 26728
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["__sysinfo"]
     init: i32.const 26732
      0 × global.get    0 × global.set    0 total
  #18 i32
     export: ["program_invocation_short_name"]
     init: i32.const 26656
      0 × global.get    0 × global.set    0 total
  #19 i32
     export: ["program_invocation_name"]
     init: i32.const 26660
      0 × global.get    0 × global.set    0 total
  #20 i32
     export: ["__stdin_used"]
     init: i32.const 29168
      0 × global.get    0 × global.set    0 total
  #21 i32
     export: ["__stdout_used"]
     init: i32.const 29320
      0 × global.get    0 × global.set    0 total
  #22 i32
     export: ["__stderr_used"]
     init: i32.const 29016
      0 × global.get    0 × global.set    0 total
  #23 i32
     export: ["stdout"]
     init: i32.const 31996
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     32 (34.78% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.09%) × [-8064]
    1  (1.09%) × [-1056]
    1  (1.09%) × [-288]
    1  (1.09%) × [-112]
    1  (1.09%) × [-96]
    1  (1.09%) × [-32]
    6  (6.52%) × [-144]
   16 (17.39%) × [-16]
   64 (69.57%) × []
  functions with stack allocation total: 28 (30.43%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"btfixupprepllvm.wasm",1,1.0869565,"[-8064]",-8064,8064
sp_csv_line:"btfixupprepllvm.wasm",1,1.0869565,"[-1056]",-1056,1056
sp_csv_line:"btfixupprepllvm.wasm",1,1.0869565,"[-288]",-288,288
sp_csv_line:"btfixupprepllvm.wasm",1,1.0869565,"[-112]",-112,112
sp_csv_line:"btfixupprepllvm.wasm",1,1.0869565,"[-96]",-96,96
sp_csv_line:"btfixupprepllvm.wasm",1,1.0869565,"[-32]",-32,32
sp_csv_line:"btfixupprepllvm.wasm",6,6.521739,"[-144]",-144,144
sp_csv_line:"btfixupprepllvm.wasm",16,17.391304,"[-16]",-16,16
sp_csv_line:"btfixupprepllvm.wasm",64,69.565216,"[]",0,0

Counts of function types (22 unique types):
    1  (1.04%) × [i32, i32, i32] -> []
    1  (1.04%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.04%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.04%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.04%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.04%) × [i32, i32, i32, i64] -> [i64]
    1  (1.04%) × [i32, i64] -> []
    1  (1.04%) × [i32, i64, i32] -> [i64]
    1  (1.04%) × [i32, f64] -> []
    2  (2.08%) × [] -> [i32]
    2  (2.08%) × [i32, i32] -> []
    2  (2.08%) × [i32, i32, i32, i32] -> [i32]
    3  (3.12%) × [i32, i64, i64, i32] -> []
    3  (3.12%) × [i32, i64, i64, i64, i64] -> []
    4  (4.17%) × [i32, i32, i32] -> [i64]
    4  (4.17%) × [i64, i64] -> [i32]
    6  (6.25%) × [i32] -> []
    7  (7.29%) × [i64, i64, i64, i64] -> [i32]
    9  (9.38%) × [] -> []
   14 (14.58%) × [i32] -> [i32]
   15 (15.62%) × [i32, i32, i32] -> [i32]
   16 (16.67%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 7 (7.61% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    5]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  total classes: 3

CSV data for further analysis: btfixupprepllvm.wasm,20874,412,14,3.286385,96,5,4,3,1,10,4.666666666666667,3,162,33,20.37037,33,20.37037,33,20.37037

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"btfixupprepllvm.wasm",0,0,1,"i32.load"
"btfixupprepllvm.wasm",1,1,3,"i32.load"
"btfixupprepllvm.wasm",2,3,10,"i32.load"
