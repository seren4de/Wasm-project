Input file: test_pthread_abortllvm.wasm
  binary:    test_pthread_abortllvm.wasm

Functions:           12
  Imported:           3
  Non-imported:       9
  Exported:           9

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          0
  Of those, unique functions:     0 (i.e., at least 0.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:        90
  call:              13 (14.44% of all instructions)
  call_indirect:      0 (0.00% of all instructions, 0.00% of all calls)

Globals:
  #0 i32
     init: i32.const 66576
     2 × global.get   3 × global.set   5 total (40/60% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 66576
     0 × global.get   0 × global.set   0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 1040
     0 × global.get   0 × global.set   0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
     0 × global.get   0 × global.set   0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      2 (22.22% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1 (11.11%) × [-128]
    8 (88.89%) × []
  functions with stack allocation total: 1 (11.11%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_pthread_abortllvm.wasm",1,11.111111,"[-128]",-128,128
sp_csv_line:"test_pthread_abortllvm.wasm",8,88.888885,"[]",0,0

Counts of function types (6 unique types):
    1  (8.33%) × [i32, i32, i32] -> [i32]
    1  (8.33%) × [i32, i32, i32, i32, i32] -> [i32]
    2 (16.67%) × [] -> []
    2 (16.67%) × [] -> [i32]
    3 (25.00%) × [i32] -> []
    3 (25.00%) × [i32] -> [i32]

Functions with at least one call_indirect: 0 (0.00% of all functions)

Table elements initialization:
  0 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  0 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  total classes: 0

