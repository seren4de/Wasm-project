Input file: s-pltargllvm.wasm
  binary:    s-pltargllvm.wasm

Functions:           43
  Imported:           7
  Non-imported:      36
  Exported:          31

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          0
  Of those, unique functions:     0 (i.e., at least 0.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      4597
  call:             145 (3.15% of all instructions)
  call_indirect:      0 (0.00% of all instructions, 0.00% of all calls)

Globals:
  #0 i32
     init: i32.const 67840
      5 × global.get   16 × global.set   21 total (24/76% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 67840
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 2304
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["__environ"]
     init: i32.const 1152
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["___environ"]
     init: i32.const 1152
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["_environ"]
     init: i32.const 1152
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["environ"]
     init: i32.const 1152
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__progname"]
     init: i32.const 1156
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__progname_full"]
     init: i32.const 1160
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__libc"]
     init: i32.const 1164
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__hwcap"]
     init: i32.const 1228
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__sysinfo"]
     init: i32.const 1232
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1156
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["program_invocation_name"]
     init: i32.const 1160
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__malloc_replaced"]
     init: i32.const 2288
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      5 (13.89% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.78%) × [-128]
    3  (8.33%) × [-16]
   32 (88.89%) × []
  functions with stack allocation total: 4 (11.11%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-pltargllvm.wasm",1,2.7777777,"[-128]",-128,128
sp_csv_line:"s-pltargllvm.wasm",3,8.333333,"[-16]",-16,16
sp_csv_line:"s-pltargllvm.wasm",32,88.888885,"[]",0,0

Counts of function types (13 unique types):
    1  (2.33%) × [] -> [i32]
    1  (2.33%) × [i32, i32, i32, i32] -> []
    1  (2.33%) × [i32, i32, i32, i32] -> [i32]
    1  (2.33%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (2.33%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (2.33%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    2  (4.65%) × [i32, i32] -> []
    2  (4.65%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (6.98%) × [] -> []
    5 (11.63%) × [i32, i32, i32] -> [i32]
    6 (13.95%) × [i32, i32] -> [i32]
    9 (20.93%) × [i32] -> []
   10 (23.26%) × [i32] -> [i32]

Functions with at least one call_indirect: 0 (0.00% of all functions)

Table elements initialization:
  0 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  0 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  total classes: 0

