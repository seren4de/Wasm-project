Input file: russian_dollllvm.wasm
  binary:    russian_dollllvm.wasm

Functions:           75
  Imported:           4
  Non-imported:      71
  Exported:          66

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 6.67% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     15122
  call:             246 (1.63% of all instructions)
  call_indirect:     25 (0.17% of all instructions, 9.23% of all calls)

Globals:
  #0 i32
     init: i32.const 70560
     25 × global.get   71 × global.set   96 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70560
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5012
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 1060
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 3552
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 3556
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 3560
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 3624
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 3628
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3552
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 3556
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdin_used"]
     init: i32.const 4704
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdout_used"]
     init: i32.const 5008
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stderr_used"]
     init: i32.const 4856
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["stdout"]
     init: i32.const 1064
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (35.21% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.41%) × [-8064]
    1  (1.41%) × [-736]
    1  (1.41%) × [-688]
    1  (1.41%) × [-288]
    1  (1.41%) × [-112]
    1  (1.41%) × [-96]
    1  (1.41%) × [-32]
   14 (19.72%) × [-16]
   50 (70.42%) × []
  functions with stack allocation total: 21 (29.58%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"russian_dollllvm.wasm",1,1.4084507,"[-8064]",-8064,8064
sp_csv_line:"russian_dollllvm.wasm",1,1.4084507,"[-736]",-736,736
sp_csv_line:"russian_dollllvm.wasm",1,1.4084507,"[-688]",-688,688
sp_csv_line:"russian_dollllvm.wasm",1,1.4084507,"[-288]",-288,288
sp_csv_line:"russian_dollllvm.wasm",1,1.4084507,"[-112]",-112,112
sp_csv_line:"russian_dollllvm.wasm",1,1.4084507,"[-96]",-96,96
sp_csv_line:"russian_dollllvm.wasm",1,1.4084507,"[-32]",-32,32
sp_csv_line:"russian_dollllvm.wasm",14,19.71831,"[-16]",-16,16
sp_csv_line:"russian_dollllvm.wasm",50,70.42254,"[]",0,0

Counts of function types (21 unique types):
    1  (1.33%) × [i32, i32, i32] -> []
    1  (1.33%) × [i32, i32, i32, i32] -> []
    1  (1.33%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.33%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.33%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.33%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> []
    1  (1.33%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.33%) × [i32, i64, i32] -> [i64]
    1  (1.33%) × [i32, f64] -> []
    2  (2.67%) × [] -> [i32]
    2  (2.67%) × [i32, i32] -> []
    3  (4.00%) × [i32, i32, i32, i32] -> [i32]
    3  (4.00%) × [i32, i64, i64, i32] -> []
    3  (4.00%) × [i32, i64, i64, i64, i64] -> []
    4  (5.33%) × [i64, i64] -> [i32]
    5  (6.67%) × [i32] -> []
    7  (9.33%) × [] -> []
    7  (9.33%) × [i64, i64, i64, i64] -> [i32]
   10 (13.33%) × [i32] -> [i32]
   10 (13.33%) × [i32, i32] -> [i32]
   10 (13.33%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 7 (9.86% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    13 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 8
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 13
  total classes: 4

CSV data for further analysis: russian_dollllvm.wasm,15122,246,25,9.225092,75,5,3,4,1,13,6.25,8,220,32,14.545455,32,14.545455,19,8.636364

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"russian_dollllvm.wasm",0,0,1,"i32.load"
"russian_dollllvm.wasm",1,1,3,"i32.load"
"russian_dollllvm.wasm",2,2,8,"i32.load"
"russian_dollllvm.wasm",3,1,13,"local.(get|tee)"
