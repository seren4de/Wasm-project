Input file: spec2defllvm.wasm
  binary:    spec2defllvm.wasm

Functions:          160
  Imported:           7
  Non-imported:     153
  Exported:         144

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 3.75% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     34344
  call:             735 (2.14% of all instructions)
  call_indirect:     29 (0.08% of all instructions, 3.80% of all calls)

Globals:
  #0 i32
     init: i32.const 75760
      54 × global.get   136 × global.set   190 total (28/72% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 75760
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 10220
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["gbTracing"]
     init: i32.const 1036
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["gbMSComp"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["gpszUnderscore"]
     init: i32.const 9812
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["giArch"]
     init: i32.const 1040
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["pszDllName"]
     init: i32.const 1048
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["stderr"]
     init: i32.const 7080
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["gbImportLib"]
     init: i32.const 1028
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["gbDebug"]
     init: i32.const 1052
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["pszSourceFileName"]
     init: i32.const 1044
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["stdout"]
     init: i32.const 7084
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["gbNotPrivateNoWarn"]
     init: i32.const 1032
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["pszArchString"]
     init: i32.const 9808
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["pszArchString2"]
     init: i32.const 1056
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["guOsVersion"]
     init: i32.const 9816
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["astrCallingConventions"]
     init: i32.const 9824
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["__progname"]
     init: i32.const 1060
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__progname_full"]
     init: i32.const 1064
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__libc"]
     init: i32.const 1068
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__hwcap"]
     init: i32.const 1132
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__sysinfo"]
     init: i32.const 1136
       0 × global.get     0 × global.set     0 total
  #24 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1060
       0 × global.get     0 × global.set     0 total
  #25 i32
     export: ["program_invocation_name"]
     init: i32.const 1064
       0 × global.get     0 × global.set     0 total
  #26 i32
     export: ["__malloc_replaced"]
     init: i32.const 2192
       0 × global.get     0 × global.set     0 total
  #27 i32
     export: ["__stdin_used"]
     init: i32.const 2208
       0 × global.get     0 × global.set     0 total
  #28 i32
     export: ["__stdout_used"]
     init: i32.const 10216
       0 × global.get     0 × global.set     0 total
  #29 i32
     export: ["__stderr_used"]
     init: i32.const 10064
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     54 (35.29% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.65%) × [-8064]
    1  (0.65%) × [-288]
    1  (0.65%) × [-160]
    1  (0.65%) × [-128]
    1  (0.65%) × [-112]
    1  (0.65%) × [-96]
    2  (1.31%) × [-32]
    6  (3.92%) × [-144]
   19 (12.42%) × [-16]
  120 (78.43%) × []
  functions with stack allocation total: 33 (21.57%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"spec2defllvm.wasm",1,0.6535948,"[-8064]",-8064,8064
sp_csv_line:"spec2defllvm.wasm",1,0.6535948,"[-288]",-288,288
sp_csv_line:"spec2defllvm.wasm",1,0.6535948,"[-160]",-160,160
sp_csv_line:"spec2defllvm.wasm",1,0.6535948,"[-128]",-128,128
sp_csv_line:"spec2defllvm.wasm",1,0.6535948,"[-112]",-112,112
sp_csv_line:"spec2defllvm.wasm",1,0.6535948,"[-96]",-96,96
sp_csv_line:"spec2defllvm.wasm",2,1.3071896,"[-32]",-32,32
sp_csv_line:"spec2defllvm.wasm",6,3.9215686,"[-144]",-144,144
sp_csv_line:"spec2defllvm.wasm",19,12.418301,"[-16]",-16,16
sp_csv_line:"spec2defllvm.wasm",120,78.43137,"[]",0,0

Counts of function types (26 unique types):
    1  (0.62%) × [i32, i32, i32] -> []
    1  (0.62%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.62%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.62%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.62%) × [i32, i32, i32, i64] -> [i64]
    1  (0.62%) × [i32, i64] -> []
    1  (0.62%) × [i32, i64, i32] -> [i64]
    1  (0.62%) × [i32, f64] -> []
    2  (1.25%) × [] -> [i32]
    2  (1.25%) × [i32] -> [i64]
    2  (1.25%) × [i32, i32, i32, i32] -> []
    2  (1.25%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    2  (1.25%) × [i32, i64, i32] -> [i32]
    3  (1.88%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (1.88%) × [i32, i64, i64, i32] -> []
    3  (1.88%) × [i32, i64, i64, i64, i64] -> []
    4  (2.50%) × [i32, i32, i32] -> [i64]
    4  (2.50%) × [i64, i64] -> [i32]
    5  (3.12%) × [i32, i32, i32, i32] -> [i32]
    7  (4.38%) × [i64, i64, i64, i64] -> [i32]
    9  (5.62%) × [i32, i32] -> []
   10  (6.25%) × [] -> []
   15  (9.38%) × [i32] -> []
   25 (15.62%) × [i32, i32, i32] -> [i32]
   26 (16.25%) × [i32, i32] -> [i32]
   28 (17.50%) × [i32] -> [i32]

Functions with at least one call_indirect: 16 (10.46% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    16 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     8 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 8
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 16
  total classes: 5

CSV data for further analysis: spec2defllvm.wasm,34344,735,29,3.7958114,160,6,6,5,1,16,5.8,3,449,76,16.926504,76,16.926504,73,16.258352

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"spec2defllvm.wasm",0,0,1,"i32.load"
"spec2defllvm.wasm",1,1,1,"i32.load"
"spec2defllvm.wasm",2,1,3,"local.(get|tee)"
"spec2defllvm.wasm",3,1,8,"i32.load"
"spec2defllvm.wasm",4,4,16,"i32.load"
