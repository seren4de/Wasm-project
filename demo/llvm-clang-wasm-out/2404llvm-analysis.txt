Input file: 2404llvm.wasm
  binary:    2404llvm.wasm

Functions:          135
  Imported:           7
  Non-imported:     128
  Exported:         119

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 4.44% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     27525
  call:             680 (2.47% of all instructions)
  call_indirect:     20 (0.07% of all instructions, 2.86% of all calls)

Globals:
  #0 i32
     init: i32.const 72464
      41 × global.get   118 × global.set   159 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72464
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 6924
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["shellcode1"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 4720
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 4724
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 4728
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 4792
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 4796
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4720
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 4724
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 5848
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__fsmu8"]
     init: i32.const 4512
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__stdin_used"]
     init: i32.const 5864
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__stdout_used"]
     init: i32.const 1392
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__stderr_used"]
     init: i32.const 1240
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["stderr"]
     init: i32.const 3612
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["stdout"]
     init: i32.const 3616
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     41 (32.03% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.78%) × [-9472]
    1  (0.78%) × [-8064]
    1  (0.78%) × [-320]
    1  (0.78%) × [-288]
    1  (0.78%) × [-192]
    1  (0.78%) × [-144]
    1  (0.78%) × [-112]
    1  (0.78%) × [-96]
    1  (0.78%) × [-80]
    2  (1.56%) × [-128]
    3  (2.34%) × [-32]
   21 (16.41%) × [-16]
   93 (72.66%) × []
  functions with stack allocation total: 35 (27.34%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-9472]",-9472,9472
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-8064]",-8064,8064
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-320]",-320,320
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-288]",-288,288
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-192]",-192,192
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-144]",-144,144
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-112]",-112,112
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-96]",-96,96
sp_csv_line:"2404llvm.wasm",1,0.78125,"[-80]",-80,80
sp_csv_line:"2404llvm.wasm",2,1.5625,"[-128]",-128,128
sp_csv_line:"2404llvm.wasm",3,2.34375,"[-32]",-32,32
sp_csv_line:"2404llvm.wasm",21,16.40625,"[-16]",-16,16
sp_csv_line:"2404llvm.wasm",93,72.65625,"[]",0,0

Counts of function types (28 unique types):
    1  (0.74%) × [i32, i32] -> [i64]
    1  (0.74%) × [i32, i32, i32] -> []
    1  (0.74%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.74%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.74%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.74%) × [i32, i32, i32, i64] -> [i64]
    1  (0.74%) × [i32, i64] -> []
    1  (0.74%) × [i32, i64, i32] -> [i64]
    1  (0.74%) × [i32, f32] -> []
    1  (0.74%) × [i32, f64] -> []
    1  (0.74%) × [i64, i64] -> [f32]
    1  (0.74%) × [i64, i64] -> [f64]
    1  (0.74%) × [f64] -> [f64]
    1  (0.74%) × [f64, i32] -> [f64]
    2  (1.48%) × [] -> [i32]
    2  (1.48%) × [i32, i32, i32, i32] -> []
    3  (2.22%) × [i32, i32, i32, i32] -> [i32]
    3  (2.22%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (2.96%) × [i32, i64, i64, i32] -> []
    4  (2.96%) × [i64, i64] -> [i32]
    7  (5.19%) × [i32, i32] -> []
    7  (5.19%) × [i32, i64, i64, i64, i64] -> []
    7  (5.19%) × [i64, i64, i64, i64] -> [i32]
    9  (6.67%) × [] -> []
   15 (11.11%) × [i32] -> []
   17 (12.59%) × [i32, i32] -> [i32]
   18 (13.33%) × [i32, i32, i32] -> [i32]
   23 (17.04%) × [i32] -> [i32]

Functions with at least one call_indirect: 10 (7.81% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 13
  total classes: 4

CSV data for further analysis: 2404llvm.wasm,27525,680,20,2.857143,135,6,6,4,1,13,5,5,271,58,21.402214,58,21.402214,58,21.402214

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"2404llvm.wasm",0,0,1,"i32.load"
"2404llvm.wasm",1,1,1,"i32.load"
"2404llvm.wasm",2,1,5,"i32.load"
"2404llvm.wasm",3,4,13,"i32.load"
