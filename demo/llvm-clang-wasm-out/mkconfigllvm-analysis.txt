Input file: mkconfigllvm.wasm
  binary:    mkconfigllvm.wasm

Functions:          115
  Imported:           7
  Non-imported:     108
  Exported:         100

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.35% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17954
  call:             454 (2.53% of all instructions)
  call_indirect:     27 (0.15% of all instructions, 5.61% of all calls)

Globals:
  #0 i32
     init: i32.const 70960
     25 × global.get   83 × global.set  108 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70960
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5420
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 1656
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 4104
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 4108
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 4112
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 4176
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 4180
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4104
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 4108
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 5232
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 5252
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 5248
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 5416
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (23.15% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.93%) × [-8064]
    1  (0.93%) × [-288]
    1  (0.93%) × [-160]
    1  (0.93%) × [-128]
    1  (0.93%) × [-112]
    1  (0.93%) × [-96]
    1  (0.93%) × [-32]
   16 (14.81%) × [-16]
   85 (78.70%) × []
  functions with stack allocation total: 23 (21.30%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"mkconfigllvm.wasm",1,0.9259259,"[-8064]",-8064,8064
sp_csv_line:"mkconfigllvm.wasm",1,0.9259259,"[-288]",-288,288
sp_csv_line:"mkconfigllvm.wasm",1,0.9259259,"[-160]",-160,160
sp_csv_line:"mkconfigllvm.wasm",1,0.9259259,"[-128]",-128,128
sp_csv_line:"mkconfigllvm.wasm",1,0.9259259,"[-112]",-112,112
sp_csv_line:"mkconfigllvm.wasm",1,0.9259259,"[-96]",-96,96
sp_csv_line:"mkconfigllvm.wasm",1,0.9259259,"[-32]",-32,32
sp_csv_line:"mkconfigllvm.wasm",16,14.814815,"[-16]",-16,16
sp_csv_line:"mkconfigllvm.wasm",85,78.703705,"[]",0,0

Counts of function types (22 unique types):
    1  (0.87%) × [i32, i32, i32] -> []
    1  (0.87%) × [i32, i32, i32, i32] -> []
    1  (0.87%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.87%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.87%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.87%) × [i32, i64, i32] -> [i64]
    1  (0.87%) × [i32, f64] -> []
    2  (1.74%) × [] -> [i32]
    2  (1.74%) × [i32] -> [i64]
    2  (1.74%) × [i32, i64, i32] -> [i32]
    3  (2.61%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.61%) × [i32, i64, i64, i32] -> []
    3  (2.61%) × [i32, i64, i64, i64, i64] -> []
    4  (3.48%) × [i32, i32] -> []
    4  (3.48%) × [i32, i32, i32, i32] -> [i32]
    4  (3.48%) × [i64, i64] -> [i32]
    7  (6.09%) × [] -> []
    7  (6.09%) × [i64, i64, i64, i64] -> [i32]
   11  (9.57%) × [i32] -> []
   16 (13.91%) × [i32, i32, i32] -> [i32]
   20 (17.39%) × [i32] -> [i32]
   20 (17.39%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 14 (12.96% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    15 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     8 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 8
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 15
  total classes: 4

CSV data for further analysis: mkconfigllvm.wasm,17954,454,27,5.6133056,115,5,5,4,1,15,6.75,8,271,57,21.03321,57,21.03321,54,19.926199

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"mkconfigllvm.wasm",0,1,1,"i32.load"
"mkconfigllvm.wasm",1,1,3,"local.(get|tee)"
"mkconfigllvm.wasm",2,1,8,"i32.load"
"mkconfigllvm.wasm",3,3,15,"i32.load"
