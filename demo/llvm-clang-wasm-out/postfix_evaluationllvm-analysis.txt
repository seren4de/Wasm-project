Input file: postfix_evaluationllvm.wasm
  binary:    postfix_evaluationllvm.wasm

Functions:           80
  Imported:           6
  Non-imported:      74
  Exported:          71

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 5.00% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13547
  call:             249 (1.84% of all instructions)
  call_indirect:     16 (0.12% of all instructions, 6.04% of all calls)

Globals:
  #0 i32
     init: i32.const 70832
     24 × global.get   69 × global.set   93 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70832
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5284
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["st"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["stderr"]
     init: i32.const 2528
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname"]
     init: i32.const 2108
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__progname_full"]
     init: i32.const 2112
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__libc"]
     init: i32.const 2116
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__hwcap"]
     init: i32.const 2180
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__sysinfo"]
     init: i32.const 2184
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_short_name"]
     init: i32.const 2108
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["program_invocation_name"]
     init: i32.const 2112
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 2104
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 5280
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 5128
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["stdout"]
     init: i32.const 2532
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (32.43% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.35%) × [-8064]
    1  (1.35%) × [-288]
    1  (1.35%) × [-128]
    1  (1.35%) × [-112]
    1  (1.35%) × [-96]
    1  (1.35%) × [-32]
   13 (17.57%) × [-16]
   55 (74.32%) × []
  functions with stack allocation total: 19 (25.68%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"postfix_evaluationllvm.wasm",1,1.3513514,"[-8064]",-8064,8064
sp_csv_line:"postfix_evaluationllvm.wasm",1,1.3513514,"[-288]",-288,288
sp_csv_line:"postfix_evaluationllvm.wasm",1,1.3513514,"[-128]",-128,128
sp_csv_line:"postfix_evaluationllvm.wasm",1,1.3513514,"[-112]",-112,112
sp_csv_line:"postfix_evaluationllvm.wasm",1,1.3513514,"[-96]",-96,96
sp_csv_line:"postfix_evaluationllvm.wasm",1,1.3513514,"[-32]",-32,32
sp_csv_line:"postfix_evaluationllvm.wasm",13,17.567568,"[-16]",-16,16
sp_csv_line:"postfix_evaluationllvm.wasm",55,74.324326,"[]",0,0

Counts of function types (18 unique types):
    1  (1.25%) × [i32, i32, i32] -> []
    1  (1.25%) × [i32, i32, i32, i32] -> []
    1  (1.25%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.25%) × [i32, i64, i32] -> [i64]
    1  (1.25%) × [i32, f64] -> []
    2  (2.50%) × [i32, i32] -> []
    2  (2.50%) × [i32, i32, i32, i32] -> [i32]
    2  (2.50%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (3.75%) × [i32, i64, i64, i32] -> []
    3  (3.75%) × [i32, i64, i64, i64, i64] -> []
    4  (5.00%) × [] -> [i32]
    4  (5.00%) × [i64, i64] -> [i32]
    7  (8.75%) × [i64, i64, i64, i64] -> [i32]
    8 (10.00%) × [] -> []
    8 (10.00%) × [i32, i32] -> [i32]
    9 (11.25%) × [i32] -> []
   10 (12.50%) × [i32, i32, i32] -> [i32]
   13 (16.25%) × [i32] -> [i32]

Functions with at least one call_indirect: 6 (8.11% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 10
  total classes: 3

CSV data for further analysis: postfix_evaluationllvm.wasm,13547,249,16,6.037736,80,4,3,3,1,10,5.333333333333333,5,113,25,22.123894,25,22.123894,25,22.123894

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"postfix_evaluationllvm.wasm",0,0,1,"i32.load"
"postfix_evaluationllvm.wasm",1,1,5,"i32.load"
"postfix_evaluationllvm.wasm",2,2,10,"i32.load"
