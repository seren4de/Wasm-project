Input file: munchconfigllvm.wasm
  binary:    munchconfigllvm.wasm

Functions:          128
  Imported:           7
  Non-imported:     121
  Exported:         113

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 3.91% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     23170
  call:             503 (2.17% of all instructions)
  call_indirect:     20 (0.09% of all instructions, 3.82% of all calls)

Globals:
  #0 i32
     init: i32.const 72240
      31 × global.get   110 × global.set   141 total (22/78% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72240
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 6696
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["optind"]
     init: i32.const 4168
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["optarg"]
     init: i32.const 4488
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["stderr"]
     init: i32.const 1720
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["optopt"]
     init: i32.const 4492
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__progname"]
     init: i32.const 4496
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__progname_full"]
     init: i32.const 4500
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__libc"]
     init: i32.const 4504
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["__hwcap"]
     init: i32.const 4568
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__sysinfo"]
     init: i32.const 4572
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4496
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["program_invocation_name"]
     init: i32.const 4500
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__malloc_replaced"]
     init: i32.const 5624
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__optreset"]
     init: i32.const 4480
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__optpos"]
     init: i32.const 4484
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["opterr"]
     init: i32.const 4172
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["optreset"]
     init: i32.const 4480
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__fsmu8"]
     init: i32.const 1392
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__stdin_used"]
     init: i32.const 5640
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__stdout_used"]
     init: i32.const 4472
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__stderr_used"]
     init: i32.const 4320
       0 × global.get     0 × global.set     0 total
  #24 i32
     export: ["stdout"]
     init: i32.const 1724
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     31 (25.62% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.83%) × [-8064]
    1  (0.83%) × [-1056]
    1  (0.83%) × [-288]
    1  (0.83%) × [-128]
    1  (0.83%) × [-112]
    1  (0.83%) × [-96]
    1  (0.83%) × [-32]
   21 (17.36%) × [-16]
   93 (76.86%) × []
  functions with stack allocation total: 28 (23.14%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"munchconfigllvm.wasm",1,0.8264463,"[-8064]",-8064,8064
sp_csv_line:"munchconfigllvm.wasm",1,0.8264463,"[-1056]",-1056,1056
sp_csv_line:"munchconfigllvm.wasm",1,0.8264463,"[-288]",-288,288
sp_csv_line:"munchconfigllvm.wasm",1,0.8264463,"[-128]",-128,128
sp_csv_line:"munchconfigllvm.wasm",1,0.8264463,"[-112]",-112,112
sp_csv_line:"munchconfigllvm.wasm",1,0.8264463,"[-96]",-96,96
sp_csv_line:"munchconfigllvm.wasm",1,0.8264463,"[-32]",-32,32
sp_csv_line:"munchconfigllvm.wasm",21,17.355371,"[-16]",-16,16
sp_csv_line:"munchconfigllvm.wasm",93,76.859505,"[]",0,0

Counts of function types (20 unique types):
    1  (0.78%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.78%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.78%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.78%) × [i32, i64, i32] -> [i64]
    1  (0.78%) × [i32, f64] -> []
    2  (1.56%) × [] -> [i32]
    2  (1.56%) × [i32, i32, i32] -> []
    2  (1.56%) × [i32, i32, i32, i32] -> []
    2  (1.56%) × [i32, i32, i32, i32] -> [i32]
    3  (2.34%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.34%) × [i32, i64, i64, i32] -> []
    3  (2.34%) × [i32, i64, i64, i64, i64] -> []
    4  (3.12%) × [i64, i64] -> [i32]
    5  (3.91%) × [i32, i32] -> []
    7  (5.47%) × [i64, i64, i64, i64] -> [i32]
   10  (7.81%) × [] -> []
   15 (11.72%) × [i32] -> []
   17 (13.28%) × [i32, i32, i32] -> [i32]
   24 (18.75%) × [i32] -> [i32]
   24 (18.75%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (8.26% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 13
  total classes: 4

CSV data for further analysis: munchconfigllvm.wasm,23170,503,20,3.8240917,128,5,5,4,1,13,5,5,260,45,17.307692,45,17.307692,45,17.307692

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"munchconfigllvm.wasm",0,0,1,"i32.load"
"munchconfigllvm.wasm",1,1,1,"i32.load"
"munchconfigllvm.wasm",2,1,5,"i32.load"
"munchconfigllvm.wasm",3,3,13,"i32.load"
