Input file: test_stdlibsllvm.wasm
  binary:    test_stdlibsllvm.wasm

Functions:          126
  Imported:           7
  Non-imported:     119
  Exported:         109

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          8
  Of those, unique functions:     8 (i.e., at least 6.35% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25804
  call:             607 (2.35% of all instructions)
  call_indirect:     28 (0.11% of all instructions, 4.41% of all calls)

Globals:
  #0 i32
     init: i32.const 73568
      43 × global.get   115 × global.set   158 total (27/73% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 73568
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 8020
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stdin"]
     init: i32.const 1376
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 4480
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 4484
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 4488
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 4552
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 4556
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4480
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 4484
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 5608
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 7864
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 8016
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 7712
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["stdout"]
     init: i32.const 1380
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     43 (36.13% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.84%) × [-9472]
    1  (0.84%) × [-8064]
    1  (0.84%) × [-736]
    1  (0.84%) × [-688]
    1  (0.84%) × [-288]
    1  (0.84%) × [-192]
    1  (0.84%) × [-112]
    1  (0.84%) × [-96]
    1  (0.84%) × [-80]
    2  (1.68%) × [-128]
    3  (2.52%) × [-160]
    3  (2.52%) × [-32]
    6  (5.04%) × [-144]
   18 (15.13%) × [-16]
   78 (65.55%) × []
  functions with stack allocation total: 41 (34.45%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-9472]",-9472,9472
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-8064]",-8064,8064
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-736]",-736,736
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-688]",-688,688
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-288]",-288,288
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-192]",-192,192
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-112]",-112,112
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-96]",-96,96
sp_csv_line:"test_stdlibsllvm.wasm",1,0.84033614,"[-80]",-80,80
sp_csv_line:"test_stdlibsllvm.wasm",2,1.6806723,"[-128]",-128,128
sp_csv_line:"test_stdlibsllvm.wasm",3,2.5210085,"[-160]",-160,160
sp_csv_line:"test_stdlibsllvm.wasm",3,2.5210085,"[-32]",-32,32
sp_csv_line:"test_stdlibsllvm.wasm",6,5.042017,"[-144]",-144,144
sp_csv_line:"test_stdlibsllvm.wasm",18,15.12605,"[-16]",-16,16
sp_csv_line:"test_stdlibsllvm.wasm",78,65.54622,"[]",0,0

Counts of function types (32 unique types):
    1  (0.79%) × [i32, i32] -> [i64]
    1  (0.79%) × [i32, i32] -> [f32]
    1  (0.79%) × [i32, i32] -> [f64]
    1  (0.79%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.79%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.79%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.79%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.79%) × [i32, i32, i32, i64] -> [i64]
    1  (0.79%) × [i32, i64] -> []
    1  (0.79%) × [i32, i64, i32] -> [i64]
    1  (0.79%) × [i32, f32] -> []
    1  (0.79%) × [i32, f64] -> []
    1  (0.79%) × [i64, i64] -> [f32]
    1  (0.79%) × [i64, i64] -> [f64]
    1  (0.79%) × [f64] -> [f64]
    1  (0.79%) × [f64, i32] -> [f64]
    2  (1.59%) × [i32, i32, i32] -> []
    2  (1.59%) × [i32, i32, i32, i32] -> [i32]
    3  (2.38%) × [] -> [i32]
    3  (2.38%) × [i32, i32, i32, i32] -> []
    3  (2.38%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.17%) × [i32, i32] -> []
    4  (3.17%) × [i32, i32, i32] -> [i64]
    4  (3.17%) × [i32, i64, i64, i32] -> []
    4  (3.17%) × [i64, i64] -> [i32]
    7  (5.56%) × [i32, i64, i64, i64, i64] -> []
    7  (5.56%) × [i64, i64, i64, i64] -> [i32]
    9  (7.14%) × [] -> []
   12  (9.52%) × [i32] -> []
   14 (11.11%) × [i32, i32] -> [i32]
   14 (11.11%) × [i32, i32, i32] -> [i32]
   18 (14.29%) × [i32] -> [i32]

Functions with at least one call_indirect: 10 (8.40% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [] -> []
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    6,    6]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    7,    8]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 13
  total classes: 5

CSV data for further analysis: test_stdlibsllvm.wasm,25804,607,28,4.4094486,126,8,4,5,1,13,5.6,3,346,48,13.872832,48,13.872832,33,9.537572

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_stdlibsllvm.wasm",0,1,1,"local.(get|tee)"
"test_stdlibsllvm.wasm",1,1,1,"local.(get|tee)"
"test_stdlibsllvm.wasm",2,1,3,"i32.load"
"test_stdlibsllvm.wasm",3,3,10,"i32.load"
"test_stdlibsllvm.wasm",4,1,13,"local.(get|tee)"
