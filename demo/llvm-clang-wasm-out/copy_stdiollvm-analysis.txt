Input file: copy_stdiollvm.wasm
  binary:    copy_stdiollvm.wasm

Functions:           46
  Imported:           5
  Non-imported:      41
  Exported:          41

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 8.70% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      2558
  call:              95 (3.71% of all instructions)
  call_indirect:     10 (0.39% of all instructions, 9.52% of all calls)

Globals:
  #0 i32
     init: i32.const 66704
      9 × global.get   27 × global.set   36 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 66704
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 1160
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["__progname"]
     init: i32.const 1052
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname_full"]
     init: i32.const 1056
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__libc"]
     init: i32.const 1060
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__hwcap"]
     init: i32.const 1124
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__sysinfo"]
     init: i32.const 1128
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1052
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_name"]
     init: i32.const 1056
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__stdin_used"]
     init: i32.const 1048
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdout_used"]
     init: i32.const 1048
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stderr_used"]
     init: i32.const 1048
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (21.95% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    8 (19.51%) × [-16]
   33 (80.49%) × []
  functions with stack allocation total: 8 (19.51%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"copy_stdiollvm.wasm",8,19.512196,"[-16]",-16,16
sp_csv_line:"copy_stdiollvm.wasm",33,80.48781,"[]",0,0

Counts of function types (11 unique types):
    1  (2.17%) × [i32, i32, i32, i32] -> [i32]
    1  (2.17%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (2.17%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (2.17%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (2.17%) × [i32, i64, i32] -> [i64]
    3  (6.52%) × [] -> [i32]
    4  (8.70%) × [i32, i32, i32] -> [i32]
    5 (10.87%) × [i32] -> []
    8 (17.39%) × [] -> []
    8 (17.39%) × [i32, i32] -> [i32]
   13 (28.26%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (12.20% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 6
  total classes: 3

CSV data for further analysis: copy_stdiollvm.wasm,2558,95,10,9.523809,46,4,3,3,1,6,3.3333333333333335,3,35,15,42.857143,15,42.857143,15,42.857143

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"copy_stdiollvm.wasm",0,0,1,"i32.load"
"copy_stdiollvm.wasm",1,1,3,"i32.load"
"copy_stdiollvm.wasm",2,2,6,"i32.load"
