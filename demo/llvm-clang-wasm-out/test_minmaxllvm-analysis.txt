Input file: test_minmaxllvm.wasm
  binary:    test_minmaxllvm.wasm

Functions:           74
  Imported:           6
  Non-imported:      68
  Exported:          66

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 5.41% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13364
  call:             259 (1.94% of all instructions)
  call_indirect:     15 (0.11% of all instructions, 5.47% of all calls)

Globals:
  #0 i32
     init: i32.const 70768
     25 × global.get   69 × global.set   94 total (27/73% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70768
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5228
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 1328
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 4844
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 4848
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 4852
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 4916
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 4920
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4844
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 4848
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdin_used"]
     init: i32.const 4840
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdout_used"]
     init: i32.const 5224
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stderr_used"]
     init: i32.const 5072
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["stdout"]
     init: i32.const 1332
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (36.76% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.47%) × [-8064]
    1  (1.47%) × [-288]
    1  (1.47%) × [-128]
    1  (1.47%) × [-112]
    1  (1.47%) × [-96]
    1  (1.47%) × [-32]
   13 (19.12%) × [-16]
   49 (72.06%) × []
  functions with stack allocation total: 19 (27.94%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_minmaxllvm.wasm",1,1.4705882,"[-8064]",-8064,8064
sp_csv_line:"test_minmaxllvm.wasm",1,1.4705882,"[-288]",-288,288
sp_csv_line:"test_minmaxllvm.wasm",1,1.4705882,"[-128]",-128,128
sp_csv_line:"test_minmaxllvm.wasm",1,1.4705882,"[-112]",-112,112
sp_csv_line:"test_minmaxllvm.wasm",1,1.4705882,"[-96]",-96,96
sp_csv_line:"test_minmaxllvm.wasm",1,1.4705882,"[-32]",-32,32
sp_csv_line:"test_minmaxllvm.wasm",13,19.117647,"[-16]",-16,16
sp_csv_line:"test_minmaxllvm.wasm",49,72.05882,"[]",0,0

Counts of function types (21 unique types):
    1  (1.35%) × [i32, i32, i32] -> []
    1  (1.35%) × [i32, i32, i32, i32] -> []
    1  (1.35%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.35%) × [i32, i64, i32] -> [i64]
    1  (1.35%) × [i32, f64] -> []
    1  (1.35%) × [f32] -> [i32]
    2  (2.70%) × [i32, i32] -> []
    2  (2.70%) × [i32, i32, i32, i32] -> [i32]
    2  (2.70%) × [i32, i32, i32, i32, i32] -> [i32]
    2  (2.70%) × [f32, f32] -> [f32]
    2  (2.70%) × [f32, f32, f32] -> []
    3  (4.05%) × [] -> [i32]
    3  (4.05%) × [i32, i64, i64, i32] -> []
    3  (4.05%) × [i32, i64, i64, i64, i64] -> []
    4  (5.41%) × [i64, i64] -> [i32]
    5  (6.76%) × [] -> []
    6  (8.11%) × [i32] -> []
    7  (9.46%) × [i32, i32] -> [i32]
    7  (9.46%) × [i64, i64, i64, i64] -> [i32]
   10 (13.51%) × [i32] -> [i32]
   10 (13.51%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 5 (7.35% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  2 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 10
  total classes: 2

CSV data for further analysis: test_minmaxllvm.wasm,13364,259,15,5.4744525,74,4,3,2,5,10,7.5,10,105,25,23.809525,25,23.809525,25,23.809525

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_minmaxllvm.wasm",0,1,5,"i32.load"
"test_minmaxllvm.wasm",1,2,10,"i32.load"
