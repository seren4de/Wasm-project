Input file: gen_init_cpiollvm.wasm
  binary:    gen_init_cpiollvm.wasm

Functions:          188
  Imported:           8
  Non-imported:     180
  Exported:         152

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 6.91% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     34408
  call:             801 (2.33% of all instructions)
  call_indirect:     16 (0.05% of all instructions, 1.96% of all calls)

Globals:
  #0 i32
     init: i32.const 75616
      70 × global.get   195 × global.set   265 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 75616
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 10080
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 5332
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["optarg"]
     init: i32.const 7968
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["optind"]
     init: i32.const 6328
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["stdin"]
     init: i32.const 5336
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["file_handler_table"]
     init: i32.const 6240
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["stdout"]
     init: i32.const 5340
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["__environ"]
     init: i32.const 6812
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["___environ"]
     init: i32.const 6812
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["_environ"]
     init: i32.const 6812
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["environ"]
     init: i32.const 6812
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__progname"]
     init: i32.const 6816
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__progname_full"]
     init: i32.const 6820
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__libc"]
     init: i32.const 6824
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__hwcap"]
     init: i32.const 6888
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["__sysinfo"]
     init: i32.const 6892
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["program_invocation_short_name"]
     init: i32.const 6816
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["program_invocation_name"]
     init: i32.const 6820
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__malloc_replaced"]
     init: i32.const 7944
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__optreset"]
     init: i32.const 7960
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__optpos"]
     init: i32.const 7964
       0 × global.get     0 × global.set     0 total
  #24 i32
     export: ["optopt"]
     init: i32.const 7972
       0 × global.get     0 × global.set     0 total
  #25 i32
     export: ["opterr"]
     init: i32.const 6332
       0 × global.get     0 × global.set     0 total
  #26 i32
     export: ["optreset"]
     init: i32.const 7960
       0 × global.get     0 × global.set     0 total
  #27 i32
     export: ["__fsmu8"]
     init: i32.const 5104
       0 × global.get     0 × global.set     0 total
  #28 i32
     export: ["__stdin_used"]
     init: i32.const 6632
       0 × global.get     0 × global.set     0 total
  #29 i32
     export: ["__stdout_used"]
     init: i32.const 6784
       0 × global.get     0 × global.set     0 total
  #30 i32
     export: ["__stderr_used"]
     init: i32.const 6480
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     70 (38.89% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.56%) × [-9472]
    1  (0.56%) × [-8064]
    1  (0.56%) × [-1056]
    1  (0.56%) × [-320]
    1  (0.56%) × [-288]
    1  (0.56%) × [-192]
    1  (0.56%) × [-160]
    1  (0.56%) × [-112]
    1  (0.56%) × [-96]
    1  (0.56%) × [-80]
    2  (1.11%) × [-128]
    6  (3.33%) × [-32]
    7  (3.89%) × [-144]
   26 (14.44%) × [-16]
  129 (71.67%) × []
  functions with stack allocation total: 51 (28.33%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-9472]",-9472,9472
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-8064]",-8064,8064
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-1056]",-1056,1056
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-320]",-320,320
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-288]",-288,288
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-192]",-192,192
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-160]",-160,160
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-112]",-112,112
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-96]",-96,96
sp_csv_line:"gen_init_cpiollvm.wasm",1,0.5555556,"[-80]",-80,80
sp_csv_line:"gen_init_cpiollvm.wasm",2,1.1111112,"[-128]",-128,128
sp_csv_line:"gen_init_cpiollvm.wasm",6,3.3333333,"[-32]",-32,32
sp_csv_line:"gen_init_cpiollvm.wasm",7,3.8888888,"[-144]",-144,144
sp_csv_line:"gen_init_cpiollvm.wasm",26,14.444445,"[-16]",-16,16
sp_csv_line:"gen_init_cpiollvm.wasm",129,71.666664,"[]",0,0

Counts of function types (30 unique types):
    1  (0.53%) × [i32] -> [i64]
    1  (0.53%) × [i32, i32] -> [i64]
    1  (0.53%) × [i32, i32, i32] -> []
    1  (0.53%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.53%) × [i32, i32, i32, i64] -> [i64]
    1  (0.53%) × [i32, i64] -> []
    1  (0.53%) × [i32, i64, i32] -> [i64]
    1  (0.53%) × [i32, f32] -> []
    1  (0.53%) × [i32, f64] -> []
    1  (0.53%) × [i64, i64] -> [f32]
    1  (0.53%) × [i64, i64] -> [f64]
    1  (0.53%) × [f64] -> [f64]
    1  (0.53%) × [f64, i32] -> [f64]
    2  (1.06%) × [] -> [i32]
    2  (1.06%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    3  (1.60%) × [i32, i32, i32, i32] -> []
    4  (2.13%) × [i32, i32, i32] -> [i64]
    4  (2.13%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (2.13%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    4  (2.13%) × [i32, i64, i64, i32] -> []
    4  (2.13%) × [i64, i64] -> [i32]
    5  (2.66%) × [i32, i32, i32, i32] -> [i32]
    6  (3.19%) × [i32, i32] -> []
    7  (3.72%) × [i32, i64, i64, i64, i64] -> []
    7  (3.72%) × [i64, i64, i64, i64] -> [i32]
   12  (6.38%) × [] -> []
   19 (10.11%) × [i32] -> []
   28 (14.89%) × [i32, i32] -> [i32]
   32 (17.02%) × [i32] -> [i32]
   32 (17.02%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 9 (5.00% of all functions)

Table elements initialization:
         range: [    1,    6]   length:   6   unique funcs:    6   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               32
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
    11 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               32
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 11
  total classes: 4

CSV data for further analysis: gen_init_cpiollvm.wasm,34408,801,16,1.9583843,188,13,6,4,1,11,4,3,399,65,16.290728,65,16.290728,58,14.536341

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"gen_init_cpiollvm.wasm",0,0,1,"i32.load"
"gen_init_cpiollvm.wasm",1,7,1,"local.(get|tee)"
"gen_init_cpiollvm.wasm",2,1,3,"i32.load"
"gen_init_cpiollvm.wasm",3,5,11,"i32.load"
