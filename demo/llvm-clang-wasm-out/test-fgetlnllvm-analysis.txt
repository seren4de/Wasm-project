Input file: test-fgetlnllvm.wasm
  binary:    test-fgetlnllvm.wasm

Functions:           58
  Imported:           7
  Non-imported:      51
  Exported:          46

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 5.17% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5681
  call:             201 (3.54% of all instructions)
  call_indirect:     13 (0.23% of all instructions, 6.07% of all calls)

Globals:
  #0 i32
     init: i32.const 69040
      9 × global.get   27 × global.set   36 total (25/75% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 69040
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 3500
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stdin"]
     init: i32.const 3344
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 1028
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 1032
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 1096
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 1100
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 1028
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 2152
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 3496
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 2168
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 2172
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (17.65% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.96%) × [-128]
    7 (13.73%) × [-16]
   43 (84.31%) × []
  functions with stack allocation total: 8 (15.69%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test-fgetlnllvm.wasm",1,1.9607843,"[-128]",-128,128
sp_csv_line:"test-fgetlnllvm.wasm",7,13.725491,"[-16]",-16,16
sp_csv_line:"test-fgetlnllvm.wasm",43,84.31373,"[]",0,0

Counts of function types (14 unique types):
    1  (1.72%) × [i32, i32, i32, i32] -> []
    1  (1.72%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.72%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.72%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.72%) × [i32, i64, i32] -> [i64]
    2  (3.45%) × [i32, i32] -> []
    2  (3.45%) × [i32, i32, i32, i32] -> [i32]
    2  (3.45%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (5.17%) × [] -> [i32]
    6 (10.34%) × [] -> []
    6 (10.34%) × [i32, i32] -> [i32]
    7 (12.07%) × [i32, i32, i32] -> [i32]
   11 (18.97%) × [i32] -> []
   14 (24.14%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (9.80% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 7
  total classes: 3

CSV data for further analysis: test-fgetlnllvm.wasm,5681,201,13,6.074766,58,3,3,3,1,7,4.333333333333333,5,68,13,19.117647,13,19.117647,13,19.117647

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test-fgetlnllvm.wasm",0,1,1,"i32.load"
"test-fgetlnllvm.wasm",1,1,5,"i32.load"
"test-fgetlnllvm.wasm",2,1,7,"i32.load"
