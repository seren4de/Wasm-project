Input file: 765llvm.wasm
  binary:    765llvm.wasm

Functions:          110
  Imported:           7
  Non-imported:     103
  Exported:          95

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 5.45% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16797
  call:             432 (2.57% of all instructions)
  call_indirect:     17 (0.10% of all instructions, 3.79% of all calls)

Globals:
  #0 i32
     init: i32.const 73024
     27 × global.get   84 × global.set  111 total (24/76% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 73024
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 7480
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["discl"]
     init: i32.const 1680
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["aniheader"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["shellcode"]
     init: i32.const 1264
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["html"]
     init: i32.const 1824
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__progname"]
     init: i32.const 5280
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__progname_full"]
     init: i32.const 5284
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__libc"]
     init: i32.const 5288
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__hwcap"]
     init: i32.const 5352
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__sysinfo"]
     init: i32.const 5356
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["program_invocation_short_name"]
     init: i32.const 5280
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["program_invocation_name"]
     init: i32.const 5284
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__malloc_replaced"]
     init: i32.const 6408
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["__stdin_used"]
     init: i32.const 6424
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["__stdout_used"]
     init: i32.const 2288
      0 × global.get    0 × global.set    0 total
  #18 i32
     export: ["__stderr_used"]
     init: i32.const 6424
      0 × global.get    0 × global.set    0 total
  #19 i32
     export: ["stdout"]
     init: i32.const 2824
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     27 (26.21% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.97%) × [-8064]
    1  (0.97%) × [-288]
    1  (0.97%) × [-160]
    1  (0.97%) × [-128]
    1  (0.97%) × [-112]
    1  (0.97%) × [-96]
    1  (0.97%) × [-32]
   17 (16.50%) × [-16]
   79 (76.70%) × []
  functions with stack allocation total: 24 (23.30%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"765llvm.wasm",1,0.9708738,"[-8064]",-8064,8064
sp_csv_line:"765llvm.wasm",1,0.9708738,"[-288]",-288,288
sp_csv_line:"765llvm.wasm",1,0.9708738,"[-160]",-160,160
sp_csv_line:"765llvm.wasm",1,0.9708738,"[-128]",-128,128
sp_csv_line:"765llvm.wasm",1,0.9708738,"[-112]",-112,112
sp_csv_line:"765llvm.wasm",1,0.9708738,"[-96]",-96,96
sp_csv_line:"765llvm.wasm",1,0.9708738,"[-32]",-32,32
sp_csv_line:"765llvm.wasm",17,16.504854,"[-16]",-16,16
sp_csv_line:"765llvm.wasm",79,76.69903,"[]",0,0

Counts of function types (20 unique types):
    1  (0.91%) × [i32, i32, i32] -> []
    1  (0.91%) × [i32, i32, i32, i32] -> []
    1  (0.91%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.91%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.91%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.91%) × [i32, i64, i32] -> [i64]
    1  (0.91%) × [i32, f64] -> []
    2  (1.82%) × [] -> [i32]
    3  (2.73%) × [i32, i32, i32, i32] -> [i32]
    3  (2.73%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.73%) × [i32, i64, i64, i32] -> []
    3  (2.73%) × [i32, i64, i64, i64, i64] -> []
    4  (3.64%) × [i32, i32] -> []
    4  (3.64%) × [i64, i64] -> [i32]
    7  (6.36%) × [i64, i64, i64, i64] -> [i32]
    8  (7.27%) × [] -> []
   14 (12.73%) × [i32] -> []
   14 (12.73%) × [i32, i32, i32] -> [i32]
   18 (16.36%) × [i32, i32] -> [i32]
   20 (18.18%) × [i32] -> [i32]

Functions with at least one call_indirect: 7 (6.80% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 10
  total classes: 4

CSV data for further analysis: 765llvm.wasm,16797,432,17,3.7861915,110,6,6,4,1,10,4.25,5,173,46,26.589596,46,26.589596,46,26.589596

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"765llvm.wasm",0,0,1,"i32.load"
"765llvm.wasm",1,1,1,"i32.load"
"765llvm.wasm",2,1,5,"i32.load"
"765llvm.wasm",3,4,10,"i32.load"
