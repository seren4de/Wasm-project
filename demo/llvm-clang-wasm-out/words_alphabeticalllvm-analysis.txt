Input file: words_alphabeticalllvm.wasm
  binary:    words_alphabeticalllvm.wasm

Functions:          121
  Imported:           7
  Non-imported:     114
  Exported:         106

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          4
  Of those, unique functions:     4 (i.e., at least 3.31% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17973
  call:             454 (2.53% of all instructions)
  call_indirect:     19 (0.11% of all instructions, 4.02% of all calls)

Globals:
  #0 i32
     init: i32.const 71360
     33 × global.get   96 × global.set  129 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 71360
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5816
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 2040
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 4648
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 4652
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 4656
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 4720
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 4724
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4648
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 4652
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 5776
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 5796
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 5792
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 4640
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     33 (28.95% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.88%) × [-8064]
    1  (0.88%) × [-288]
    1  (0.88%) × [-128]
    1  (0.88%) × [-112]
    1  (0.88%) × [-96]
    1  (0.88%) × [-32]
   17 (14.91%) × [-16]
   91 (79.82%) × []
  functions with stack allocation total: 23 (20.18%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"words_alphabeticalllvm.wasm",1,0.877193,"[-8064]",-8064,8064
sp_csv_line:"words_alphabeticalllvm.wasm",1,0.877193,"[-288]",-288,288
sp_csv_line:"words_alphabeticalllvm.wasm",1,0.877193,"[-128]",-128,128
sp_csv_line:"words_alphabeticalllvm.wasm",1,0.877193,"[-112]",-112,112
sp_csv_line:"words_alphabeticalllvm.wasm",1,0.877193,"[-96]",-96,96
sp_csv_line:"words_alphabeticalllvm.wasm",1,0.877193,"[-32]",-32,32
sp_csv_line:"words_alphabeticalllvm.wasm",17,14.912281,"[-16]",-16,16
sp_csv_line:"words_alphabeticalllvm.wasm",91,79.82456,"[]",0,0

Counts of function types (20 unique types):
    1  (0.83%) × [i32, i32, i32] -> []
    1  (0.83%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.83%) × [i32, i64, i32] -> [i64]
    1  (0.83%) × [i32, f64] -> []
    2  (1.65%) × [i32, i32, i32, i32] -> []
    2  (1.65%) × [i32, i32, i32, i32] -> [i32]
    3  (2.48%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.48%) × [i32, i64, i64, i32] -> []
    3  (2.48%) × [i32, i64, i64, i64, i64] -> []
    4  (3.31%) × [] -> [i32]
    4  (3.31%) × [i64, i64] -> [i32]
    5  (4.13%) × [i32, i32] -> []
    7  (5.79%) × [i64, i64, i64, i64] -> [i32]
   10  (8.26%) × [] -> []
   11  (9.09%) × [i32, i32, i32] -> [i32]
   16 (13.22%) × [i32] -> []
   20 (16.53%) × [i32, i32] -> [i32]
   25 (20.66%) × [i32] -> [i32]

Functions with at least one call_indirect: 9 (7.89% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    12 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 12
  total classes: 4

CSV data for further analysis: words_alphabeticalllvm.wasm,17973,454,19,4.0169134,121,4,4,4,1,12,4.75,5,172,30,17.44186,30,17.44186,30,17.44186

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"words_alphabeticalllvm.wasm",0,0,1,"i32.load"
"words_alphabeticalllvm.wasm",1,1,1,"i32.load"
"words_alphabeticalllvm.wasm",2,1,5,"i32.load"
"words_alphabeticalllvm.wasm",3,2,12,"i32.load"
