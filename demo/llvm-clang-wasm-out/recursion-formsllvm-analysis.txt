Input file: recursion-formsllvm.wasm
  binary:    recursion-formsllvm.wasm

Functions:           88
  Imported:           4
  Non-imported:      84
  Exported:          81

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 11.36% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13941
  call:             259 (1.86% of all instructions)
  call_indirect:     13 (0.09% of all instructions, 4.78% of all calls)

Globals:
  #0 i32
     init: i32.const 70640
     38 × global.get   90 × global.set  128 total (30/70% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70640
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5100
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["base_arg2"]
     init: i32.const 3728
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["fun_set"]
     init: i32.const 4896
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["idx"]
     init: i32.const 3736
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["stop_arg"]
     init: i32.const 3732
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__progname"]
     init: i32.const 3740
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__progname_full"]
     init: i32.const 3744
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__libc"]
     init: i32.const 3748
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__hwcap"]
     init: i32.const 3812
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__sysinfo"]
     init: i32.const 3816
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3740
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["program_invocation_name"]
     init: i32.const 3744
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__stdin_used"]
     init: i32.const 4880
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["__stdout_used"]
     init: i32.const 5096
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["__stderr_used"]
     init: i32.const 4880
      0 × global.get    0 × global.set    0 total
  #18 i32
     export: ["stdout"]
     init: i32.const 1272
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     38 (45.24% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.19%) × [-8064]
    1  (1.19%) × [-288]
    1  (1.19%) × [-112]
    1  (1.19%) × [-96]
    1  (1.19%) × [-32]
   13 (15.48%) × [-16]
   66 (78.57%) × []
  functions with stack allocation total: 18 (21.43%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"recursion-formsllvm.wasm",1,1.1904762,"[-8064]",-8064,8064
sp_csv_line:"recursion-formsllvm.wasm",1,1.1904762,"[-288]",-288,288
sp_csv_line:"recursion-formsllvm.wasm",1,1.1904762,"[-112]",-112,112
sp_csv_line:"recursion-formsllvm.wasm",1,1.1904762,"[-96]",-96,96
sp_csv_line:"recursion-formsllvm.wasm",1,1.1904762,"[-32]",-32,32
sp_csv_line:"recursion-formsllvm.wasm",13,15.476191,"[-16]",-16,16
sp_csv_line:"recursion-formsllvm.wasm",66,78.57143,"[]",0,0

Counts of function types (19 unique types):
    1  (1.14%) × [i32, i32, i32] -> []
    1  (1.14%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.14%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.14%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.14%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.14%) × [i32, i64, i32] -> [i64]
    1  (1.14%) × [i32, f64] -> []
    2  (2.27%) × [] -> [i32]
    2  (2.27%) × [i32, i32] -> []
    2  (2.27%) × [i32, i32, i32, i32] -> [i32]
    3  (3.41%) × [i32, i64, i64, i32] -> []
    3  (3.41%) × [i32, i64, i64, i64, i64] -> []
    4  (4.55%) × [i64, i64] -> [i32]
    7  (7.95%) × [] -> []
    7  (7.95%) × [i32] -> []
    7  (7.95%) × [i64, i64, i64, i64] -> [i32]
    8  (9.09%) × [i32, i32, i32] -> [i32]
   17 (19.32%) × [i32, i32] -> [i32]
   19 (21.59%) × [i32] -> [i32]

Functions with at least one call_indirect: 6 (7.14% of all functions)

Table elements initialization:
         range: [    1,    6]   length:   6   unique funcs:    6   type: [i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  4 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 8
  total classes: 4

CSV data for further analysis: recursion-formsllvm.wasm,13941,259,13,4.779412,88,10,3,4,1,8,3.25,3,93,26,27.95699,26,27.95699,19,20.430107

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"recursion-formsllvm.wasm",0,0,1,"i32.load"
"recursion-formsllvm.wasm",1,7,1,"local.(get|tee)"
"recursion-formsllvm.wasm",2,1,3,"i32.load"
"recursion-formsllvm.wasm",3,2,8,"i32.load"
