Input file: nbtestllvm.wasm
  binary:    nbtestllvm.wasm

Functions:           45
  Imported:           4
  Non-imported:      41
  Exported:          41

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 6.67% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      3265
  call:              99 (3.03% of all instructions)
  call_indirect:     12 (0.37% of all instructions, 10.81% of all calls)

Globals:
  #0 i32
     init: i32.const 72848
      7 × global.get   24 × global.set   31 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72848
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 7300
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["buffer"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 5140
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 5144
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 5148
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 5212
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 5216
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 5140
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 5144
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdin_used"]
     init: i32.const 5128
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdout_used"]
     init: i32.const 5128
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stderr_used"]
     init: i32.const 7296
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["stderr"]
     init: i32.const 7148
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:      7 (17.07% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (2.44%) × [-32]
    5 (12.20%) × [-16]
   35 (85.37%) × []
  functions with stack allocation total: 6 (14.63%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"nbtestllvm.wasm",1,2.4390244,"[-32]",-32,32
sp_csv_line:"nbtestllvm.wasm",5,12.195122,"[-16]",-16,16
sp_csv_line:"nbtestllvm.wasm",35,85.36585,"[]",0,0

Counts of function types (10 unique types):
    1  (2.22%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (2.22%) × [i32, i64, i32] -> [i64]
    2  (4.44%) × [] -> [i32]
    2  (4.44%) × [i32, i32, i32, i32] -> [i32]
    2  (4.44%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    6 (13.33%) × [] -> []
    6 (13.33%) × [i32] -> []
    6 (13.33%) × [i32, i32, i32] -> [i32]
    9 (20.00%) × [i32, i32] -> [i32]
   10 (22.22%) × [i32] -> [i32]

Functions with at least one call_indirect: 5 (12.20% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     8 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 8
  total classes: 3

CSV data for further analysis: nbtestllvm.wasm,3265,99,12,10.810811,45,3,2,3,1,8,4,3,57,11,19.298246,11,19.298246,11,19.298246

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"nbtestllvm.wasm",0,0,1,"i32.load"
"nbtestllvm.wasm",1,1,3,"i32.load"
"nbtestllvm.wasm",2,1,8,"i32.load"
