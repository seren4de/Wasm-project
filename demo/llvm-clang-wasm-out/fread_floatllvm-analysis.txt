Input file: fread_floatllvm.wasm
  binary:    fread_floatllvm.wasm

Functions:           90
  Imported:           5
  Non-imported:      85
  Exported:          83

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 5.56% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14752
  call:             311 (2.11% of all instructions)
  call_indirect:     21 (0.14% of all instructions, 6.33% of all calls)

Globals:
  #0 i32
     init: i32.const 70768
     23 × global.get   75 × global.set   98 total (23/77% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70768
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 5220
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 3196
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 3760
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 3764
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 3768
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 3832
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 3836
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 3760
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 3764
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__stdin_used"]
     init: i32.const 3860
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdout_used"]
     init: i32.const 5216
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stderr_used"]
     init: i32.const 5064
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["stdout"]
     init: i32.const 3200
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     23 (27.06% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.18%) × [-8064]
    1  (1.18%) × [-288]
    1  (1.18%) × [-112]
    1  (1.18%) × [-96]
    1  (1.18%) × [-32]
   17 (20.00%) × [-16]
   63 (74.12%) × []
  functions with stack allocation total: 22 (25.88%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"fread_floatllvm.wasm",1,1.1764706,"[-8064]",-8064,8064
sp_csv_line:"fread_floatllvm.wasm",1,1.1764706,"[-288]",-288,288
sp_csv_line:"fread_floatllvm.wasm",1,1.1764706,"[-112]",-112,112
sp_csv_line:"fread_floatllvm.wasm",1,1.1764706,"[-96]",-96,96
sp_csv_line:"fread_floatllvm.wasm",1,1.1764706,"[-32]",-32,32
sp_csv_line:"fread_floatllvm.wasm",17,20,"[-16]",-16,16
sp_csv_line:"fread_floatllvm.wasm",63,74.117645,"[]",0,0

Counts of function types (20 unique types):
    1  (1.11%) × [i32, i32, i32] -> []
    1  (1.11%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.11%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.11%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.11%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (1.11%) × [i32, i64, i32] -> [i64]
    1  (1.11%) × [i32, f64] -> []
    2  (2.22%) × [] -> [i32]
    2  (2.22%) × [i32, i32] -> []
    2  (2.22%) × [i32, i64, i32] -> [i32]
    3  (3.33%) × [i32, i32, i32, i32] -> [i32]
    3  (3.33%) × [i32, i64, i64, i32] -> []
    3  (3.33%) × [i32, i64, i64, i64, i64] -> []
    4  (4.44%) × [i64, i64] -> [i32]
    6  (6.67%) × [i32] -> []
    7  (7.78%) × [i64, i64, i64, i64] -> [i32]
    8  (8.89%) × [] -> []
   12 (13.33%) × [i32, i32, i32] -> [i32]
   15 (16.67%) × [i32] -> [i32]
   16 (17.78%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (12.94% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    14 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 6
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 14
  total classes: 3

CSV data for further analysis: fread_floatllvm.wasm,14752,311,21,6.325301,90,5,4,3,1,14,7,6,182,48,26.373627,48,26.373627,48,26.373627

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"fread_floatllvm.wasm",0,0,1,"i32.load"
"fread_floatllvm.wasm",1,1,6,"i32.load"
"fread_floatllvm.wasm",2,3,14,"i32.load"
