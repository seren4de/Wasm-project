Input file: showjournalllvm.wasm
  binary:    showjournalllvm.wasm

Functions:          119
  Imported:           7
  Non-imported:     112
  Exported:          99

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          6
  Of those, unique functions:     6 (i.e., at least 5.04% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17976
  call:             455 (2.53% of all instructions)
  call_indirect:     28 (0.16% of all instructions, 5.80% of all calls)

Globals:
  #0 i32
     init: i32.const 72064
     30 × global.get   93 × global.set  123 total (24/76% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 72064
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 6524
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 1544
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["__progname"]
     init: i32.const 4012
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["__progname_full"]
     init: i32.const 4016
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["__libc"]
     init: i32.const 4020
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["__hwcap"]
     init: i32.const 4084
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__sysinfo"]
     init: i32.const 4088
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4012
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["program_invocation_name"]
     init: i32.const 4016
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__malloc_replaced"]
     init: i32.const 5144
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__stdin_used"]
     init: i32.const 5160
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["__stdout_used"]
     init: i32.const 6520
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["__stderr_used"]
     init: i32.const 6368
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["stdout"]
     init: i32.const 1548
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     30 (26.79% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.89%) × [-8064]
    1  (0.89%) × [-288]
    1  (0.89%) × [-160]
    1  (0.89%) × [-128]
    1  (0.89%) × [-112]
    1  (0.89%) × [-96]
    1  (0.89%) × [-32]
   18 (16.07%) × [-16]
   87 (77.68%) × []
  functions with stack allocation total: 25 (22.32%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"showjournalllvm.wasm",1,0.89285713,"[-8064]",-8064,8064
sp_csv_line:"showjournalllvm.wasm",1,0.89285713,"[-288]",-288,288
sp_csv_line:"showjournalllvm.wasm",1,0.89285713,"[-160]",-160,160
sp_csv_line:"showjournalllvm.wasm",1,0.89285713,"[-128]",-128,128
sp_csv_line:"showjournalllvm.wasm",1,0.89285713,"[-112]",-112,112
sp_csv_line:"showjournalllvm.wasm",1,0.89285713,"[-96]",-96,96
sp_csv_line:"showjournalllvm.wasm",1,0.89285713,"[-32]",-32,32
sp_csv_line:"showjournalllvm.wasm",18,16.071428,"[-16]",-16,16
sp_csv_line:"showjournalllvm.wasm",87,77.67857,"[]",0,0

Counts of function types (22 unique types):
    1  (0.84%) × [i32, i32, i32] -> []
    1  (0.84%) × [i32, i32, i32, i32] -> []
    1  (0.84%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.84%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.84%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.84%) × [i32, i64, i32] -> [i64]
    1  (0.84%) × [i32, f64] -> []
    2  (1.68%) × [] -> [i32]
    2  (1.68%) × [i32] -> [i64]
    2  (1.68%) × [i32, i64, i32] -> [i32]
    3  (2.52%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (2.52%) × [i32, i64, i64, i32] -> []
    3  (2.52%) × [i32, i64, i64, i64, i64] -> []
    4  (3.36%) × [i32, i32] -> []
    4  (3.36%) × [i64, i64] -> [i32]
    5  (4.20%) × [i32, i32, i32, i32] -> [i32]
    7  (5.88%) × [i64, i64, i64, i64] -> [i32]
   10  (8.40%) × [] -> []
   14 (11.76%) × [i32] -> []
   16 (13.45%) × [i32, i32] -> [i32]
   16 (13.45%) × [i32, i32, i32] -> [i32]
   21 (17.65%) × [i32] -> [i32]

Functions with at least one call_indirect: 15 (13.39% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    2,    3]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    5,    6]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  4 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    15 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     8 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #3
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 8
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 15
  total classes: 5

CSV data for further analysis: showjournalllvm.wasm,17976,455,28,5.7971015,119,6,6,5,1,15,5.6,3,282,72,25.531916,72,25.531916,69,24.468084

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"showjournalllvm.wasm",0,0,1,"i32.load"
"showjournalllvm.wasm",1,1,1,"i32.load"
"showjournalllvm.wasm",2,1,3,"local.(get|tee)"
"showjournalllvm.wasm",3,1,8,"i32.load"
"showjournalllvm.wasm",4,4,15,"i32.load"
