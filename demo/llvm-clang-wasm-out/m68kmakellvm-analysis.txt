Input file: m68kmakellvm.wasm
  binary:    m68kmakellvm.wasm

Functions:          149
  Imported:           7
  Non-imported:     142
  Exported:         132

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          7
  Of those, unique functions:     7 (i.e., at least 4.70% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     29995
  call:             695 (2.32% of all instructions)
  call_indirect:     33 (0.11% of all instructions, 4.53% of all calls)

Globals:
  #0 i32
     init: i32.const 357104
      59 × global.get   149 × global.set   208 total (28/72% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 357104
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 291568
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 290972
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["g_line_number"]
     init: i32.const 2048
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["g_input_filename"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["g_prototype_file"]
     init: i32.const 2372
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["g_table_file"]
     init: i32.const 2376
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["g_input_file"]
     init: i32.const 2368
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["g_size_select_table"]
     init: i32.const 285152
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["g_moves_cycle_table"]
     init: i32.const 286240
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["g_clr_cycle_table"]
     init: i32.const 286400
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["g_ea_cycle_table"]
     init: i32.const 285296
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["g_jmp_cycle_table"]
     init: i32.const 285920
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["g_jsr_cycle_table"]
     init: i32.const 285984
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["g_lea_cycle_table"]
     init: i32.const 286048
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["g_pea_cycle_table"]
     init: i32.const 286112
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["g_movem_cycle_table"]
     init: i32.const 286176
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["g_opcode_input_table"]
     init: i32.const 2400
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["g_opcode_output_table_length"]
     init: i32.const 2388
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["g_opcode_output_table"]
     init: i32.const 72400
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["g_ea_info_table"]
     init: i32.const 284720
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["g_num_functions"]
     init: i32.const 2380
       0 × global.get     0 × global.set     0 total
  #24 i32
     export: ["g_cc_table"]
     init: i32.const 285024
       0 × global.get     0 × global.set     0 total
  #25 i32
     export: ["g_num_primitives"]
     init: i32.const 2384
       0 × global.get     0 × global.set     0 total
  #26 i32
     export: ["__progname"]
     init: i32.const 282400
       0 × global.get     0 × global.set     0 total
  #27 i32
     export: ["__progname_full"]
     init: i32.const 282404
       0 × global.get     0 × global.set     0 total
  #28 i32
     export: ["__libc"]
     init: i32.const 282408
       0 × global.get     0 × global.set     0 total
  #29 i32
     export: ["__hwcap"]
     init: i32.const 282472
       0 × global.get     0 × global.set     0 total
  #30 i32
     export: ["__sysinfo"]
     init: i32.const 282476
       0 × global.get     0 × global.set     0 total
  #31 i32
     export: ["program_invocation_short_name"]
     init: i32.const 282400
       0 × global.get     0 × global.set     0 total
  #32 i32
     export: ["program_invocation_name"]
     init: i32.const 282404
       0 × global.get     0 × global.set     0 total
  #33 i32
     export: ["__malloc_replaced"]
     init: i32.const 283528
       0 × global.get     0 × global.set     0 total
  #34 i32
     export: ["__stdin_used"]
     init: i32.const 283544
       0 × global.get     0 × global.set     0 total
  #35 i32
     export: ["__stdout_used"]
     init: i32.const 2352
       0 × global.get     0 × global.set     0 total
  #36 i32
     export: ["__stderr_used"]
     init: i32.const 2200
       0 × global.get     0 × global.set     0 total
  #37 i32
     export: ["stdout"]
     init: i32.const 290976
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     59 (41.55% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.70%) × [-8064]
    1  (0.70%) × [-1056]
    1  (0.70%) × [-736]
    1  (0.70%) × [-688]
    1  (0.70%) × [-288]
    1  (0.70%) × [-160]
    1  (0.70%) × [-128]
    1  (0.70%) × [-112]
    1  (0.70%) × [-96]
    1  (0.70%) × [-32]
   20 (14.08%) × [-16]
  112 (78.87%) × []
  functions with stack allocation total: 30 (21.13%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-8064]",-8064,8064
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-1056]",-1056,1056
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-736]",-736,736
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-688]",-688,688
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-288]",-288,288
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-160]",-160,160
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-128]",-128,128
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-112]",-112,112
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-96]",-96,96
sp_csv_line:"m68kmakellvm.wasm",1,0.70422536,"[-32]",-32,32
sp_csv_line:"m68kmakellvm.wasm",20,14.084507,"[-16]",-16,16
sp_csv_line:"m68kmakellvm.wasm",112,78.87324,"[]",0,0

Counts of function types (22 unique types):
    1  (0.67%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.67%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.67%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> []
    1  (0.67%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.67%) × [i32, i64, i32] -> [i64]
    1  (0.67%) × [i32, f64] -> []
    2  (1.34%) × [i32, i32, i32, i32, i32] -> []
    3  (2.01%) × [] -> [i32]
    3  (2.01%) × [i32, i32, i32, i32] -> []
    3  (2.01%) × [i32, i64, i64, i32] -> []
    3  (2.01%) × [i32, i64, i64, i64, i64] -> []
    4  (2.68%) × [i32, i32, i32] -> []
    4  (2.68%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (2.68%) × [i64, i64] -> [i32]
    5  (3.36%) × [i32, i32, i32, i32] -> [i32]
    7  (4.70%) × [i64, i64, i64, i64] -> [i32]
   10  (6.71%) × [] -> []
   10  (6.71%) × [i32, i32] -> []
   17 (11.41%) × [i32] -> []
   20 (13.42%) × [i32, i32, i32] -> [i32]
   24 (16.11%) × [i32] -> [i32]
   24 (16.11%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (8.45% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    3,    4]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    6,    7]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    13 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  5 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 5
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 13
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 13
  total classes: 5

CSV data for further analysis: m68kmakellvm.wasm,29995,695,33,4.532967,149,7,6,5,1,13,6.6,5,611,71,11.620295,71,11.620295,58,9.492635

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"m68kmakellvm.wasm",0,0,1,"i32.load"
"m68kmakellvm.wasm",1,1,1,"i32.load"
"m68kmakellvm.wasm",2,1,5,"i32.load"
"m68kmakellvm.wasm",3,1,13,"local.(get|tee)"
"m68kmakellvm.wasm",4,4,13,"i32.load"
