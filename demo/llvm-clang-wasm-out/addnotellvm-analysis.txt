Input file: addnotellvm.wasm
  binary:    addnotellvm.wasm

Functions:           74
  Imported:           4
  Non-imported:      70
  Exported:          68

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          3
  Of those, unique functions:     3 (i.e., at least 4.05% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     15261
  call:             257 (1.68% of all instructions)
  call_indirect:     13 (0.09% of all instructions, 4.81% of all calls)

Globals:
  #0 i32
     init: i32.const 70128
     20 × global.get   62 × global.set   82 total (24/76% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 70128
      0 × global.get    0 × global.set    0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 4580
      0 × global.get    0 × global.set    0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #4 i32
     export: ["stderr"]
     init: i32.const 3404
      0 × global.get    0 × global.set    0 total
  #5 i32
     export: ["buf"]
     init: i32.const 3968
      0 × global.get    0 × global.set    0 total
  #6 i32
     export: ["elf_magic"]
     init: i32.const 1088
      0 × global.get    0 × global.set    0 total
  #7 i32
     export: ["descr"]
     init: i32.const 1024
      0 × global.get    0 × global.set    0 total
  #8 i32
     export: ["rpanote"]
     init: i32.const 1056
      0 × global.get    0 × global.set    0 total
  #9 i32
     export: ["__progname"]
     init: i32.const 4500
      0 × global.get    0 × global.set    0 total
  #10 i32
     export: ["__progname_full"]
     init: i32.const 4504
      0 × global.get    0 × global.set    0 total
  #11 i32
     export: ["__libc"]
     init: i32.const 4508
      0 × global.get    0 × global.set    0 total
  #12 i32
     export: ["__hwcap"]
     init: i32.const 4572
      0 × global.get    0 × global.set    0 total
  #13 i32
     export: ["__sysinfo"]
     init: i32.const 4576
      0 × global.get    0 × global.set    0 total
  #14 i32
     export: ["program_invocation_short_name"]
     init: i32.const 4500
      0 × global.get    0 × global.set    0 total
  #15 i32
     export: ["program_invocation_name"]
     init: i32.const 4504
      0 × global.get    0 × global.set    0 total
  #16 i32
     export: ["__stdin_used"]
     init: i32.const 4488
      0 × global.get    0 × global.set    0 total
  #17 i32
     export: ["__stdout_used"]
     init: i32.const 4488
      0 × global.get    0 × global.set    0 total
  #18 i32
     export: ["__stderr_used"]
     init: i32.const 1240
      0 × global.get    0 × global.set    0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     20 (28.57% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (1.43%) × [-8064]
    1  (1.43%) × [-288]
    1  (1.43%) × [-112]
    1  (1.43%) × [-96]
    2  (2.86%) × [-32]
   13 (18.57%) × [-16]
   51 (72.86%) × []
  functions with stack allocation total: 19 (27.14%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"addnotellvm.wasm",1,1.4285715,"[-8064]",-8064,8064
sp_csv_line:"addnotellvm.wasm",1,1.4285715,"[-288]",-288,288
sp_csv_line:"addnotellvm.wasm",1,1.4285715,"[-112]",-112,112
sp_csv_line:"addnotellvm.wasm",1,1.4285715,"[-96]",-96,96
sp_csv_line:"addnotellvm.wasm",2,2.857143,"[-32]",-32,32
sp_csv_line:"addnotellvm.wasm",13,18.571428,"[-16]",-16,16
sp_csv_line:"addnotellvm.wasm",51,72.85714,"[]",0,0

Counts of function types (18 unique types):
    1  (1.35%) × [i32, i32, i32] -> []
    1  (1.35%) × [i32, i32, i32, i32, i32] -> [i32]
    1  (1.35%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.35%) × [i32, f64] -> []
    2  (2.70%) × [] -> [i32]
    2  (2.70%) × [i32, i32] -> []
    2  (2.70%) × [i32, i32, i32, i32] -> [i32]
    2  (2.70%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    2  (2.70%) × [i32, i64, i32] -> [i64]
    3  (4.05%) × [i32, i64, i64, i32] -> []
    3  (4.05%) × [i32, i64, i64, i64, i64] -> []
    4  (5.41%) × [i64, i64] -> [i32]
    6  (8.11%) × [] -> []
    6  (8.11%) × [i32] -> []
    7  (9.46%) × [i64, i64, i64, i64] -> [i32]
    8 (10.81%) × [i32] -> [i32]
   11 (14.86%) × [i32, i32, i32] -> [i32]
   12 (16.22%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 6 (8.57% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
  3 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
     9 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 9
  total classes: 3

CSV data for further analysis: addnotellvm.wasm,15261,257,13,4.814815,74,3,2,3,1,9,4.333333333333333,3,111,12,10.810811,12,10.810811,12,10.810811

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"addnotellvm.wasm",0,0,1,"i32.load"
"addnotellvm.wasm",1,1,3,"i32.load"
"addnotellvm.wasm",2,1,9,"i32.load"
