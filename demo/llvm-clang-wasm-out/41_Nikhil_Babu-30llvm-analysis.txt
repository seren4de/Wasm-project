Input file: 41_Nikhil_Babu-30llvm.wasm
  binary:    41_Nikhil_Babu-30llvm.wasm

Functions:          119
  Imported:           7
  Non-imported:     112
  Exported:         104

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:          5
  Of those, unique functions:     5 (i.e., at least 4.20% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26043
  call:             581 (2.23% of all instructions)
  call_indirect:     14 (0.05% of all instructions, 2.35% of all calls)

Globals:
  #0 i32
     init: i32.const 114224
      39 × global.get   112 × global.set   151 total (26/74% split)
  #1 i32
     export: ["__heap_base"]
     init: i32.const 114224
       0 × global.get     0 × global.set     0 total
  #2 i32
     export: ["__data_end"]
     init: i32.const 48688
       0 × global.get     0 × global.set     0 total
  #3 i32
     export: ["__dso_handle"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #4 i32
     export: ["n"]
     init: i32.const 1360
       0 × global.get     0 × global.set     0 total
  #5 i32
     export: ["state"]
     init: i32.const 1376
       0 × global.get     0 × global.set     0 total
  #6 i32
     export: ["initial"]
     init: i32.const 1024
       0 × global.get     0 × global.set     0 total
  #7 i32
     export: ["waiting"]
     init: i32.const 1028
       0 × global.get     0 × global.set     0 total
  #8 i32
     export: ["visited"]
     init: i32.const 1032
       0 × global.get     0 × global.set     0 total
  #9 i32
     export: ["adj"]
     init: i32.const 1776
       0 × global.get     0 × global.set     0 total
  #10 i32
     export: ["rear"]
     init: i32.const 1040
       0 × global.get     0 × global.set     0 total
  #11 i32
     export: ["front"]
     init: i32.const 1036
       0 × global.get     0 × global.set     0 total
  #12 i32
     export: ["queue"]
     init: i32.const 41776
       0 × global.get     0 × global.set     0 total
  #13 i32
     export: ["__progname"]
     init: i32.const 44264
       0 × global.get     0 × global.set     0 total
  #14 i32
     export: ["__progname_full"]
     init: i32.const 44268
       0 × global.get     0 × global.set     0 total
  #15 i32
     export: ["__libc"]
     init: i32.const 44272
       0 × global.get     0 × global.set     0 total
  #16 i32
     export: ["__hwcap"]
     init: i32.const 44336
       0 × global.get     0 × global.set     0 total
  #17 i32
     export: ["__sysinfo"]
     init: i32.const 44340
       0 × global.get     0 × global.set     0 total
  #18 i32
     export: ["program_invocation_short_name"]
     init: i32.const 44264
       0 × global.get     0 × global.set     0 total
  #19 i32
     export: ["program_invocation_name"]
     init: i32.const 44268
       0 × global.get     0 × global.set     0 total
  #20 i32
     export: ["__malloc_replaced"]
     init: i32.const 45400
       0 × global.get     0 × global.set     0 total
  #21 i32
     export: ["__fsmu8"]
     init: i32.const 48368
       0 × global.get     0 × global.set     0 total
  #22 i32
     export: ["__stdin_used"]
     init: i32.const 1344
       0 × global.get     0 × global.set     0 total
  #23 i32
     export: ["__stdout_used"]
     init: i32.const 1192
       0 × global.get     0 × global.set     0 total
  #24 i32
     export: ["__stderr_used"]
     init: i32.const 43216
       0 × global.get     0 × global.set     0 total
  #25 i32
     export: ["stdout"]
     init: i32.const 45580
       0 × global.get     0 × global.set     0 total
  #26 i32
     export: ["stdin"]
     init: i32.const 48024
       0 × global.get     0 × global.set     0 total

Likely the stack pointer:       Global #0
Functions using stack pointer:     39 (34.82% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.89%) × [-9472]
    1  (0.89%) × [-8064]
    1  (0.89%) × [-320]
    1  (0.89%) × [-288]
    1  (0.89%) × [-192]
    1  (0.89%) × [-112]
    1  (0.89%) × [-96]
    1  (0.89%) × [-80]
    2  (1.79%) × [-128]
    3  (2.68%) × [-32]
   19 (16.96%) × [-16]
   80 (71.43%) × []
  functions with stack allocation total: 32 (28.57%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-9472]",-9472,9472
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-8064]",-8064,8064
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-320]",-320,320
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-288]",-288,288
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-192]",-192,192
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-112]",-112,112
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-96]",-96,96
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",1,0.89285713,"[-80]",-80,80
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",2,1.7857143,"[-128]",-128,128
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",3,2.6785715,"[-32]",-32,32
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",19,16.964285,"[-16]",-16,16
sp_csv_line:"41_Nikhil_Babu-30llvm.wasm",80,71.42857,"[]",0,0

Counts of function types (28 unique types):
    1  (0.84%) × [i32, i32] -> [i64]
    1  (0.84%) × [i32, i32, i32] -> []
    1  (0.84%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.84%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.84%) × [i32, i32, i32, i32, i32, i64] -> [i32]
    1  (0.84%) × [i32, i32, i32, i64] -> [i64]
    1  (0.84%) × [i32, i64] -> []
    1  (0.84%) × [i32, i64, i32] -> [i64]
    1  (0.84%) × [i32, f32] -> []
    1  (0.84%) × [i32, f64] -> []
    1  (0.84%) × [i64, i64] -> [f32]
    1  (0.84%) × [i64, i64] -> [f64]
    1  (0.84%) × [f64] -> [f64]
    1  (0.84%) × [f64, i32] -> [f64]
    2  (1.68%) × [i32, i32, i32, i32] -> []
    3  (2.52%) × [i32, i32, i32, i32] -> [i32]
    3  (2.52%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.36%) × [i32, i32] -> []
    4  (3.36%) × [i32, i64, i64, i32] -> []
    4  (3.36%) × [i64, i64] -> [i32]
    5  (4.20%) × [] -> [i32]
    7  (5.88%) × [i32, i64, i64, i64, i64] -> []
    7  (5.88%) × [i64, i64, i64, i64] -> [i32]
   11  (9.24%) × [] -> []
   12 (10.08%) × [i32, i32] -> [i32]
   12 (10.08%) × [i32, i32, i32] -> [i32]
   14 (11.76%) × [i32] -> []
   17 (14.29%) × [i32] -> [i32]

Functions with at least one call_indirect: 7 (6.25% of all functions)

Table elements initialization:
         range: [    1,    1]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    2,    2]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [    5,    5]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:   i32.load   type [] -> []
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    0
         functions matching by type and present in permissable table index range:              0
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     3 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
  3 call_indirect patterns in total


call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [] -> []
    start idx: None, end idx: None
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i64, i32] -> [i64]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 3
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 10
  total classes: 3

CSV data for further analysis: 41_Nikhil_Babu-30llvm.wasm,26043,581,14,2.3529413,119,5,4,3,1,10,4.666666666666667,3,134,33,24.626865,33,24.626865,33,24.626865

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"41_Nikhil_Babu-30llvm.wasm",0,0,1,"i32.load"
"41_Nikhil_Babu-30llvm.wasm",1,1,3,"i32.load"
"41_Nikhil_Babu-30llvm.wasm",2,3,10,"i32.load"
