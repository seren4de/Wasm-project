Input file: 6195cheerp.wasm
  binary:    6195cheerp.wasm

Functions:           90
  Imported:           4
  Non-imported:      86
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 15.56% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11563
  call:             183 (1.58% of all instructions)
  call_indirect:     29 (0.25% of all instructions, 13.68% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     32 × global.get   85 × global.set  117 total (27/73% split)
  #1 i32
     init: i32.const 1048860
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048868
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1053252
     14 × global.get    0 × global.set   14 total (100/0% split)
  #4 i32
     init: i32.const 1048844
     13 × global.get    0 × global.set   13 total (100/0% split)
  #5 i32
     init: i32.const 1052888
     11 × global.get    0 × global.set   11 total (100/0% split)
  #6 i32
     init: i32.const 1052992
     11 × global.get    0 × global.set   11 total (100/0% split)
  #7 i32
     init: i32.const 1053096
     11 × global.get    0 × global.set   11 total (100/0% split)
  #8 i32
     init: i32.const 1053208
      9 × global.get    0 × global.set    9 total (100/0% split)
  #9 i32
     init: i32.const 1053248
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1050528
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1049892
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049888
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1049896
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 i32
     init: i32.const 1051668
      3 × global.get    0 × global.set    3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     15 (17.44% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   86(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"6195cheerp.wasm",86,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.11%) × [i32, i32, i32, i32] -> []
    2  (2.22%) × [i32, i32, i32] -> []
    3  (3.33%) × [] -> [i32]
    4  (4.44%) × [] -> []
    4  (4.44%) × [i32] -> []
    4  (4.44%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.56%) × [i32, i32] -> []
   12 (13.33%) × [i32] -> [i32]
   15 (16.67%) × [i32, i32, i32, i32] -> [i32]
   20 (22.22%) × [i32, i32] -> [i32]
   20 (22.22%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 15 (17.44% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    8]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    9,   10]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 9
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 10
  total classes: 9

CSV data for further analysis: 6195cheerp.wasm,11563,183,29,13.679245,90,14,4,9,1,10,3.2222222222222223,2,444,100,22.522522,81,18.243244,24,5.4054055

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"6195cheerp.wasm",0,1,1,"local.(get|tee)"
"6195cheerp.wasm",1,0,1,"i32.const"
"6195cheerp.wasm",2,0,1,"i32.const"
"6195cheerp.wasm",3,1,1,"i32.const"
"6195cheerp.wasm",4,4,2,"local.(get|tee)"
"6195cheerp.wasm",5,1,2,"local.(get|tee)"
"6195cheerp.wasm",6,1,5,"i32.const"
"6195cheerp.wasm",7,4,6,"i32.load"
"6195cheerp.wasm",8,4,10,"local.(get|tee)"
