Input file: fftr4cheerp.wasm
  binary:    fftr4cheerp.wasm

Functions:          149
  Imported:           7
  Non-imported:     142
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         23
  Of those, unique functions:    23 (i.e., at least 15.44% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     31504
  call:             380 (1.21% of all instructions)
  call_indirect:     70 (0.22% of all instructions, 15.56% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      51 × global.get   193 × global.set   244 total (21/79% split)
  #1 i32
     init: i32.const 1049744
       0 × global.get     0 × global.set     0 total
  #2 f64
     init: f64.const 0
      29 × global.get     0 × global.set    29 total (100/0% split)
  #3 f64
     init: f64.const 0
      21 × global.get     0 × global.set    21 total (100/0% split)
  #4 i32
     init: i32.const 1049752
       0 × global.get     0 × global.set     0 total
  #5 i32
     init: i32.const 1049728
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 i32
     init: i32.const 1052324
      14 × global.get     0 × global.set    14 total (100/0% split)
  #7 i32
     init: i32.const 1049692
      14 × global.get     0 × global.set    14 total (100/0% split)
  #8 f64
     init: f64.const 1
      14 × global.get     0 × global.set    14 total (100/0% split)
  #9 f64
     init: f64.const 0.5
      12 × global.get     0 × global.set    12 total (100/0% split)
  #10 i32
     init: i32.const 1052064
      10 × global.get     0 × global.set    10 total (100/0% split)
  #11 i32
     init: i32.const 1052168
      10 × global.get     0 × global.set    10 total (100/0% split)
  #12 i32
     init: i32.const 1051960
      10 × global.get     0 × global.set    10 total (100/0% split)
  #13 i32
     init: i32.const 1052280
       9 × global.get     0 × global.set     9 total (100/0% split)
  #14 f64
     init: f64.const 16777216
       5 × global.get     0 × global.set     5 total (100/0% split)
  #15 i32
     init: i32.const 1049272
       5 × global.get     0 × global.set     5 total (100/0% split)
  #16 f64
     init: f64.const 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1049724
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1050819
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1050772
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1052320
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 f64
     init: f64.const 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
       3 × global.get     0 × global.set     3 total (100/0% split)
  #22 f64
     init: f64.const 0.00000000006077100506506192
       3 × global.get     0 × global.set     3 total (100/0% split)
  #23 f64
     init: f64.const 0.0000000000000000000020222662487959506
       3 × global.get     0 × global.set     3 total (100/0% split)
  #24 f64
     init: f64.const 0.00000005960464477539063
       3 × global.get     0 × global.set     3 total (100/0% split)
  #25 f64
     init: f64.const 1.5707963267341256
       2 × global.get     0 × global.set     2 total (100/0% split)
  #26 f64
     init: f64.const -0.00000000006077100506506192
       2 × global.get     0 × global.set     2 total (100/0% split)
  #27 f64
     init: f64.const -0.0000000000000000000020222662487959506
       2 × global.get     0 × global.set     2 total (100/0% split)
  #28 f64
     init: f64.const 0.00000000006077100506303966
       2 × global.get     0 × global.set     2 total (100/0% split)
  #29 f64
     init: f64.const 3.14159265359
       2 × global.get     0 × global.set     2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     41 (28.87% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  142(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"fftr4cheerp.wasm",142,100,"[]",0,0

Counts of function types (27 unique types):
    1  (0.67%) × [] -> [f64]
    1  (0.67%) × [i32] -> [f32]
    1  (0.67%) × [i32, i32, i32] -> [f64]
    1  (0.67%) × [i32, i32, i32, i32] -> []
    1  (0.67%) × [i32, i32, f64] -> []
    1  (0.67%) × [i32, f64, i32, i32] -> [i32]
    1  (0.67%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.67%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.67%) × [f64] -> [i32]
    1  (0.67%) × [f64, i32] -> [i32]
    1  (0.67%) × [f64, i32] -> [f64]
    1  (0.67%) × [f64, f64] -> [f64]
    1  (0.67%) × [f64, f64, i32] -> [f64]
    2  (1.34%) × [i32, i32] -> [f64]
    2  (1.34%) × [i32, i32, i32, i32, i32] -> []
    2  (1.34%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    3  (2.01%) × [] -> [i32]
    3  (2.01%) × [i32, i32, i32] -> []
    3  (2.01%) × [f64] -> [f64]
    4  (2.68%) × [] -> []
    5  (3.36%) × [i32] -> []
    6  (4.03%) × [i32, i32, i32, i32, i32] -> [i32]
   12  (8.05%) × [i32, i32] -> []
   15 (10.07%) × [i32] -> [i32]
   23 (15.44%) × [i32, i32, i32, i32] -> [i32]
   26 (17.45%) × [i32, i32, i32] -> [i32]
   30 (20.13%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 23 (16.20% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    6]   length:   6   unique funcs:    6   type: [i32, i32] -> [i32]
         range: [    7,   13]   length:   7   unique funcs:    7   type: [i32, i32, i32, i32] -> [i32]
         range: [   14,   17]   length:   4   unique funcs:    4   type: [i32, i32, i32] -> [i32]
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   19,   19]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   20,   21]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   22,   22]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    12 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               30
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               30
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
    29 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      6                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               30
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     16                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
  13 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #6 is indirectly called with a fixed table index
  global.get 20
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  global.get 6
  i32.const 0
  i32.store
  ...
function #16 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: Some(16), end idx: Some(16)
    size (of class): 1
    count (how often class appears): 1
  class #5
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 2
  class #8
    type: [i32, i32] -> [i32]
    start idx: Some(6), end idx: Some(6)
    size (of class): 1
    count (how often class appears): 5
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 6
  class #10
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 7
  class #11
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 12
  class #12
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 29
  total classes: 13

CSV data for further analysis: fftr4cheerp.wasm,31504,380,70,15.555555,149,23,17,13,1,29,5.384615384615385,2,1689,415,24.570751,371,21.96566,142,8.407342

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"fftr4cheerp.wasm",0,1,1,"local.(get|tee)"
"fftr4cheerp.wasm",1,1,1,"local.(get|tee)"
"fftr4cheerp.wasm",2,2,1,"other"
"fftr4cheerp.wasm",3,0,1,"i32.const"
"fftr4cheerp.wasm",4,1,1,"i32.const"
"fftr4cheerp.wasm",5,6,2,"local.(get|tee)"
"fftr4cheerp.wasm",6,1,2,"local.(get|tee)"
"fftr4cheerp.wasm",7,1,2,"i32.const"
"fftr4cheerp.wasm",8,1,5,"i32.const"
"fftr4cheerp.wasm",9,7,6,"i32.load"
"fftr4cheerp.wasm",10,4,7,"i32.load"
"fftr4cheerp.wasm",11,6,12,"i32.load"
"fftr4cheerp.wasm",12,7,29,"local.(get|tee)"
