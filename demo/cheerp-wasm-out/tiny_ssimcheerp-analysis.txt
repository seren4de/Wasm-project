Input file: tiny_ssimcheerp.wasm
  binary:    tiny_ssimcheerp.wasm

Functions:          145
  Imported:           4
  Non-imported:     141
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         20
  Of those, unique functions:    20 (i.e., at least 13.79% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     31367
  call:             386 (1.23% of all instructions)
  call_indirect:     63 (0.20% of all instructions, 14.03% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      46 × global.get   165 × global.set   211 total (22/78% split)
  #1 i32
     init: i32.const 1049268
       0 × global.get     0 × global.set     0 total
  #2 f64
     init: f64.const 0
      15 × global.get     0 × global.set    15 total (100/0% split)
  #3 i32
     init: i32.const 1050296
      16 × global.get     0 × global.set    16 total (100/0% split)
  #4 i32
     init: i32.const 1049276
       0 × global.get     0 × global.set     0 total
  #5 i32
     init: i32.const 1051740
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 i32
     init: i32.const 1051376
      10 × global.get     0 × global.set    10 total (100/0% split)
  #7 i32
     init: i32.const 1051480
      10 × global.get     0 × global.set    10 total (100/0% split)
  #8 i32
     init: i32.const 1051584
      10 × global.get     0 × global.set    10 total (100/0% split)
  #9 i32
     init: i32.const 1049236
      10 × global.get     0 × global.set    10 total (100/0% split)
  #10 i32
     init: i32.const 1051696
       9 × global.get     0 × global.set     9 total (100/0% split)
  #11 f64
     init: f64.const 0.5
       9 × global.get     0 × global.set     9 total (100/0% split)
  #12 f64
     init: f64.const 0
       6 × global.get     0 × global.set     6 total (100/0% split)
  #13 i32
     init: i32.const 1051736
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1049244
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1049252
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 f64
     init: f64.const 0.00000000019082149292705877
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1050358
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 f64
     init: f64.const 0.6931471803691238
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1049248
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     36 (25.53% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  141(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"tiny_ssimcheerp.wasm",141,100,"[]",0,0

Counts of function types (26 unique types):
    1  (0.69%) × [i32] -> [f32]
    1  (0.69%) × [i32] -> [f64]
    1  (0.69%) × [i32, i32, i32] -> [f32]
    1  (0.69%) × [i32, i32, i32] -> [f64]
    1  (0.69%) × [i32, i32, i32, i32] -> [f32]
    1  (0.69%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.69%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> [f32]
    1  (0.69%) × [i32, f64, i32, i32] -> [i32]
    1  (0.69%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.69%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.69%) × [f64] -> [i32]
    1  (0.69%) × [f64, f64] -> [f64]
    2  (1.38%) × [i32, i32, i32, i32] -> []
    3  (2.07%) × [] -> [i32]
    3  (2.07%) × [i32] -> []
    3  (2.07%) × [i32, i32] -> [f64]
    3  (2.07%) × [f64] -> [f64]
    4  (2.76%) × [] -> []
    4  (2.76%) × [i32, i32, i32] -> []
    4  (2.76%) × [i32, i32, i32, i32, i32] -> []
    6  (4.14%) × [i32, i32] -> []
    7  (4.83%) × [i32, i32, i32, i32, i32] -> [i32]
   16 (11.03%) × [i32] -> [i32]
   23 (15.86%) × [i32, i32, i32, i32] -> [i32]
   27 (18.62%) × [i32, i32, i32] -> [i32]
   28 (19.31%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 19 (13.48% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   11]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [   12,   14]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   17,   18]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   19,   19]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    29 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     13                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  11 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 13
  i32.load
  local.tee 2
  ...
function #13 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(13), end idx: Some(13)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #8
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #9
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  class #10
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 29
  total classes: 11

CSV data for further analysis: tiny_ssimcheerp.wasm,31367,386,63,14.03118,145,20,14,11,1,29,5.7272727272727275,2,1502,317,21.105192,292,19.440746,97,6.458056

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"tiny_ssimcheerp.wasm",0,1,1,"local.(get|tee)"
"tiny_ssimcheerp.wasm",1,2,1,"other"
"tiny_ssimcheerp.wasm",2,0,1,"i32.const"
"tiny_ssimcheerp.wasm",3,1,1,"i32.const"
"tiny_ssimcheerp.wasm",4,5,2,"local.(get|tee)"
"tiny_ssimcheerp.wasm",5,1,2,"local.(get|tee)"
"tiny_ssimcheerp.wasm",6,1,5,"i32.const"
"tiny_ssimcheerp.wasm",7,6,6,"i32.load"
"tiny_ssimcheerp.wasm",8,3,7,"i32.load"
"tiny_ssimcheerp.wasm",9,5,8,"i32.load"
"tiny_ssimcheerp.wasm",10,6,29,"local.(get|tee)"
