Input file: gen_alu_testcheerp.wasm
  binary:    gen_alu_testcheerp.wasm

Functions:           85
  Imported:           3
  Non-imported:      82
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 14.12% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     39211
  call:             827 (2.11% of all instructions)
  call_indirect:     40 (0.10% of all instructions, 4.61% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      529 × global.get   1097 × global.set   1626 total (33/67% split)
  #1 i32
     init: i32.const 1050890
       72 × global.get      0 × global.set     72 total (100/0% split)
  #2 i32
     init: i32.const 1050334
       72 × global.get      0 × global.set     72 total (100/0% split)
  #3 i32
     init: i32.const 1050431
       72 × global.get      0 × global.set     72 total (100/0% split)
  #4 i32
     init: i32.const 1051250
       72 × global.get      0 × global.set     72 total (100/0% split)
  #5 i32
     init: i32.const 1051352
       72 × global.get      0 × global.set     72 total (100/0% split)
  #6 i32
     init: i32.const 1051160
       72 × global.get      0 × global.set     72 total (100/0% split)
  #7 i32
     init: i32.const 1051013
      108 × global.get      0 × global.set    108 total (100/0% split)
  #8 i32
     init: i32.const 1051142
      108 × global.get      0 × global.set    108 total (100/0% split)
  #9 i32
     init: i32.const 1050849
       40 × global.get      0 × global.set     40 total (100/0% split)
  #10 i32
     init: i32.const 1050817
       40 × global.get      0 × global.set     40 total (100/0% split)
  #11 i32
     init: i32.const 1050915
       34 × global.get      0 × global.set     34 total (100/0% split)
  #12 i32
     init: i32.const 1051009
       32 × global.get      0 × global.set     32 total (100/0% split)
  #13 i32
     init: i32.const 1051203
       32 × global.get      0 × global.set     32 total (100/0% split)
  #14 i32
     init: i32.const 1051173
       32 × global.get      0 × global.set     32 total (100/0% split)
  #15 i32
     init: i32.const 1050888
       32 × global.get      0 × global.set     32 total (100/0% split)
  #16 i32
     init: i32.const 1050934
       32 × global.get      0 × global.set     32 total (100/0% split)
  #17 i32
     init: i32.const 1051196
       32 × global.get      0 × global.set     32 total (100/0% split)
  #18 i32
     init: i32.const 1050927
       32 × global.get      0 × global.set     32 total (100/0% split)
  #19 i32
     init: i32.const 1051209
       32 × global.get      0 × global.set     32 total (100/0% split)
  #20 i32
     init: i32.const 1050941
       32 × global.get      0 × global.set     32 total (100/0% split)
  #21 i32
     init: i32.const 1050909
       25 × global.get      0 × global.set     25 total (100/0% split)
  #22 i32
     init: i32.const 1051004
       25 × global.get      0 × global.set     25 total (100/0% split)
  #23 i32
     init: i32.const 1051229
       25 × global.get      0 × global.set     25 total (100/0% split)
  #24 i32
     init: i32.const 1051222
       24 × global.get      0 × global.set     24 total (100/0% split)
  #25 i32
     init: i32.const 1051215
       24 × global.get      0 × global.set     24 total (100/0% split)
  #26 i32
     init: i32.const 1050996
       24 × global.get      0 × global.set     24 total (100/0% split)
  #27 i32
     init: i32.const 1050990
       24 × global.get      0 × global.set     24 total (100/0% split)
  #28 i32
     init: i32.const 1051002
       24 × global.get      0 × global.set     24 total (100/0% split)
  #29 i32
     init: i32.const 1049176
        0 × global.get      0 × global.set      0 total
  #30 i32
     init: i32.const 1050670
       20 × global.get      0 × global.set     20 total (100/0% split)
  #31 i32
     init: i32.const 1050799
       20 × global.get      0 × global.set     20 total (100/0% split)
  #32 i32
     init: i32.const 1049184
        0 × global.get      0 × global.set      0 total
  #33 i32
     init: i32.const 1051820
       12 × global.get      0 × global.set     12 total (100/0% split)
  #34 i32
     init: i32.const 1051768
        9 × global.get      0 × global.set      9 total (100/0% split)
  #35 i32
     init: i32.const 1049160
        5 × global.get      0 × global.set      5 total (100/0% split)
  #36 i32
     init: i32.const 1051656
        5 × global.get      0 × global.set      5 total (100/0% split)
  #37 i32
     init: i32.const 1051552
        5 × global.get      0 × global.set      5 total (100/0% split)
  #38 i32
     init: i32.const 1051448
        5 × global.get      0 × global.set      5 total (100/0% split)
  #39 i32
     init: i32.const 1050204
        4 × global.get      0 × global.set      4 total (100/0% split)
  #40 i32
     init: i32.const 1051808
        4 × global.get      0 × global.set      4 total (100/0% split)
  #41 i32
     init: i32.const 1050208
        4 × global.get      0 × global.set      4 total (100/0% split)
  #42 i32
     init: i32.const 1050607
        4 × global.get      0 × global.set      4 total (100/0% split)
  #43 f64
     init: f64.const 0.5
        3 × global.get      0 × global.set      3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     15 (18.29% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   82(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"gen_alu_testcheerp.wasm",82,100,"[]",0,0

Counts of function types (15 unique types):
    1  (1.18%) × [i32, i32, i32, i32] -> []
    1  (1.18%) × [i32, f64, i32, i32] -> [i32]
    1  (1.18%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (1.18%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.18%) × [f64] -> [i32]
    2  (2.35%) × [i32, i32, i32] -> []
    3  (3.53%) × [] -> []
    3  (3.53%) × [i32] -> []
    4  (4.71%) × [] -> [i32]
    4  (4.71%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.88%) × [i32, i32] -> []
   11 (12.94%) × [i32] -> [i32]
   11 (12.94%) × [i32, i32, i32, i32] -> [i32]
   18 (21.18%) × [i32, i32] -> [i32]
   19 (22.35%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (13.41% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #7 is indirectly called with a fixed table index
  global.get 40
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 5
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 6

CSV data for further analysis: gen_alu_testcheerp.wasm,39211,827,40,4.6136103,85,12,4,6,1,25,6.666666666666667,5,483,145,30.020704,134,27.74327,20,4.1407866

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"gen_alu_testcheerp.wasm",0,1,1,"i32.const"
"gen_alu_testcheerp.wasm",1,3,2,"local.(get|tee)"
"gen_alu_testcheerp.wasm",2,1,2,"local.(get|tee)"
"gen_alu_testcheerp.wasm",3,4,5,"i32.load"
"gen_alu_testcheerp.wasm",4,1,5,"i32.const"
"gen_alu_testcheerp.wasm",5,4,25,"local.(get|tee)"
