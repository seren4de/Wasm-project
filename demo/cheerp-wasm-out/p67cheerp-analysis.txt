Input file: p67cheerp.wasm
  binary:    p67cheerp.wasm

Functions:           62
  Imported:           3
  Non-imported:      59
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 20.97% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7018
  call:              83 (1.18% of all instructions)
  call_indirect:     21 (0.30% of all instructions, 20.19% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      9 × global.get   25 × global.set   34 total (26/74% split)
  #1 i32
     init: i32.const 1048860
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048868
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050500
     10 × global.get    0 × global.set   10 total (100/0% split)
  #4 i32
     init: i32.const 1050448
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1050232
      5 × global.get    0 × global.set    5 total (100/0% split)
  #6 i32
     init: i32.const 1050128
      5 × global.get    0 × global.set    5 total (100/0% split)
  #7 i32
     init: i32.const 1048836
      5 × global.get    0 × global.set    5 total (100/0% split)
  #8 i32
     init: i32.const 1050336
      5 × global.get    0 × global.set    5 total (100/0% split)
  #9 i32
     init: i32.const 1048840
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1050488
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1049927
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1048844
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (15.25% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   59(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"p67cheerp.wasm",59,100,"[]",0,0

Counts of function types (11 unique types):
    2  (3.23%) × [i32, i32, i32] -> []
    2  (3.23%) × [i32, i32, i32, i32] -> []
    3  (4.84%) × [] -> []
    3  (4.84%) × [i32] -> []
    3  (4.84%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (6.45%) × [i32, i32] -> []
    5  (8.06%) × [i32] -> [i32]
    6  (9.68%) × [] -> [i32]
    8 (12.90%) × [i32, i32, i32, i32] -> [i32]
   12 (19.35%) × [i32, i32, i32] -> [i32]
   14 (22.58%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (20.34% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [    6,    8]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      5                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 3
  i32.const 0
  i32.store
  ...
function #7 is indirectly called with a fixed table index
  global.get 10
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  total classes: 8

CSV data for further analysis: p67cheerp.wasm,7018,83,21,20.192308,62,13,5,8,1,6,2.625,2,199,76,38.190956,56,28.140703,10,5.0251255

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"p67cheerp.wasm",0,0,1,"i32.const"
"p67cheerp.wasm",1,1,1,"i32.const"
"p67cheerp.wasm",2,3,2,"local.(get|tee)"
"p67cheerp.wasm",3,5,2,"i32.load"
"p67cheerp.wasm",4,1,2,"local.(get|tee)"
"p67cheerp.wasm",5,1,2,"i32.const"
"p67cheerp.wasm",6,1,5,"i32.const"
"p67cheerp.wasm",7,5,6,"local.(get|tee)"
