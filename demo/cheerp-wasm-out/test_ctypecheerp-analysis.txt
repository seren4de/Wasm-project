Input file: test_ctypecheerp.wasm
  binary:    test_ctypecheerp.wasm

Functions:           74
  Imported:           3
  Non-imported:      71
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         26
  Of those, unique functions:    26 (i.e., at least 35.14% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     10102
  call:             209 (2.07% of all instructions)
  call_indirect:     28 (0.28% of all instructions, 11.81% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     135 × global.get   277 × global.set   412 total (33/67% split)
  #1 i32
     init: i32.const 1048824
     109 × global.get     0 × global.set   109 total (100/0% split)
  #2 i32
     init: i32.const 1048860
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1048868
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1052796
      10 × global.get     0 × global.set    10 total (100/0% split)
  #5 i32
     init: i32.const 1052752
       9 × global.get     0 × global.set     9 total (100/0% split)
  #6 i32
     init: i32.const 1052536
       6 × global.get     0 × global.set     6 total (100/0% split)
  #7 i32
     init: i32.const 1052432
       6 × global.get     0 × global.set     6 total (100/0% split)
  #8 i32
     init: i32.const 1052640
       6 × global.get     0 × global.set     6 total (100/0% split)
  #9 i32
     init: i32.const 1049888
       5 × global.get     0 × global.set     5 total (100/0% split)
  #10 i32
     init: i32.const 1050994
       4 × global.get     0 × global.set     4 total (100/0% split)
  #11 i32
     init: i32.const 1052792
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1048840
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1048844
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      9 (12.68% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   71(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_ctypecheerp.wasm",71,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.35%) × [i32, i32, i32, i32] -> []
    2  (2.70%) × [i32, i32, i32] -> []
    3  (4.05%) × [] -> []
    3  (4.05%) × [i32] -> []
    3  (4.05%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (5.41%) × [] -> [i32]
    4  (5.41%) × [i32, i32] -> []
    8 (10.81%) × [i32, i32, i32, i32] -> [i32]
   13 (17.57%) × [i32, i32] -> [i32]
   13 (17.57%) × [i32, i32, i32] -> [i32]
   20 (27.03%) × [i32] -> [i32]

Functions with at least one call_indirect: 13 (18.31% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [    6,    8]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    9,   21]   length:  13   unique funcs:   13   type: [i32] -> [i32]
         range: [   22,   22]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   23,   24]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   25,   25]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     7 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):   13
         functions matching by type and present in permissable table index range:             13
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      5                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     24                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 4
  i32.const 0
  i32.store
  ...
function #7 is indirectly called with a fixed table index
  global.get 11
  i32.load
  local.tee 2
  ...
function #24 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(24), end idx: Some(24)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #8
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 13
    count (how often class appears): 7
  total classes: 9

CSV data for further analysis: test_ctypecheerp.wasm,10102,209,28,11.814346,74,26,18,9,1,7,3.111111111111111,2,333,167,50.15015,147,44.144146,101,30.33033

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_ctypecheerp.wasm",0,0,1,"i32.const"
"test_ctypecheerp.wasm",1,1,1,"i32.const"
"test_ctypecheerp.wasm",2,3,2,"local.(get|tee)"
"test_ctypecheerp.wasm",3,5,2,"i32.load"
"test_ctypecheerp.wasm",4,1,2,"local.(get|tee)"
"test_ctypecheerp.wasm",5,1,2,"i32.const"
"test_ctypecheerp.wasm",6,1,5,"i32.const"
"test_ctypecheerp.wasm",7,5,6,"local.(get|tee)"
"test_ctypecheerp.wasm",8,13,7,"i32.load"
