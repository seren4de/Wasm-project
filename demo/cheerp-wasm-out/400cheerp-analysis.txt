Input file: 400cheerp.wasm
  binary:    400cheerp.wasm

Functions:          132
  Imported:           6
  Non-imported:     126
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         18
  Of those, unique functions:    18 (i.e., at least 13.64% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26898
  call:             335 (1.25% of all instructions)
  call_indirect:     58 (0.22% of all instructions, 14.76% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      41 × global.get   133 × global.set   174 total (24/76% split)
  #1 i32
     init: i32.const 1049264
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1050296
      16 × global.get     0 × global.set    16 total (100/0% split)
  #3 i32
     init: i32.const 1049272
       0 × global.get     0 × global.set     0 total
  #4 f64
     init: f64.const 0
      10 × global.get     0 × global.set    10 total (100/0% split)
  #5 i32
     init: i32.const 1053712
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 i32
     init: i32.const 1049240
      10 × global.get     0 × global.set    10 total (100/0% split)
  #7 i32
     init: i32.const 1051634
       5 × global.get     0 × global.set     5 total (100/0% split)
  #8 i32
     init: i32.const 1053504
       9 × global.get     0 × global.set     9 total (100/0% split)
  #9 i32
     init: i32.const 1053400
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 i32
     init: i32.const 1053608
       9 × global.get     0 × global.set     9 total (100/0% split)
  #11 i32
     init: i32.const 1053720
       9 × global.get     0 × global.set     9 total (100/0% split)
  #12 f64
     init: f64.const 0.5
       7 × global.get     0 × global.set     7 total (100/0% split)
  #13 f64
     init: f64.const 0
       6 × global.get     0 × global.set     6 total (100/0% split)
  #14 i32
     init: i32.const 1049248
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1049244
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1051651
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1053760
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1051223
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1050292
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     32 (25.40% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  126(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"400cheerp.wasm",126,100,"[]",0,0

Counts of function types (21 unique types):
    1  (0.76%) × [i32] -> [f32]
    1  (0.76%) × [i32, i32, i32] -> [f64]
    1  (0.76%) × [i32, i32, i32, i32] -> []
    1  (0.76%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.76%) × [i32, f64, i32, i32] -> [i32]
    1  (0.76%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.76%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.76%) × [f64] -> [i32]
    1  (0.76%) × [f64] -> [f64]
    2  (1.52%) × [i32, i32] -> [f64]
    2  (1.52%) × [i32, i32, i32, i32, i32] -> []
    3  (2.27%) × [] -> [i32]
    3  (2.27%) × [i32, i32, i32] -> []
    4  (3.03%) × [] -> []
    6  (4.55%) × [i32] -> []
    6  (4.55%) × [i32, i32, i32, i32, i32] -> [i32]
    8  (6.06%) × [i32, i32] -> []
   11  (8.33%) × [i32] -> [i32]
   21 (15.91%) × [i32, i32, i32, i32] -> [i32]
   27 (20.45%) × [i32, i32, i32] -> [i32]
   30 (22.73%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 17 (13.49% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    6]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [    7,   10]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   16,   17]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               30
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               30
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      9                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               30
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  11 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #9 is indirectly called with a fixed table index
  global.get 17
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 5
  class #7
    type: [i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 5
  class #8
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #9
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 8
  class #10
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 25
  total classes: 11

CSV data for further analysis: 400cheerp.wasm,26898,335,58,14.758269,132,18,13,11,1,25,5.2727272727272725,2,1343,272,20.253164,252,18.763962,83,6.1801934

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"400cheerp.wasm",0,1,1,"local.(get|tee)"
"400cheerp.wasm",1,2,1,"other"
"400cheerp.wasm",2,0,1,"i32.const"
"400cheerp.wasm",3,1,1,"i32.const"
"400cheerp.wasm",4,4,2,"local.(get|tee)"
"400cheerp.wasm",5,1,2,"local.(get|tee)"
"400cheerp.wasm",6,6,5,"i32.load"
"400cheerp.wasm",7,1,5,"i32.const"
"400cheerp.wasm",8,3,7,"i32.load"
"400cheerp.wasm",9,4,8,"i32.load"
"400cheerp.wasm",10,6,25,"local.(get|tee)"
