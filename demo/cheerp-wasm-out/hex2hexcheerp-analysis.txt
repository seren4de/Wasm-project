Input file: hex2hexcheerp.wasm
  binary:    hex2hexcheerp.wasm

Functions:          123
  Imported:           5
  Non-imported:     118
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         19
  Of those, unique functions:    19 (i.e., at least 15.45% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     22970
  call:             294 (1.28% of all instructions)
  call_indirect:     42 (0.18% of all instructions, 12.50% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      46 × global.get   113 × global.set   159 total (29/71% split)
  #1 i32
     init: i32.const 1049268
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049252
      21 × global.get     0 × global.set    21 total (100/0% split)
  #3 i32
     init: i32.const 1049276
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1051424
      12 × global.get     0 × global.set    12 total (100/0% split)
  #5 i32
     init: i32.const 1051528
      12 × global.get     0 × global.set    12 total (100/0% split)
  #6 i32
     init: i32.const 1313828
      12 × global.get     0 × global.set    12 total (100/0% split)
  #7 i32
     init: i32.const 1051320
      12 × global.get     0 × global.set    12 total (100/0% split)
  #8 i32
     init: i32.const 1049236
      10 × global.get     0 × global.set    10 total (100/0% split)
  #9 i32
     init: i32.const 1050722
       5 × global.get     0 × global.set     5 total (100/0% split)
  #10 i32
     init: i32.const 1313784
       9 × global.get     0 × global.set     9 total (100/0% split)
  #11 i32
     init: i32.const 1050740
       7 × global.get     0 × global.set     7 total (100/0% split)
  #12 i32
     init: i32.const 1049240
       5 × global.get     0 × global.set     5 total (100/0% split)
  #13 i32
     init: i32.const 1050292
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1313824
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1050717
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1050642
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1049244
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     27 (22.88% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  118(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"hex2hexcheerp.wasm",118,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.81%) × [i32] -> [f32]
    1  (0.81%) × [i32, i32, i32] -> [f64]
    1  (0.81%) × [i32, i32, i32, i32] -> []
    1  (0.81%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.81%) × [i32, f64, i32, i32] -> [i32]
    1  (0.81%) × [f64] -> [i32]
    1  (0.81%) × [f64] -> [f64]
    2  (1.63%) × [i32, i32] -> [f64]
    2  (1.63%) × [i32, i32, i32, i32, i32] -> []
    3  (2.44%) × [] -> []
    3  (2.44%) × [] -> [i32]
    3  (2.44%) × [i32, i32, i32] -> []
    5  (4.07%) × [i32] -> []
    5  (4.07%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (5.69%) × [i32, i32] -> []
   15 (12.20%) × [i32] -> [i32]
   19 (15.45%) × [i32, i32, i32, i32] -> [i32]
   23 (18.70%) × [i32, i32, i32] -> [i32]
   29 (23.58%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 19 (16.10% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   10]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   16,   17]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  12 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 14
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #7
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #10
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #11
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  total classes: 12

CSV data for further analysis: hex2hexcheerp.wasm,22970,294,42,12.5,123,19,13,12,1,8,3.5,2,889,167,18.785152,143,16.08549,91,10.23622

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"hex2hexcheerp.wasm",0,1,1,"local.(get|tee)"
"hex2hexcheerp.wasm",1,1,1,"local.(get|tee)"
"hex2hexcheerp.wasm",2,2,1,"other"
"hex2hexcheerp.wasm",3,1,1,"i32.const"
"hex2hexcheerp.wasm",4,5,2,"local.(get|tee)"
"hex2hexcheerp.wasm",5,1,2,"local.(get|tee)"
"hex2hexcheerp.wasm",6,0,2,"i32.const"
"hex2hexcheerp.wasm",7,1,5,"i32.const"
"hex2hexcheerp.wasm",8,5,6,"i32.load"
"hex2hexcheerp.wasm",9,5,6,"local.(get|tee)"
"hex2hexcheerp.wasm",10,3,7,"i32.load"
"hex2hexcheerp.wasm",11,5,8,"i32.load"
