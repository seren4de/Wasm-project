Input file: disptracecheerp.wasm
  binary:    disptracecheerp.wasm

Functions:           98
  Imported:           4
  Non-imported:      94
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         15
  Of those, unique functions:    15 (i.e., at least 15.31% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17569
  call:             258 (1.47% of all instructions)
  call_indirect:     30 (0.17% of all instructions, 10.42% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      58 × global.get   145 × global.set   203 total (29/71% split)
  #1 i32
     init: i32.const 1051320
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1052344
      28 × global.get     0 × global.set    28 total (100/0% split)
  #3 i32
     init: i32.const 1051328
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1057276
      14 × global.get     0 × global.set    14 total (100/0% split)
  #5 i32
     init: i32.const 1056859
      11 × global.get     0 × global.set    11 total (100/0% split)
  #6 i32
     init: i32.const 1057232
       9 × global.get     0 × global.set     9 total (100/0% split)
  #7 i32
     init: i32.const 1057120
       9 × global.get     0 × global.set     9 total (100/0% split)
  #8 i32
     init: i32.const 1057016
       9 × global.get     0 × global.set     9 total (100/0% split)
  #9 i32
     init: i32.const 1056912
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 i32
     init: i32.const 1057272
       4 × global.get     0 × global.set     4 total (100/0% split)
  #11 i32
     init: i32.const 1051308
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1052556
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1052356
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1052348
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1056855
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     18 (19.15% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   94(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"disptracecheerp.wasm",94,100,"[]",0,0

Counts of function types (12 unique types):
    1  (1.02%) × [i32, i32, i32, i32] -> []
    1  (1.02%) × [i32, i32, i32, i32, i32, i32] -> []
    2  (2.04%) × [i32, i32, i32] -> []
    3  (3.06%) × [i32] -> []
    4  (4.08%) × [] -> []
    4  (4.08%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.10%) × [] -> [i32]
    5  (5.10%) × [i32, i32] -> []
   14 (14.29%) × [i32] -> [i32]
   17 (17.35%) × [i32, i32, i32, i32] -> [i32]
   19 (19.39%) × [i32, i32, i32] -> [i32]
   23 (23.47%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 16 (17.02% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    9]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   12]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 10
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 10
  total classes: 9

CSV data for further analysis: disptracecheerp.wasm,17569,258,30,10.416667,98,15,5,9,1,10,3.3333333333333335,2,501,117,23.353292,97,19.361277,30,5.9880238

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"disptracecheerp.wasm",0,1,1,"local.(get|tee)"
"disptracecheerp.wasm",1,0,1,"i32.const"
"disptracecheerp.wasm",2,1,1,"i32.const"
"disptracecheerp.wasm",3,4,2,"local.(get|tee)"
"disptracecheerp.wasm",4,1,2,"local.(get|tee)"
"disptracecheerp.wasm",5,0,2,"i32.const"
"disptracecheerp.wasm",6,1,5,"i32.const"
"disptracecheerp.wasm",7,5,6,"i32.load"
"disptracecheerp.wasm",8,5,10,"local.(get|tee)"
