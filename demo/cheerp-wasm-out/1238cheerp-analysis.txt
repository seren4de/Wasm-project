Input file: 1238cheerp.wasm
  binary:    1238cheerp.wasm

Functions:           77
  Imported:           4
  Non-imported:      73
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 18.18% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     10119
  call:             144 (1.42% of all instructions)
  call_indirect:     29 (0.29% of all instructions, 16.76% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     15 × global.get   49 × global.set   64 total (23/77% split)
  #1 i32
     init: i32.const 1048856
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048864
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050500
     14 × global.get    0 × global.set   14 total (100/0% split)
  #4 i32
     init: i32.const 1049884
     10 × global.get    0 × global.set   10 total (100/0% split)
  #5 i32
     init: i32.const 1050448
      9 × global.get    0 × global.set    9 total (100/0% split)
  #6 i32
     init: i32.const 1050336
      8 × global.get    0 × global.set    8 total (100/0% split)
  #7 i32
     init: i32.const 1050128
      8 × global.get    0 × global.set    8 total (100/0% split)
  #8 i32
     init: i32.const 1050232
      8 × global.get    0 × global.set    8 total (100/0% split)
  #9 i32
     init: i32.const 1048844
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1048840
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1050062
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1050488
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1048836
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 i32
     init: i32.const 1049974
      2 × global.get    0 × global.set    2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     12 (16.44% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   73(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"1238cheerp.wasm",73,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.30%) × [i32, i32, i32, i32] -> []
    2  (2.60%) × [i32, i32, i32] -> []
    3  (3.90%) × [] -> [i32]
    4  (5.19%) × [] -> []
    4  (5.19%) × [i32] -> []
    4  (5.19%) × [i32, i32] -> []
    4  (5.19%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (9.09%) × [i32] -> [i32]
   13 (16.88%) × [i32, i32, i32, i32] -> [i32]
   16 (20.78%) × [i32, i32, i32] -> [i32]
   19 (24.68%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 15 (20.55% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    8]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      3                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #3 is indirectly called with a fixed table index
  global.get 12
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(3), end idx: Some(3)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 10
  total classes: 9

CSV data for further analysis: 1238cheerp.wasm,10119,144,29,16.763006,77,14,4,9,1,10,3.2222222222222223,2,392,100,25.510204,81,20.663265,24,6.122449

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"1238cheerp.wasm",0,1,1,"local.(get|tee)"
"1238cheerp.wasm",1,0,1,"i32.const"
"1238cheerp.wasm",2,0,1,"i32.const"
"1238cheerp.wasm",3,1,1,"i32.const"
"1238cheerp.wasm",4,4,2,"local.(get|tee)"
"1238cheerp.wasm",5,1,2,"local.(get|tee)"
"1238cheerp.wasm",6,1,5,"i32.const"
"1238cheerp.wasm",7,4,6,"i32.load"
"1238cheerp.wasm",8,4,10,"local.(get|tee)"
