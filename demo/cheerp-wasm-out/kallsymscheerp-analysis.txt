Input file: kallsymscheerp.wasm
  binary:    kallsymscheerp.wasm

Functions:          154
  Imported:           5
  Non-imported:     149
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         21
  Of those, unique functions:    21 (i.e., at least 13.64% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     28054
  call:             387 (1.38% of all instructions)
  call_indirect:     64 (0.23% of all instructions, 14.19% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      66 × global.get   170 × global.set   236 total (28/72% split)
  #1 i32
     init: i32.const 1049372
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1052508
      26 × global.get     0 × global.set    26 total (100/0% split)
  #3 i32
     init: i32.const 1050416
      21 × global.get     0 × global.set    21 total (100/0% split)
  #4 i32
     init: i32.const 1052504
      17 × global.get     0 × global.set    17 total (100/0% split)
  #5 i32
     init: i32.const 1049380
       0 × global.get     0 × global.set     0 total
  #6 i32
     init: i32.const 1050412
      13 × global.get     0 × global.set    13 total (100/0% split)
  #7 i32
     init: i32.const 1052192
      12 × global.get     0 × global.set    12 total (100/0% split)
  #8 i32
     init: i32.const 1052296
      12 × global.get     0 × global.set    12 total (100/0% split)
  #9 i32
     init: i32.const 1052400
      12 × global.get     0 × global.set    12 total (100/0% split)
  #10 i32
     init: i32.const 1053348
      10 × global.get     0 × global.set    10 total (100/0% split)
  #11 i32
     init: i32.const 1052184
       9 × global.get     0 × global.set     9 total (100/0% split)
  #12 i32
     init: i32.const 1053296
       9 × global.get     0 × global.set     9 total (100/0% split)
  #13 i32
     init: i32.const 1050408
       5 × global.get     0 × global.set     5 total (100/0% split)
  #14 i32
     init: i32.const 1052512
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1050404
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1051122
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1052516
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1315496
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1050400
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 i32
     init: i32.const 1053336
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     33 (22.15% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  149(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"kallsymscheerp.wasm",149,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.65%) × [i32] -> [f32]
    1  (0.65%) × [i32, i32, i32] -> [f64]
    1  (0.65%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.65%) × [i32, f64, i32, i32] -> [i32]
    1  (0.65%) × [f64] -> [i32]
    1  (0.65%) × [f64] -> [f64]
    2  (1.30%) × [i32, i32] -> [f64]
    2  (1.30%) × [i32, i32, i32, i32] -> []
    2  (1.30%) × [i32, i32, i32, i32, i32] -> []
    3  (1.95%) × [i32, i32, i32] -> []
    4  (2.60%) × [] -> [i32]
    5  (3.25%) × [i32, i32, i32, i32, i32] -> [i32]
    8  (5.19%) × [i32] -> []
   10  (6.49%) × [] -> []
   10  (6.49%) × [i32, i32] -> []
   20 (12.99%) × [i32] -> [i32]
   21 (13.64%) × [i32, i32, i32, i32] -> [i32]
   28 (18.18%) × [i32, i32, i32] -> [i32]
   33 (21.43%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 22 (14.77% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    6]   length:   6   unique funcs:    6   type: [i32, i32] -> [i32]
         range: [    7,   12]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [   13,   15]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   19,   20]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               33
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    22 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               33
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      6                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               33
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     15                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  13 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #6 is indirectly called with a fixed table index
  global.get 22
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  global.get 10
  i32.const 0
  i32.store
  ...
function #15 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(15), end idx: Some(15)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 2
  class #7
    type: [i32, i32] -> [i32]
    start idx: Some(6), end idx: Some(6)
    size (of class): 1
    count (how often class appears): 5
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #10
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #11
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 8
  class #12
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 22
  total classes: 13

CSV data for further analysis: kallsymscheerp.wasm,28054,387,64,14.190687,154,21,15,13,1,22,4.923076923076923,2,1723,326,18.920488,287,16.656994,105,6.0940223

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"kallsymscheerp.wasm",0,1,1,"local.(get|tee)"
"kallsymscheerp.wasm",1,1,1,"local.(get|tee)"
"kallsymscheerp.wasm",2,2,1,"other"
"kallsymscheerp.wasm",3,1,1,"i32.const"
"kallsymscheerp.wasm",4,1,2,"local.(get|tee)"
"kallsymscheerp.wasm",5,0,2,"i32.const"
"kallsymscheerp.wasm",6,1,2,"i32.const"
"kallsymscheerp.wasm",7,1,5,"i32.const"
"kallsymscheerp.wasm",8,6,6,"i32.load"
"kallsymscheerp.wasm",9,6,6,"local.(get|tee)"
"kallsymscheerp.wasm",10,3,7,"i32.load"
"kallsymscheerp.wasm",11,6,8,"i32.load"
"kallsymscheerp.wasm",12,6,22,"local.(get|tee)"
