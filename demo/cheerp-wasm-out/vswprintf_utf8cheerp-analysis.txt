Input file: vswprintf_utf8cheerp.wasm
  binary:    vswprintf_utf8cheerp.wasm

Functions:          126
  Imported:           3
  Non-imported:     123
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         21
  Of those, unique functions:    21 (i.e., at least 16.67% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     30251
  call:             439 (1.45% of all instructions)
  call_indirect:     28 (0.09% of all instructions, 6.00% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      31 × global.get   166 × global.set   197 total (16/84% split)
  #1 i32
     init: i32.const 1049488
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049496
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1050956
      15 × global.get     0 × global.set    15 total (100/0% split)
  #4 i32
     init: i32.const 1050960
      14 × global.get     0 × global.set    14 total (100/0% split)
  #5 i32
     init: i32.const 1051364
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 f64
     init: f64.const 0
      13 × global.get     0 × global.set    13 total (100/0% split)
  #7 i32
     init: i32.const 1053568
      13 × global.get     0 × global.set    13 total (100/0% split)
  #8 i32
     init: i32.const 1053868
      12 × global.get     0 × global.set    12 total (100/0% split)
  #9 i32
     init: i32.const 1053816
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 i32
     init: i32.const 1051930
       8 × global.get     0 × global.set     8 total (100/0% split)
  #11 i32
     init: i32.const 1052808
       7 × global.get     0 × global.set     7 total (100/0% split)
  #12 i32
     init: i32.const 1052912
       7 × global.get     0 × global.set     7 total (100/0% split)
  #13 i32
     init: i32.const 1053016
       7 × global.get     0 × global.set     7 total (100/0% split)
  #14 i32
     init: i32.const 1052026
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1049472
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1049120
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1051024
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1049468
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1053856
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1050516
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1051116
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 i32
     init: i32.const 1051962
       4 × global.get     0 × global.set     4 total (100/0% split)
  #23 i32
     init: i32.const 1051994
       4 × global.get     0 × global.set     4 total (100/0% split)
  #24 i32
     init: i32.const 1052058
       4 × global.get     0 × global.set     4 total (100/0% split)
  #25 i32
     init: i32.const 1051703
       4 × global.get     0 × global.set     4 total (100/0% split)
  #26 i32
     init: i32.const 1052090
       4 × global.get     0 × global.set     4 total (100/0% split)
  #27 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)
  #28 i32
     init: i32.const 1049392
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     30 (24.39% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  123(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"vswprintf_utf8cheerp.wasm",123,100,"[]",0,0

Counts of function types (16 unique types):
    1  (0.79%) × [i32, f64, i32, i32] -> [i32]
    1  (0.79%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.79%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.79%) × [f64] -> [i32]
    2  (1.59%) × [i32, i32, i32] -> []
    2  (1.59%) × [i32, i32, i32, i32] -> []
    4  (3.17%) × [] -> []
    4  (3.17%) × [] -> [i32]
    5  (3.97%) × [i32] -> []
    5  (3.97%) × [i32, i32] -> []
    7  (5.56%) × [i32, i32, i32, i32, i32, i32] -> [i32]
   10  (7.94%) × [i32, i32, i32, i32, i32] -> [i32]
   12  (9.52%) × [i32] -> [i32]
   15 (11.90%) × [i32, i32, i32, i32] -> [i32]
   27 (21.43%) × [i32, i32] -> [i32]
   29 (23.02%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 15 (12.20% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32, i32, i32] -> [i32]
         range: [    6,   10]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   11,   14]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [   15,   17]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [   18,   19]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   20,   20]   length:   1   unique funcs:    1   type: [i32] -> []
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     3 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     5 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:     17                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     18                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #17 is indirectly called with a fixed table index
  global.get 19
  i32.load
  local.tee 2
  ...
function #18 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(18), end idx: Some(18)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 3
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 5
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(17), end idx: Some(17)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  total classes: 8

CSV data for further analysis: vswprintf_utf8cheerp.wasm,30251,439,28,5.9957175,126,21,4,8,1,6,3.5,5,458,112,24.45415,96,20.9607,20,4.366812

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"vswprintf_utf8cheerp.wasm",0,0,1,"i32.const"
"vswprintf_utf8cheerp.wasm",1,1,1,"i32.const"
"vswprintf_utf8cheerp.wasm",2,3,2,"local.(get|tee)"
"vswprintf_utf8cheerp.wasm",3,5,3,"local.(get|tee)"
"vswprintf_utf8cheerp.wasm",4,4,5,"i32.load"
"vswprintf_utf8cheerp.wasm",5,5,5,"local.(get|tee)"
"vswprintf_utf8cheerp.wasm",6,1,5,"i32.const"
"vswprintf_utf8cheerp.wasm",7,4,6,"local.(get|tee)"
