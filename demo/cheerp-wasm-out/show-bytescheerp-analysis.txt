Input file: show-bytescheerp.wasm
  binary:    show-bytescheerp.wasm

Functions:           79
  Imported:           3
  Non-imported:      76
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 16.46% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      9517
  call:             147 (1.54% of all instructions)
  call_indirect:     25 (0.26% of all instructions, 14.53% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     26 × global.get   59 × global.set   85 total (31/69% split)
  #1 i32
     init: i32.const 1048860
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048868
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050908
     12 × global.get    0 × global.set   12 total (100/0% split)
  #4 i32
     init: i32.const 1050864
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1049888
      7 × global.get    0 × global.set    7 total (100/0% split)
  #6 i32
     init: i32.const 1050648
      6 × global.get    0 × global.set    6 total (100/0% split)
  #7 i32
     init: i32.const 1050752
      6 × global.get    0 × global.set    6 total (100/0% split)
  #8 i32
     init: i32.const 1050544
      6 × global.get    0 × global.set    6 total (100/0% split)
  #9 i32
     init: i32.const 1050904
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1048824
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1050351
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1048844
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     18 (23.68% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   76(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"show-bytescheerp.wasm",76,100,"[]",0,0

Counts of function types (12 unique types):
    1  (1.27%) × [i32, i32, i32, i32] -> []
    1  (1.27%) × [f32] -> []
    2  (2.53%) × [i32, i32, i32] -> []
    3  (3.80%) × [] -> [i32]
    3  (3.80%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (6.33%) × [i32] -> []
    5  (6.33%) × [i32, i32] -> []
    9 (11.39%) × [] -> []
    9 (11.39%) × [i32] -> [i32]
   10 (12.66%) × [i32, i32, i32, i32] -> [i32]
   15 (18.99%) × [i32, i32] -> [i32]
   16 (20.25%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 13 (17.11% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32] -> []
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
     3 × fixed index:     11                  source:  i32.const   type: [i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #7 is indirectly called with a fixed table index
  global.get 9
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...
function #11 is indirectly called with a fixed table index
  global.get 0
  local.tee 1
  i32.const -8
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32] -> []
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 3
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 5
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  total classes: 8

CSV data for further analysis: show-bytescheerp.wasm,9517,147,25,14.5348835,79,13,4,8,1,6,3.125,3,255,76,29.80392,61,23.921568,20,7.8431373

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"show-bytescheerp.wasm",0,0,1,"i32.const"
"show-bytescheerp.wasm",1,1,1,"i32.const"
"show-bytescheerp.wasm",2,3,2,"local.(get|tee)"
"show-bytescheerp.wasm",3,1,2,"local.(get|tee)"
"show-bytescheerp.wasm",4,1,3,"i32.const"
"show-bytescheerp.wasm",5,4,5,"i32.load"
"show-bytescheerp.wasm",6,1,5,"i32.const"
"show-bytescheerp.wasm",7,4,6,"local.(get|tee)"
