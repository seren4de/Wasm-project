Input file: c_atoi_str_to_integercheerp.wasm
  binary:    c_atoi_str_to_integercheerp.wasm

Functions:           72
  Imported:           3
  Non-imported:      69
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 16.67% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      9476
  call:             135 (1.42% of all instructions)
  call_indirect:     22 (0.23% of all instructions, 14.01% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     15 × global.get   37 × global.set   52 total (29/71% split)
  #1 i32
     init: i32.const 1048852
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048860
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1051204
     12 × global.get    0 × global.set   12 total (100/0% split)
  #4 i32
     init: i32.const 1051152
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1049884
      8 × global.get    0 × global.set    8 total (100/0% split)
  #6 i32
     init: i32.const 1050694
      6 × global.get    0 × global.set    6 total (100/0% split)
  #7 i32
     init: i32.const 1050706
      6 × global.get    0 × global.set    6 total (100/0% split)
  #8 i32
     init: i32.const 1050832
      5 × global.get    0 × global.set    5 total (100/0% split)
  #9 i32
     init: i32.const 1051040
      5 × global.get    0 × global.set    5 total (100/0% split)
  #10 i32
     init: i32.const 1050936
      5 × global.get    0 × global.set    5 total (100/0% split)
  #11 i32
     init: i32.const 1050464
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1048836
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1048824
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 i32
     init: i32.const 1051192
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     13 (18.84% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   69(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"c_atoi_str_to_integercheerp.wasm",69,100,"[]",0,0

Counts of function types (11 unique types):
    2  (2.78%) × [i32, i32, i32] -> []
    2  (2.78%) × [i32, i32, i32, i32] -> []
    3  (4.17%) × [] -> [i32]
    3  (4.17%) × [i32] -> []
    3  (4.17%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (5.56%) × [] -> []
    4  (5.56%) × [i32, i32] -> []
   10 (13.89%) × [i32] -> [i32]
   10 (13.89%) × [i32, i32, i32, i32] -> [i32]
   15 (20.83%) × [i32, i32, i32] -> [i32]
   16 (22.22%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (15.94% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      8                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #7 is indirectly called with a fixed table index
  global.get 14
  i32.load
  local.tee 2
  ...
function #8 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 5
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  total classes: 7

CSV data for further analysis: c_atoi_str_to_integercheerp.wasm,9476,135,22,14.012739,72,12,4,7,1,6,3.142857142857143,2,246,70,28.455284,58,23.577236,20,8.130081

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"c_atoi_str_to_integercheerp.wasm",0,0,1,"i32.const"
"c_atoi_str_to_integercheerp.wasm",1,1,1,"i32.const"
"c_atoi_str_to_integercheerp.wasm",2,3,2,"local.(get|tee)"
"c_atoi_str_to_integercheerp.wasm",3,1,2,"local.(get|tee)"
"c_atoi_str_to_integercheerp.wasm",4,4,5,"i32.load"
"c_atoi_str_to_integercheerp.wasm",5,1,5,"i32.const"
"c_atoi_str_to_integercheerp.wasm",6,4,6,"local.(get|tee)"
