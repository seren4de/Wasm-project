Input file: 13288cheerp.wasm
  binary:    13288cheerp.wasm

Functions:          103
  Imported:           3
  Non-imported:     100
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 12.62% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17425
  call:             249 (1.43% of all instructions)
  call_indirect:     40 (0.23% of all instructions, 13.84% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      33 × global.get   110 × global.set   143 total (23/77% split)
  #1 i32
     init: i32.const 1049144
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049152
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1050188
      15 × global.get     0 × global.set    15 total (100/0% split)
  #4 i32
     init: i32.const 1053052
      12 × global.get     0 × global.set    12 total (100/0% split)
  #5 i32
     init: i32.const 1052896
       9 × global.get     0 × global.set     9 total (100/0% split)
  #6 i32
     init: i32.const 1052688
       9 × global.get     0 × global.set     9 total (100/0% split)
  #7 i32
     init: i32.const 1053008
       9 × global.get     0 × global.set     9 total (100/0% split)
  #8 i32
     init: i32.const 1052792
       9 × global.get     0 × global.set     9 total (100/0% split)
  #9 i32
     init: i32.const 1053048
       4 × global.get     0 × global.set     4 total (100/0% split)
  #10 i32
     init: i32.const 1049128
       4 × global.get     0 × global.set     4 total (100/0% split)
  #11 i32
     init: i32.const 1049120
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1050754
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     22 (22.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  100(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"13288cheerp.wasm",100,100,"[]",0,0

Counts of function types (15 unique types):
    1  (0.97%) × [i32, i32, i32, i32] -> []
    1  (0.97%) × [i32, f64, i32, i32] -> [i32]
    1  (0.97%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.97%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.97%) × [f64] -> [i32]
    2  (1.94%) × [i32, i32, i32] -> []
    3  (2.91%) × [] -> []
    3  (2.91%) × [] -> [i32]
    6  (5.83%) × [i32] -> []
    6  (5.83%) × [i32, i32] -> []
    6  (5.83%) × [i32, i32, i32, i32, i32] -> [i32]
   11 (10.68%) × [i32] -> [i32]
   15 (14.56%) × [i32, i32, i32, i32] -> [i32]
   22 (21.36%) × [i32, i32, i32] -> [i32]
   24 (23.30%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (11.00% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [    6,    8]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    9,   10]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      8                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #8 is indirectly called with a fixed table index
  global.get 9
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 5
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 25
  total classes: 6

CSV data for further analysis: 13288cheerp.wasm,17425,249,40,13.840831,103,13,5,6,1,25,6.666666666666667,5,652,175,26.84049,164,25.153374,25,3.8343558

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"13288cheerp.wasm",0,1,1,"i32.const"
"13288cheerp.wasm",1,3,2,"local.(get|tee)"
"13288cheerp.wasm",2,1,2,"local.(get|tee)"
"13288cheerp.wasm",3,5,5,"i32.load"
"13288cheerp.wasm",4,1,5,"i32.const"
"13288cheerp.wasm",5,5,25,"local.(get|tee)"
