Input file: test_stdlibscheerp.wasm
  binary:    test_stdlibscheerp.wasm

Functions:          113
  Imported:           5
  Non-imported:     108
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 12.39% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     23418
  call:             300 (1.28% of all instructions)
  call_indirect:     61 (0.26% of all instructions, 16.90% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      40 × global.get   121 × global.set   161 total (25/75% split)
  #1 i32
     init: i32.const 1049244
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049252
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1051652
      14 × global.get     0 × global.set    14 total (100/0% split)
  #4 f64
     init: f64.const 0
      10 × global.get     0 × global.set    10 total (100/0% split)
  #5 i32
     init: i32.const 1050304
      12 × global.get     0 × global.set    12 total (100/0% split)
  #6 i32
     init: i32.const 1051600
       9 × global.get     0 × global.set     9 total (100/0% split)
  #7 f64
     init: f64.const 0.5
       7 × global.get     0 × global.set     7 total (100/0% split)
  #8 f64
     init: f64.const 0
       6 × global.get     0 × global.set     6 total (100/0% split)
  #9 i32
     init: i32.const 1051280
       5 × global.get     0 × global.set     5 total (100/0% split)
  #10 i32
     init: i32.const 1051488
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1051384
       5 × global.get     0 × global.set     5 total (100/0% split)
  #12 i32
     init: i32.const 1050284
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1050280
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1050360
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1051640
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1050276
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1050815
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1050272
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1050791
       3 × global.get     0 × global.set     3 total (100/0% split)
  #20 i32
     init: i32.const 1050813
       3 × global.get     0 × global.set     3 total (100/0% split)
  #21 i32
     init: i32.const 1050809
       3 × global.get     0 × global.set     3 total (100/0% split)
  #22 i32
     init: i32.const 1050723
       3 × global.get     0 × global.set     3 total (100/0% split)
  #23 i32
     init: i32.const 1050799
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     22 (20.37% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  108(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_stdlibscheerp.wasm",108,100,"[]",0,0

Counts of function types (21 unique types):
    1  (0.88%) × [] -> [f64]
    1  (0.88%) × [i32, i32, i32] -> [f64]
    1  (0.88%) × [i32, i32, i32, i32, i32] -> []
    1  (0.88%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [i32, f64, i32, i32] -> [i32]
    1  (0.88%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [f64] -> [i32]
    1  (0.88%) × [f64] -> [f64]
    3  (2.65%) × [i32, i32] -> [f64]
    3  (2.65%) × [i32, i32, i32] -> []
    3  (2.65%) × [i32, i32, i32, i32] -> []
    4  (3.54%) × [] -> [i32]
    4  (3.54%) × [i32] -> []
    5  (4.42%) × [] -> []
    5  (4.42%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (5.31%) × [i32, i32] -> []
   12 (10.62%) × [i32] -> [i32]
   13 (11.50%) × [i32, i32, i32, i32] -> [i32]
   22 (19.47%) × [i32, i32] -> [i32]
   24 (21.24%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 13 (12.04% of all functions)

Table elements initialization:
         range: [    0,    1]   length:   2   unique funcs:    2   type: [] -> []
         range: [    2,    5]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    6,    9]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
    22 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      9                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #9 is indirectly called with a fixed table index
  global.get 15
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 5
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 22
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 7

CSV data for further analysis: test_stdlibscheerp.wasm,23418,300,61,16.897507,113,14,4,7,1,25,8.714285714285714,5,1040,236,22.692308,216,20.76923,20,1.9230769

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_stdlibscheerp.wasm",0,0,1,"i32.const"
"test_stdlibscheerp.wasm",1,1,1,"i32.const"
"test_stdlibscheerp.wasm",2,1,2,"local.(get|tee)"
"test_stdlibscheerp.wasm",3,4,5,"i32.load"
"test_stdlibscheerp.wasm",4,1,5,"i32.const"
"test_stdlibscheerp.wasm",5,4,22,"local.(get|tee)"
"test_stdlibscheerp.wasm",6,4,25,"local.(get|tee)"
