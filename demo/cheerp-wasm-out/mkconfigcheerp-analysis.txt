Input file: mkconfigcheerp.wasm
  binary:    mkconfigcheerp.wasm

Functions:           83
  Imported:           4
  Non-imported:      79
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 15.66% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11104
  call:             194 (1.75% of all instructions)
  call_indirect:     27 (0.24% of all instructions, 12.22% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     32 × global.get   82 × global.set  114 total (28/72% split)
  #1 i32
     init: i32.const 1048840
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1049876
     20 × global.get    0 × global.set   20 total (100/0% split)
  #3 i32
     init: i32.const 1048848
      0 × global.get    0 × global.set    0 total
  #4 i32
     init: i32.const 1050804
     14 × global.get    0 × global.set   14 total (100/0% split)
  #5 i32
     init: i32.const 1050440
      9 × global.get    0 × global.set    9 total (100/0% split)
  #6 i32
     init: i32.const 1050648
      9 × global.get    0 × global.set    9 total (100/0% split)
  #7 i32
     init: i32.const 1050760
      9 × global.get    0 × global.set    9 total (100/0% split)
  #8 i32
     init: i32.const 1050544
      9 × global.get    0 × global.set    9 total (100/0% split)
  #9 i32
     init: i32.const 1050800
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1049868
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1048824
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049872
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1049897
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     12 (15.19% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   79(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"mkconfigcheerp.wasm",79,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.20%) × [] -> [i32]
    1  (1.20%) × [i32, i32, i32, i32] -> []
    2  (2.41%) × [i32, i32, i32] -> []
    4  (4.82%) × [] -> []
    4  (4.82%) × [i32] -> []
    4  (4.82%) × [i32, i32] -> []
    4  (4.82%) × [i32, i32, i32, i32, i32] -> [i32]
   10 (12.05%) × [i32] -> [i32]
   13 (15.66%) × [i32, i32, i32, i32] -> [i32]
   15 (18.07%) × [i32, i32, i32] -> [i32]
   25 (30.12%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 14 (17.72% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    8]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 9
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 7
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 10
  total classes: 7

CSV data for further analysis: mkconfigcheerp.wasm,11104,194,27,12.217195,83,13,4,7,1,10,3.857142857142857,2,436,101,23.165138,83,19.036697,28,6.4220185

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"mkconfigcheerp.wasm",0,1,1,"local.(get|tee)"
"mkconfigcheerp.wasm",1,0,1,"i32.const"
"mkconfigcheerp.wasm",2,1,1,"i32.const"
"mkconfigcheerp.wasm",3,4,2,"local.(get|tee)"
"mkconfigcheerp.wasm",4,1,5,"i32.const"
"mkconfigcheerp.wasm",5,4,7,"i32.load"
"mkconfigcheerp.wasm",6,4,10,"local.(get|tee)"
