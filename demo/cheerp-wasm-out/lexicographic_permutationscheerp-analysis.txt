Input file: lexicographic_permutationscheerp.wasm
  binary:    lexicographic_permutationscheerp.wasm

Functions:          116
  Imported:           3
  Non-imported:     113
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         18
  Of those, unique functions:    18 (i.e., at least 15.52% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     23201
  call:             264 (1.14% of all instructions)
  call_indirect:     57 (0.25% of all instructions, 17.76% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     26 × global.get   70 × global.set   96 total (27/73% split)
  #1 i32
     init: i32.const 1049260
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1049268
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050288
     12 × global.get    0 × global.set   12 total (100/0% split)
  #4 i32
     init: i32.const 1053148
     12 × global.get    0 × global.set   12 total (100/0% split)
  #5 i32
     init: i32.const 1052984
     11 × global.get    0 × global.set   11 total (100/0% split)
  #6 i32
     init: i32.const 1052776
     11 × global.get    0 × global.set   11 total (100/0% split)
  #7 i32
     init: i32.const 1052880
     11 × global.get    0 × global.set   11 total (100/0% split)
  #8 i32
     init: i32.const 1049212
     10 × global.get    0 × global.set   10 total (100/0% split)
  #9 i32
     init: i32.const 1053096
      9 × global.get    0 × global.set    9 total (100/0% split)
  #10 i32
     init: i32.const 1049208
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 f64
     init: f64.const 0
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049240
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1050765
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 f64
     init: f64.const 0.5
      4 × global.get    0 × global.set    4 total (100/0% split)
  #15 i32
     init: i32.const 1053136
      4 × global.get    0 × global.set    4 total (100/0% split)
  #16 i32
     init: i32.const 1049244
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (21.24% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  113(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"lexicographic_permutationscheerp.wasm",113,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.86%) × [i32] -> [f32]
    1  (0.86%) × [i32, i32, i32] -> [f64]
    1  (0.86%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.86%) × [i32, f64, i32, i32] -> [i32]
    1  (0.86%) × [f64] -> [i32]
    1  (0.86%) × [f64] -> [f64]
    2  (1.72%) × [] -> [i32]
    2  (1.72%) × [i32, i32] -> [f64]
    2  (1.72%) × [i32, i32, i32, i32] -> []
    2  (1.72%) × [i32, i32, i32, i32, i32] -> []
    3  (2.59%) × [] -> []
    3  (2.59%) × [i32, i32, i32] -> []
    4  (3.45%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (5.17%) × [i32] -> []
    8  (6.90%) × [i32, i32] -> []
   13 (11.21%) × [i32] -> [i32]
   17 (14.66%) × [i32, i32, i32, i32] -> [i32]
   22 (18.97%) × [i32, i32, i32] -> [i32]
   26 (22.41%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 16 (14.16% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    6]   length:   6   unique funcs:    6   type: [i32, i32] -> [i32]
         range: [    7,   10]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   16,   17]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    22 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #5 is indirectly called with a fixed table index
  global.get 15
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #6
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #7
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 8
  class #8
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 22
  total classes: 9

CSV data for further analysis: lexicographic_permutationscheerp.wasm,23201,264,57,17.75701,116,18,13,9,1,22,6.333333333333333,6,1305,285,21.83908,258,19.770115,93,7.1264367

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"lexicographic_permutationscheerp.wasm",0,1,1,"local.(get|tee)"
"lexicographic_permutationscheerp.wasm",1,2,1,"other"
"lexicographic_permutationscheerp.wasm",2,1,1,"i32.const"
"lexicographic_permutationscheerp.wasm",3,1,5,"i32.const"
"lexicographic_permutationscheerp.wasm",4,4,6,"i32.load"
"lexicographic_permutationscheerp.wasm",5,4,6,"local.(get|tee)"
"lexicographic_permutationscheerp.wasm",6,3,7,"i32.load"
"lexicographic_permutationscheerp.wasm",7,6,8,"i32.load"
"lexicographic_permutationscheerp.wasm",8,6,22,"local.(get|tee)"
