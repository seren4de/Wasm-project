Input file: vr-coefscheerp.wasm
  binary:    vr-coefscheerp.wasm

Functions:          104
  Imported:           3
  Non-imported:     101
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 11.54% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     21194
  call:             284 (1.34% of all instructions)
  call_indirect:     40 (0.19% of all instructions, 12.35% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      31 × global.get   180 × global.set   211 total (15/85% split)
  #1 f64
     init: f64.const 0
      57 × global.get     0 × global.set    57 total (100/0% split)
  #2 f64
     init: f64.const 1
      56 × global.get     0 × global.set    56 total (100/0% split)
  #3 i32
     init: i32.const 1049700
       0 × global.get     0 × global.set     0 total
  #4 f64
     init: f64.const 0
      20 × global.get     0 × global.set    20 total (100/0% split)
  #5 f64
     init: f64.const 0.5
      18 × global.get     0 × global.set    18 total (100/0% split)
  #6 f32
     init: f32.const 0
      12 × global.get     0 × global.set    12 total (100/0% split)
  #7 i32
     init: i32.const 1049708
       0 × global.get     0 × global.set     0 total
  #8 i32
     init: i32.const 1051520
      12 × global.get     0 × global.set    12 total (100/0% split)
  #9 i32
     init: i32.const 1051464
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 f32
     init: f32.const 0
       9 × global.get     0 × global.set     9 total (100/0% split)
  #11 f64
     init: f64.const 1.5707963267948966
       8 × global.get     0 × global.set     8 total (100/0% split)
  #12 f64
     init: f64.const 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
       8 × global.get     0 × global.set     8 total (100/0% split)
  #13 f64
     init: f64.const 0.000000001
       7 × global.get     0 × global.set     7 total (100/0% split)
  #14 f64
     init: f64.const 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
       7 × global.get     0 × global.set     7 total (100/0% split)
  #15 i32
     init: i32.const 1049664
       7 × global.get     0 × global.set     7 total (100/0% split)
  #16 i32
     init: i32.const 1050728
       6 × global.get     0 × global.set     6 total (100/0% split)
  #17 i32
     init: i32.const 1051133
       6 × global.get     0 × global.set     6 total (100/0% split)
  #18 i32
     init: i32.const 1051144
       5 × global.get     0 × global.set     5 total (100/0% split)
  #19 i32
     init: i32.const 1051352
       5 × global.get     0 × global.set     5 total (100/0% split)
  #20 f64
     init: f64.const inf
       5 × global.get     0 × global.set     5 total (100/0% split)
  #21 f64
     init: f64.const 16777216
       5 × global.get     0 × global.set     5 total (100/0% split)
  #22 i32
     init: i32.const 1051248
       5 × global.get     0 × global.set     5 total (100/0% split)
  #23 i32
     init: i32.const 1051504
       4 × global.get     0 × global.set     4 total (100/0% split)
  #24 i32
     init: i32.const 1050732
       4 × global.get     0 × global.set     4 total (100/0% split)
  #25 i32
     init: i32.const 1051017
       4 × global.get     0 × global.set     4 total (100/0% split)
  #26 i32
     init: i32.const 1049248
       4 × global.get     0 × global.set     4 total (100/0% split)
  #27 f64
     init: f64.const 0.00000005960464477539063
       3 × global.get     0 × global.set     3 total (100/0% split)
  #28 f64
     init: f64.const 0.25
       3 × global.get     0 × global.set     3 total (100/0% split)
  #29 f64
     init: f64.const 0.0000000000000000000020222662487959506
       3 × global.get     0 × global.set     3 total (100/0% split)
  #30 f64
     init: f64.const 0.00000000006077100506506192
       3 × global.get     0 × global.set     3 total (100/0% split)
  #31 f64
     init: f64.const 3.141592653589793
       3 × global.get     0 × global.set     3 total (100/0% split)
  #32 f64
     init: f64.const 0.45
       2 × global.get     0 × global.set     2 total (100/0% split)
  #33 f64
     init: f64.const 1.5707963267341256
       2 × global.get     0 × global.set     2 total (100/0% split)
  #34 f64
     init: f64.const 0.00000000006077100506303966
       2 × global.get     0 × global.set     2 total (100/0% split)
  #35 f64
     init: f64.const -0.00000000006077100506506192
       2 × global.get     0 × global.set     2 total (100/0% split)
  #36 f64
     init: f64.const -0.0000000000000000000020222662487959506
       2 × global.get     0 × global.set     2 total (100/0% split)
  #37 f64
     init: f64.const NaN
       2 × global.get     0 × global.set     2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     29 (28.71% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  101(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"vr-coefscheerp.wasm",101,100,"[]",0,0

Counts of function types (26 unique types):
    1  (0.96%) × [i32] -> [f64]
    1  (0.96%) × [i32, i32, i32, i32] -> []
    1  (0.96%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.96%) × [i32, i32, f64, i32] -> []
    1  (0.96%) × [i32, i32, f64, i32] -> [f64]
    1  (0.96%) × [i32, f64, i32] -> []
    1  (0.96%) × [i32, f64, i32, i32] -> [i32]
    1  (0.96%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.96%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.96%) × [i32, f64, f64, f64, f64, i32, i32] -> []
    1  (0.96%) × [f64, i32] -> [i32]
    1  (0.96%) × [f64, i32] -> [f64]
    2  (1.92%) × [i32, i32, i32] -> []
    2  (1.92%) × [f64] -> [i32]
    2  (1.92%) × [f64, f64, i32] -> [f64]
    3  (2.88%) × [] -> []
    3  (2.88%) × [] -> [i32]
    3  (2.88%) × [f64, f64] -> [f64]
    4  (3.85%) × [i32] -> []
    4  (3.85%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (3.85%) × [f64] -> [f64]
    5  (4.81%) × [i32, i32] -> []
   10  (9.62%) × [i32, i32, i32, i32] -> [i32]
   12 (11.54%) × [i32] -> [i32]
   19 (18.27%) × [i32, i32] -> [i32]
   19 (18.27%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (10.89% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [    9,   10]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #7 is indirectly called with a fixed table index
  global.get 23
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 5
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 6

CSV data for further analysis: vr-coefscheerp.wasm,21194,284,40,12.345679,104,12,4,6,1,25,6.666666666666667,5,460,145,31.52174,134,29.130434,20,4.347826

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"vr-coefscheerp.wasm",0,1,1,"i32.const"
"vr-coefscheerp.wasm",1,3,2,"local.(get|tee)"
"vr-coefscheerp.wasm",2,1,2,"local.(get|tee)"
"vr-coefscheerp.wasm",3,4,5,"i32.load"
"vr-coefscheerp.wasm",4,1,5,"i32.const"
"vr-coefscheerp.wasm",5,4,25,"local.(get|tee)"
