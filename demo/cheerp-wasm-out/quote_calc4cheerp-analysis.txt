Input file: quote_calc4cheerp.wasm
  binary:    quote_calc4cheerp.wasm

Functions:           74
  Imported:           3
  Non-imported:      71
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 18.92% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      9504
  call:             120 (1.26% of all instructions)
  call_indirect:     21 (0.22% of all instructions, 14.89% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     11 × global.get   29 × global.set   40 total (28/72% split)
  #1 i32
     init: i32.const 1048856
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1053412
     38 × global.get    0 × global.set   38 total (100/0% split)
  #3 i32
     init: i32.const 1053400
     20 × global.get    0 × global.set   20 total (100/0% split)
  #4 i32
     init: i32.const 1053384
     17 × global.get    0 × global.set   17 total (100/0% split)
  #5 i32
     init: i32.const 1053420
     16 × global.get    0 × global.set   16 total (100/0% split)
  #6 i32
     init: i32.const 1048864
      0 × global.get    0 × global.set    0 total
  #7 i32
     init: i32.const 1049996
     12 × global.get    0 × global.set   12 total (100/0% split)
  #8 i32
     init: i32.const 1053532
     12 × global.get    0 × global.set   12 total (100/0% split)
  #9 i32
     init: i32.const 1053272
      9 × global.get    0 × global.set    9 total (100/0% split)
  #10 i32
     init: i32.const 1053544
      9 × global.get    0 × global.set    9 total (100/0% split)
  #11 i32
     init: i32.const 1053168
      9 × global.get    0 × global.set    9 total (100/0% split)
  #12 i32
     init: i32.const 1053064
      9 × global.get    0 × global.set    9 total (100/0% split)
  #13 i32
     init: i32.const 1053380
      8 × global.get    0 × global.set    8 total (100/0% split)
  #14 i32
     init: i32.const 1053392
      4 × global.get    0 × global.set    4 total (100/0% split)
  #15 i32
     init: i32.const 1048844
      4 × global.get    0 × global.set    4 total (100/0% split)
  #16 i32
     init: i32.const 1053416
      4 × global.get    0 × global.set    4 total (100/0% split)
  #17 i32
     init: i32.const 1049880
      4 × global.get    0 × global.set    4 total (100/0% split)
  #18 i32
     init: i32.const 1048836
      4 × global.get    0 × global.set    4 total (100/0% split)
  #19 i32
     init: i32.const 1052586
      4 × global.get    0 × global.set    4 total (100/0% split)
  #20 i32
     init: i32.const 1053592
      4 × global.get    0 × global.set    4 total (100/0% split)
  #21 i32
     init: i32.const 1053376
      3 × global.get    0 × global.set    3 total (100/0% split)
  #22 i32
     init: i32.const 1053396
      3 × global.get    0 × global.set    3 total (100/0% split)
  #23 i32
     init: i32.const 1053404
      3 × global.get    0 × global.set    3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (15.49% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   71(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"quote_calc4cheerp.wasm",71,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.35%) × [i32, i32, i32, i32] -> []
    2  (2.70%) × [i32, i32, i32] -> []
    3  (4.05%) × [] -> []
    3  (4.05%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (5.41%) × [i32] -> []
    4  (5.41%) × [i32, i32] -> []
    6  (8.11%) × [] -> [i32]
    9 (12.16%) × [i32, i32, i32, i32] -> [i32]
   11 (14.86%) × [i32] -> [i32]
   13 (17.57%) × [i32, i32, i32] -> [i32]
   18 (24.32%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (16.90% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    8]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     3 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 20
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 3
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  total classes: 8

CSV data for further analysis: quote_calc4cheerp.wasm,9504,120,21,14.893617,74,14,4,8,1,6,2.625,2,240,70,29.166666,53,22.083334,12,5

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"quote_calc4cheerp.wasm",0,1,1,"local.(get|tee)"
"quote_calc4cheerp.wasm",1,0,1,"i32.const"
"quote_calc4cheerp.wasm",2,1,1,"i32.const"
"quote_calc4cheerp.wasm",3,4,2,"local.(get|tee)"
"quote_calc4cheerp.wasm",4,1,2,"local.(get|tee)"
"quote_calc4cheerp.wasm",5,4,3,"i32.load"
"quote_calc4cheerp.wasm",6,1,5,"i32.const"
"quote_calc4cheerp.wasm",7,4,6,"local.(get|tee)"
