Input file: gen_init_cpiocheerp.wasm
  binary:    gen_init_cpiocheerp.wasm

Functions:          175
  Imported:           7
  Non-imported:     168
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         26
  Of those, unique functions:    26 (i.e., at least 14.86% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     29666
  call:             456 (1.54% of all instructions)
  call_indirect:     48 (0.16% of all instructions, 9.52% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      71 × global.get   188 × global.set   259 total (27/73% split)
  #1 i32
     init: i32.const 1050392
      68 × global.get     0 × global.set    68 total (100/0% split)
  #2 i32
     init: i32.const 1049304
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1055348
      16 × global.get     0 × global.set    16 total (100/0% split)
  #4 i32
     init: i32.const 1049312
       0 × global.get     0 × global.set     0 total
  #5 i32
     init: i32.const 1055404
      16 × global.get     0 × global.set    16 total (100/0% split)
  #6 i32
     init: i32.const 1055240
      13 × global.get     0 × global.set    13 total (100/0% split)
  #7 i32
     init: i32.const 1055032
      13 × global.get     0 × global.set    13 total (100/0% split)
  #8 i32
     init: i32.const 1055136
      13 × global.get     0 × global.set    13 total (100/0% split)
  #9 i32
     init: i32.const 1049288
      12 × global.get     0 × global.set    12 total (100/0% split)
  #10 i32
     init: i32.const 1054099
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1055360
       9 × global.get     0 × global.set     9 total (100/0% split)
  #12 i32
     init: i32.const 1050352
       9 × global.get     0 × global.set     9 total (100/0% split)
  #13 i32
     init: i32.const 1050340
       5 × global.get     0 × global.set     5 total (100/0% split)
  #14 i32
     init: i32.const 1055020
       5 × global.get     0 × global.set     5 total (100/0% split)
  #15 i32
     init: i32.const 1055024
       5 × global.get     0 × global.set     5 total (100/0% split)
  #16 i32
     init: i32.const 1053643
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1055344
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1052910
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1055400
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 i32
     init: i32.const 1052645
       4 × global.get     0 × global.set     4 total (100/0% split)
  #23 i32
     init: i32.const 1050336
       4 × global.get     0 × global.set     4 total (100/0% split)
  #24 i32
     init: i32.const 1050332
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     44 (26.19% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  168(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"gen_init_cpiocheerp.wasm",168,100,"[]",0,0

Counts of function types (21 unique types):
    1  (0.57%) × [] -> [f64]
    1  (0.57%) × [i32] -> [f32]
    1  (0.57%) × [i32, i32, i32] -> [f64]
    1  (0.57%) × [i32, i32, i32, i32] -> []
    1  (0.57%) × [i32, f64, i32, i32] -> [i32]
    1  (0.57%) × [f64] -> [i32]
    1  (0.57%) × [f64] -> [f64]
    2  (1.14%) × [i32, i32] -> [f64]
    2  (1.14%) × [i32, i32, i32, i32, i32] -> []
    2  (1.14%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    2  (1.14%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    3  (1.71%) × [] -> [i32]
    3  (1.71%) × [i32, i32, i32] -> []
    6  (3.43%) × [] -> []
    6  (3.43%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (4.00%) × [i32, i32] -> []
   10  (5.71%) × [i32] -> []
   22 (12.57%) × [i32] -> [i32]
   28 (16.00%) × [i32, i32, i32, i32] -> [i32]
   37 (21.14%) × [i32, i32, i32] -> [i32]
   38 (21.71%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 22 (13.10% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   11]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [   12,   14]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   17,   23]   length:   7   unique funcs:    7   type: [i32] -> [i32]
         range: [   24,   25]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               38
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               38
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               37
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               37
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               38
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               37
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  14 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 21
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 1
  class #2
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #5
    type: [i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 1
  class #6
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #7
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #8
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #9
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #10
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #11
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #12
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  class #13
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 10
  total classes: 14

CSV data for further analysis: gen_init_cpiocheerp.wasm,29666,456,48,9.523809,175,26,21,14,1,10,3.4285714285714284,2,1431,219,15.303984,192,13.417191,104,7.267645

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"gen_init_cpiocheerp.wasm",0,1,1,"local.(get|tee)"
"gen_init_cpiocheerp.wasm",1,7,1,"i32.load"
"gen_init_cpiocheerp.wasm",2,7,1,"local.(get|tee)"
"gen_init_cpiocheerp.wasm",3,2,1,"other"
"gen_init_cpiocheerp.wasm",4,0,1,"i32.const"
"gen_init_cpiocheerp.wasm",5,1,1,"i32.const"
"gen_init_cpiocheerp.wasm",6,5,2,"local.(get|tee)"
"gen_init_cpiocheerp.wasm",7,1,2,"local.(get|tee)"
"gen_init_cpiocheerp.wasm",8,0,2,"i32.const"
"gen_init_cpiocheerp.wasm",9,1,5,"i32.const"
"gen_init_cpiocheerp.wasm",10,6,6,"i32.load"
"gen_init_cpiocheerp.wasm",11,3,7,"i32.load"
"gen_init_cpiocheerp.wasm",12,5,8,"i32.load"
"gen_init_cpiocheerp.wasm",13,6,10,"local.(get|tee)"
