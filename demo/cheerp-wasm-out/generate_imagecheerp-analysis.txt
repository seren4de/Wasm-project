Input file: generate_imagecheerp.wasm
  binary:    generate_imagecheerp.wasm

Functions:          137
  Imported:           6
  Non-imported:     131
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         19
  Of those, unique functions:    19 (i.e., at least 13.87% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25158
  call:             365 (1.45% of all instructions)
  call_indirect:     47 (0.19% of all instructions, 11.41% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      76 × global.get   184 × global.set   260 total (29/71% split)
  #1 i32
     init: i32.const 1049264
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049244
      20 × global.get     0 × global.set    20 total (100/0% split)
  #3 i32
     init: i32.const 1049272
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1052424
      14 × global.get     0 × global.set    14 total (100/0% split)
  #5 i32
     init: i32.const 1053092
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 i32
     init: i32.const 1052320
      14 × global.get     0 × global.set    14 total (100/0% split)
  #7 i32
     init: i32.const 1052216
      14 × global.get     0 × global.set    14 total (100/0% split)
  #8 i32
     init: i32.const 1049220
      11 × global.get     0 × global.set    11 total (100/0% split)
  #9 i32
     init: i32.const 1053048
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 i32
     init: i32.const 1049236
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1053088
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1049240
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1050544
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1050292
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1052208
       3 × global.get     0 × global.set     3 total (100/0% split)
  #18 i32
     init: i32.const 1052212
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     32 (24.43% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  131(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"generate_imagecheerp.wasm",131,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.73%) × [i32] -> [f32]
    1  (0.73%) × [i32, i32, i32] -> [f64]
    1  (0.73%) × [i32, i32, i32, i32] -> []
    1  (0.73%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.73%) × [i32, f64, i32, i32] -> [i32]
    1  (0.73%) × [f64] -> [i32]
    1  (0.73%) × [f64] -> [f64]
    2  (1.46%) × [i32, i32] -> [f64]
    2  (1.46%) × [i32, i32, i32, i32, i32] -> []
    3  (2.19%) × [] -> [i32]
    3  (2.19%) × [i32, i32, i32] -> []
    5  (3.65%) × [i32] -> []
    6  (4.38%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (5.11%) × [] -> []
    9  (6.57%) × [i32, i32] -> []
   14 (10.22%) × [i32] -> [i32]
   24 (17.52%) × [i32, i32, i32, i32] -> [i32]
   26 (18.98%) × [i32, i32, i32] -> [i32]
   29 (21.17%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 21 (16.03% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   10]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   15,   16]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  13 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 11
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #5
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #7
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #8
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #10
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #11
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  class #12
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 10
  total classes: 13

CSV data for further analysis: generate_imagecheerp.wasm,25158,365,47,11.407767,137,19,13,13,1,10,3.6153846153846154,2,1098,190,17.30419,163,14.845173,91,8.287796

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"generate_imagecheerp.wasm",0,1,1,"local.(get|tee)"
"generate_imagecheerp.wasm",1,1,1,"local.(get|tee)"
"generate_imagecheerp.wasm",2,2,1,"other"
"generate_imagecheerp.wasm",3,0,1,"i32.const"
"generate_imagecheerp.wasm",4,1,1,"i32.const"
"generate_imagecheerp.wasm",5,5,2,"local.(get|tee)"
"generate_imagecheerp.wasm",6,1,2,"local.(get|tee)"
"generate_imagecheerp.wasm",7,0,2,"i32.const"
"generate_imagecheerp.wasm",8,1,5,"i32.const"
"generate_imagecheerp.wasm",9,5,6,"i32.load"
"generate_imagecheerp.wasm",10,3,7,"i32.load"
"generate_imagecheerp.wasm",11,5,8,"i32.load"
"generate_imagecheerp.wasm",12,5,10,"local.(get|tee)"
