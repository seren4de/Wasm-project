Input file: 05_06cheerp.wasm
  binary:    05_06cheerp.wasm

Functions:           82
  Imported:           5
  Non-imported:      77
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         15
  Of those, unique functions:    15 (i.e., at least 18.29% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11209
  call:             146 (1.30% of all instructions)
  call_indirect:     45 (0.40% of all instructions, 23.56% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     14 × global.get   35 × global.set   49 total (29/71% split)
  #1 i32
     init: i32.const 1048856
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048864
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050396
     12 × global.get    0 × global.set   12 total (100/0% split)
  #4 i32
     init: i32.const 1049884
     10 × global.get    0 × global.set   10 total (100/0% split)
  #5 i32
     init: i32.const 1050352
      9 × global.get    0 × global.set    9 total (100/0% split)
  #6 i32
     init: i32.const 1050240
      8 × global.get    0 × global.set    8 total (100/0% split)
  #7 i32
     init: i32.const 1050032
      8 × global.get    0 × global.set    8 total (100/0% split)
  #8 i32
     init: i32.const 1050136
      8 × global.get    0 × global.set    8 total (100/0% split)
  #9 i32
     init: i32.const 1048824
      5 × global.get    0 × global.set    5 total (100/0% split)
  #10 i32
     init: i32.const 1048840
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1049978
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1048836
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1050392
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     12 (15.58% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   77(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"05_06cheerp.wasm",77,100,"[]",0,0

Counts of function types (11 unique types):
    2  (2.44%) × [i32, i32, i32] -> []
    2  (2.44%) × [i32, i32, i32, i32] -> []
    3  (3.66%) × [] -> []
    3  (3.66%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (4.88%) × [] -> [i32]
    5  (6.10%) × [i32] -> []
    6  (7.32%) × [i32, i32] -> []
   10 (12.20%) × [i32, i32, i32, i32] -> [i32]
   11 (13.41%) × [i32] -> [i32]
   16 (19.51%) × [i32, i32, i32] -> [i32]
   20 (24.39%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 15 (19.48% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,    9]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   12]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    22 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 13
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #8
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 22
  total classes: 9

CSV data for further analysis: 05_06cheerp.wasm,11209,146,45,23.56021,82,15,4,9,1,22,5,2,701,190,27.104137,168,23.965763,24,3.4236805

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"05_06cheerp.wasm",0,1,1,"local.(get|tee)"
"05_06cheerp.wasm",1,1,1,"local.(get|tee)"
"05_06cheerp.wasm",2,0,1,"i32.const"
"05_06cheerp.wasm",3,1,1,"i32.const"
"05_06cheerp.wasm",4,1,2,"local.(get|tee)"
"05_06cheerp.wasm",5,1,5,"i32.const"
"05_06cheerp.wasm",6,4,6,"i32.load"
"05_06cheerp.wasm",7,4,6,"local.(get|tee)"
"05_06cheerp.wasm",8,5,22,"local.(get|tee)"
