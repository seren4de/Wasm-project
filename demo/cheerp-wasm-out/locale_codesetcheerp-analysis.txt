Input file: locale_codesetcheerp.wasm
  binary:    locale_codesetcheerp.wasm

Functions:           91
  Imported:           5
  Non-imported:      86
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         20
  Of those, unique functions:    20 (i.e., at least 21.98% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     13217
  call:             246 (1.86% of all instructions)
  call_indirect:     15 (0.11% of all instructions, 5.75% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      12 × global.get   106 × global.set   118 total (10/90% split)
  #1 i32
     init: i32.const 1049300
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049308
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1053037
      13 × global.get     0 × global.set    13 total (100/0% split)
  #4 i32
     init: i32.const 1052196
      12 × global.get     0 × global.set    12 total (100/0% split)
  #5 i32
     init: i32.const 1052144
       9 × global.get     0 × global.set     9 total (100/0% split)
  #6 i32
     init: i32.const 1050520
       8 × global.get     0 × global.set     8 total (100/0% split)
  #7 i32
     init: i32.const 1052208
       8 × global.get     0 × global.set     8 total (100/0% split)
  #8 i32
     init: i32.const 1049280
       7 × global.get     0 × global.set     7 total (100/0% split)
  #9 i32
     init: i32.const 1052200
       5 × global.get     0 × global.set     5 total (100/0% split)
  #10 i32
     init: i32.const 1052204
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1050680
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1050552
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1050328
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1050616
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1050584
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1052184
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1049288
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1050648
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1049268
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1049276
       3 × global.get     0 × global.set     3 total (100/0% split)
  #21 i32
     init: i32.const 1051824
       3 × global.get     0 × global.set     3 total (100/0% split)
  #22 i32
     init: i32.const 1051928
       3 × global.get     0 × global.set     3 total (100/0% split)
  #23 i32
     init: i32.const 1052032
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     12 (13.95% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   86(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"locale_codesetcheerp.wasm",86,100,"[]",0,0

Counts of function types (10 unique types):
    4  (4.40%) × [] -> []
    5  (5.49%) × [i32, i32] -> []
    5  (5.49%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.49%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    7  (7.69%) × [] -> [i32]
    7  (7.69%) × [i32] -> []
    8  (8.79%) × [i32] -> [i32]
    9  (9.89%) × [i32, i32, i32, i32] -> [i32]
   17 (18.68%) × [i32, i32, i32] -> [i32]
   24 (26.37%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 8 (9.30% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32, i32, i32] -> [i32]
         range: [    6,   10]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32, i32] -> [i32]
         range: [   14,   16]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   18,   19]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × fixed index:     16                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     19                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #16 is indirectly called with a fixed table index
  global.get 16
  i32.load
  local.tee 2
  ...
function #19 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(19), end idx: Some(19)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 5
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(16), end idx: Some(16)
    size (of class): 1
    count (how often class appears): 5
  total classes: 6

CSV data for further analysis: locale_codesetcheerp.wasm,13217,246,15,5.7471266,91,20,3,6,1,5,2.5,2,246,42,17.073172,31,12.601626,15,6.097561

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"locale_codesetcheerp.wasm",0,1,1,"local.(get|tee)"
"locale_codesetcheerp.wasm",1,3,1,"local.(get|tee)"
"locale_codesetcheerp.wasm",2,1,1,"i32.const"
"locale_codesetcheerp.wasm",3,3,2,"local.(get|tee)"
"locale_codesetcheerp.wasm",4,3,5,"i32.load"
"locale_codesetcheerp.wasm",5,1,5,"i32.const"
