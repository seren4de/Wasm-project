Input file: 2cheerp.wasm
  binary:    2cheerp.wasm

Functions:          149
  Imported:           5
  Non-imported:     144
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         20
  Of those, unique functions:    20 (i.e., at least 13.42% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     26979
  call:             383 (1.42% of all instructions)
  call_indirect:     44 (0.16% of all instructions, 10.30% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      65 × global.get   171 × global.set   236 total (28/72% split)
  #1 i32
     init: i32.const 1049212
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1052300
      23 × global.get     0 × global.set    23 total (100/0% split)
  #3 i32
     init: i32.const 1050324
      20 × global.get     0 × global.set    20 total (100/0% split)
  #4 i32
     init: i32.const 1049220
       0 × global.get     0 × global.set     0 total
  #5 i32
     init: i32.const 1052296
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 i32
     init: i32.const 1050320
      13 × global.get     0 × global.set    13 total (100/0% split)
  #7 i32
     init: i32.const 1051984
      12 × global.get     0 × global.set    12 total (100/0% split)
  #8 i32
     init: i32.const 1052192
      12 × global.get     0 × global.set    12 total (100/0% split)
  #9 i32
     init: i32.const 1052088
      12 × global.get     0 × global.set    12 total (100/0% split)
  #10 i32
     init: i32.const 1053140
      10 × global.get     0 × global.set    10 total (100/0% split)
  #11 i32
     init: i32.const 1053088
       9 × global.get     0 × global.set     9 total (100/0% split)
  #12 i32
     init: i32.const 1051980
       9 × global.get     0 × global.set     9 total (100/0% split)
  #13 i32
     init: i32.const 1050280
       5 × global.get     0 × global.set     5 total (100/0% split)
  #14 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1050276
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1050589
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1053128
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1050272
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1315336
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1315296
       3 × global.get     0 × global.set     3 total (100/0% split)
  #22 i32
     init: i32.const 1315316
       3 × global.get     0 × global.set     3 total (100/0% split)
  #23 i32
     init: i32.const 1315328
       3 × global.get     0 × global.set     3 total (100/0% split)
  #24 i32
     init: i32.const 1315312
       3 × global.get     0 × global.set     3 total (100/0% split)
  #25 i32
     init: i32.const 1315300
       3 × global.get     0 × global.set     3 total (100/0% split)
  #26 i32
     init: i32.const 1315332
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     34 (23.61% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  144(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"2cheerp.wasm",144,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.67%) × [i32] -> [f32]
    1  (0.67%) × [i32, i32, i32] -> [f64]
    1  (0.67%) × [i32, i32, i32, i32] -> []
    1  (0.67%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.67%) × [i32, f64, i32, i32] -> [i32]
    1  (0.67%) × [f64] -> [i32]
    1  (0.67%) × [f64] -> [f64]
    2  (1.34%) × [i32, i32] -> [f64]
    2  (1.34%) × [i32, i32, i32, i32, i32] -> []
    3  (2.01%) × [i32, i32, i32] -> []
    4  (2.68%) × [] -> [i32]
    5  (3.36%) × [i32, i32, i32, i32, i32] -> [i32]
    8  (5.37%) × [i32] -> []
    9  (6.04%) × [] -> []
   10  (6.71%) × [i32, i32] -> []
   17 (11.41%) × [i32] -> [i32]
   24 (16.11%) × [i32, i32, i32, i32] -> [i32]
   27 (18.12%) × [i32, i32, i32] -> [i32]
   31 (20.81%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 21 (14.58% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   11]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [   12,   14]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   17,   18]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   19,   19]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               31
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               31
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               31
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     14                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  13 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 18
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  global.get 10
  i32.const 0
  i32.store
  ...
function #14 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(14), end idx: Some(14)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 2
  class #8
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #10
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #11
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #12
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  total classes: 13

CSV data for further analysis: 2cheerp.wasm,26979,383,44,10.30445,149,20,14,13,1,8,3.3846153846153846,2,1064,191,17.951128,157,14.755639,97,9.116541

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"2cheerp.wasm",0,1,1,"local.(get|tee)"
"2cheerp.wasm",1,1,1,"local.(get|tee)"
"2cheerp.wasm",2,2,1,"other"
"2cheerp.wasm",3,1,1,"i32.const"
"2cheerp.wasm",4,5,2,"local.(get|tee)"
"2cheerp.wasm",5,1,2,"local.(get|tee)"
"2cheerp.wasm",6,0,2,"i32.const"
"2cheerp.wasm",7,1,2,"i32.const"
"2cheerp.wasm",8,1,5,"i32.const"
"2cheerp.wasm",9,6,6,"i32.load"
"2cheerp.wasm",10,6,6,"local.(get|tee)"
"2cheerp.wasm",11,3,7,"i32.load"
"2cheerp.wasm",12,5,8,"i32.load"
