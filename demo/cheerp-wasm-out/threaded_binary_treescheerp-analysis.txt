Input file: threaded_binary_treescheerp.wasm
  binary:    threaded_binary_treescheerp.wasm

Functions:          121
  Imported:           3
  Non-imported:     118
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         19
  Of those, unique functions:    19 (i.e., at least 15.70% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     22660
  call:             295 (1.30% of all instructions)
  call_indirect:     41 (0.18% of all instructions, 12.20% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      47 × global.get   114 × global.set   161 total (29/71% split)
  #1 i32
     init: i32.const 1049260
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049268
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1051676
      12 × global.get     0 × global.set    12 total (100/0% split)
  #4 i32
     init: i32.const 1049224
      10 × global.get     0 × global.set    10 total (100/0% split)
  #5 i32
     init: i32.const 1050284
      10 × global.get     0 × global.set    10 total (100/0% split)
  #6 i32
     init: i32.const 1051520
       9 × global.get     0 × global.set     9 total (100/0% split)
  #7 i32
     init: i32.const 1051312
       9 × global.get     0 × global.set     9 total (100/0% split)
  #8 i32
     init: i32.const 1051632
       9 × global.get     0 × global.set     9 total (100/0% split)
  #9 i32
     init: i32.const 1051416
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 i32
     init: i32.const 1050592
       6 × global.get     0 × global.set     6 total (100/0% split)
  #11 i32
     init: i32.const 1050300
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1049240
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1049244
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1050589
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1051672
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1049248
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1050877
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     28 (23.73% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  118(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"threaded_binary_treescheerp.wasm",118,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.83%) × [i32] -> [f32]
    1  (0.83%) × [i32, i32, i32] -> [f64]
    1  (0.83%) × [i32, i32, i32, i32] -> []
    1  (0.83%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [i32, f64, i32, i32] -> [i32]
    1  (0.83%) × [f64] -> [i32]
    1  (0.83%) × [f64] -> [f64]
    2  (1.65%) × [i32, i32] -> [f64]
    2  (1.65%) × [i32, i32, i32, i32, i32] -> []
    3  (2.48%) × [] -> []
    3  (2.48%) × [i32, i32, i32] -> []
    4  (3.31%) × [] -> [i32]
    4  (3.31%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (5.79%) × [i32] -> []
    9  (7.44%) × [i32, i32] -> []
   16 (13.22%) × [i32] -> [i32]
   18 (14.88%) × [i32, i32, i32, i32] -> [i32]
   23 (19.01%) × [i32, i32] -> [i32]
   23 (19.01%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 18 (15.25% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   10]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   16,   17]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  11 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 15
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #9
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #10
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  total classes: 11

CSV data for further analysis: threaded_binary_treescheerp.wasm,22660,295,41,12.202381,121,19,13,11,1,8,3.727272727272727,2,779,166,21.30937,142,18.228498,91,11.6816435

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"threaded_binary_treescheerp.wasm",0,1,1,"local.(get|tee)"
"threaded_binary_treescheerp.wasm",1,2,1,"other"
"threaded_binary_treescheerp.wasm",2,1,1,"i32.const"
"threaded_binary_treescheerp.wasm",3,5,2,"local.(get|tee)"
"threaded_binary_treescheerp.wasm",4,1,2,"local.(get|tee)"
"threaded_binary_treescheerp.wasm",5,0,2,"i32.const"
"threaded_binary_treescheerp.wasm",6,1,5,"i32.const"
"threaded_binary_treescheerp.wasm",7,5,6,"i32.load"
"threaded_binary_treescheerp.wasm",8,5,6,"local.(get|tee)"
"threaded_binary_treescheerp.wasm",9,3,7,"i32.load"
"threaded_binary_treescheerp.wasm",10,5,8,"i32.load"
