Input file: 2404cheerp.wasm
  binary:    2404cheerp.wasm

Functions:          139
  Imported:           6
  Non-imported:     133
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         20
  Of those, unique functions:    20 (i.e., at least 14.39% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     24077
  call:             338 (1.40% of all instructions)
  call_indirect:     47 (0.20% of all instructions, 12.21% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      34 × global.get   100 × global.set   134 total (25/75% split)
  #1 i32
     init: i32.const 1049264
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049272
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1050292
      14 × global.get     0 × global.set    14 total (100/0% split)
  #4 i32
     init: i32.const 1053380
      14 × global.get     0 × global.set    14 total (100/0% split)
  #5 i32
     init: i32.const 1053224
      11 × global.get     0 × global.set    11 total (100/0% split)
  #6 i32
     init: i32.const 1053120
      11 × global.get     0 × global.set    11 total (100/0% split)
  #7 i32
     init: i32.const 1053016
      11 × global.get     0 × global.set    11 total (100/0% split)
  #8 i32
     init: i32.const 1049212
      10 × global.get     0 × global.set    10 total (100/0% split)
  #9 i32
     init: i32.const 1053336
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 i32
     init: i32.const 1052276
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1049240
       5 × global.get     0 × global.set     5 total (100/0% split)
  #12 i32
     init: i32.const 1053376
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1049244
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1050952
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1049248
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     30 (22.56% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  133(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"2404cheerp.wasm",133,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.72%) × [i32] -> [f32]
    1  (0.72%) × [i32, i32, i32] -> [f64]
    1  (0.72%) × [i32, i32, i32, i32] -> []
    1  (0.72%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.72%) × [i32, f64, i32, i32] -> [i32]
    1  (0.72%) × [f64] -> [i32]
    1  (0.72%) × [f64] -> [f64]
    2  (1.44%) × [i32, i32] -> [f64]
    2  (1.44%) × [i32, i32, i32, i32, i32] -> []
    3  (2.16%) × [] -> [i32]
    3  (2.16%) × [i32, i32, i32] -> []
    4  (2.88%) × [] -> []
    5  (3.60%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (5.04%) × [i32] -> []
   11  (7.91%) × [i32, i32] -> []
   15 (10.79%) × [i32] -> [i32]
   23 (16.55%) × [i32, i32, i32, i32] -> [i32]
   28 (20.14%) × [i32, i32, i32] -> [i32]
   29 (20.86%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 21 (15.79% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   11]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   13,   15]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   16,   17]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   19,   19]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     13                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  13 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 12
  i32.load
  local.tee 2
  ...
function #13 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32] -> [i32]
    start idx: Some(13), end idx: Some(13)
    size (of class): 1
    count (how often class appears): 1
  class #5
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #7
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #8
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #10
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #11
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  class #12
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 10
  total classes: 13

CSV data for further analysis: 2404cheerp.wasm,24077,338,47,12.207792,139,20,14,13,1,10,3.6153846153846154,2,1099,206,18.744312,179,16.287535,97,8.826205

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"2404cheerp.wasm",0,1,1,"local.(get|tee)"
"2404cheerp.wasm",1,1,1,"local.(get|tee)"
"2404cheerp.wasm",2,2,1,"other"
"2404cheerp.wasm",3,0,1,"i32.const"
"2404cheerp.wasm",4,1,1,"i32.const"
"2404cheerp.wasm",5,5,2,"local.(get|tee)"
"2404cheerp.wasm",6,1,2,"local.(get|tee)"
"2404cheerp.wasm",7,0,2,"i32.const"
"2404cheerp.wasm",8,1,5,"i32.const"
"2404cheerp.wasm",9,6,6,"i32.load"
"2404cheerp.wasm",10,3,7,"i32.load"
"2404cheerp.wasm",11,5,8,"i32.load"
"2404cheerp.wasm",12,6,10,"local.(get|tee)"
