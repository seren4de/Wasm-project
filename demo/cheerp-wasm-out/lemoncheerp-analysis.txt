Input file: lemoncheerp.wasm
  binary:    lemoncheerp.wasm

Functions:          256
  Imported:           7
  Non-imported:     249
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         23
  Of those, unique functions:    23 (i.e., at least 8.98% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     46085
  call:            1044 (2.27% of all instructions)
  call_indirect:     78 (0.17% of all instructions, 6.95% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     289 × global.get   659 × global.set   948 total (30/70% split)
  #1 i32
     init: i32.const 1050496
      56 × global.get     0 × global.set    56 total (100/0% split)
  #2 i32
     init: i32.const 1058656
      40 × global.get     0 × global.set    40 total (100/0% split)
  #3 i32
     init: i32.const 1049440
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1058620
      38 × global.get     0 × global.set    38 total (100/0% split)
  #5 i32
     init: i32.const 1058676
      38 × global.get     0 × global.set    38 total (100/0% split)
  #6 i32
     init: i32.const 1058672
      37 × global.get     0 × global.set    37 total (100/0% split)
  #7 i32
     init: i32.const 1058636
      36 × global.get     0 × global.set    36 total (100/0% split)
  #8 i32
     init: i32.const 1050468
      35 × global.get     0 × global.set    35 total (100/0% split)
  #9 i32
     init: i32.const 1058592
      33 × global.get     0 × global.set    33 total (100/0% split)
  #10 i32
     init: i32.const 1057592
      22 × global.get     0 × global.set    22 total (100/0% split)
  #11 f64
     init: f64.const 0
      15 × global.get     0 × global.set    15 total (100/0% split)
  #12 i32
     init: i32.const 1058280
      18 × global.get     0 × global.set    18 total (100/0% split)
  #13 i32
     init: i32.const 1058384
      18 × global.get     0 × global.set    18 total (100/0% split)
  #14 i32
     init: i32.const 1058176
      18 × global.get     0 × global.set    18 total (100/0% split)
  #15 i32
     init: i32.const 1049448
       0 × global.get     0 × global.set     0 total
  #16 i32
     init: i32.const 1055141
      14 × global.get     0 × global.set    14 total (100/0% split)
  #17 i32
     init: i32.const 1058528
       9 × global.get     0 × global.set     9 total (100/0% split)
  #18 i32
     init: i32.const 1058596
      13 × global.get     0 × global.set    13 total (100/0% split)
  #19 i32
     init: i32.const 1053615
       6 × global.get     0 × global.set     6 total (100/0% split)
  #20 i32
     init: i32.const 1058580
      12 × global.get     0 × global.set    12 total (100/0% split)
  #21 i32
     init: i32.const 1058640
      12 × global.get     0 × global.set    12 total (100/0% split)
  #22 i32
     init: i32.const 1058644
      11 × global.get     0 × global.set    11 total (100/0% split)
  #23 i32
     init: i32.const 1058632
      11 × global.get     0 × global.set    11 total (100/0% split)
  #24 i32
     init: i32.const 1058660
      11 × global.get     0 × global.set    11 total (100/0% split)
  #25 i32
     init: i32.const 1058600
       9 × global.get     0 × global.set     9 total (100/0% split)
  #26 i32
     init: i32.const 1058536
       9 × global.get     0 × global.set     9 total (100/0% split)
  #27 i32
     init: i32.const 1058624
       9 × global.get     0 × global.set     9 total (100/0% split)
  #28 i32
     init: i32.const 1058612
       8 × global.get     0 × global.set     8 total (100/0% split)
  #29 i32
     init: i32.const 1058652
       7 × global.get     0 × global.set     7 total (100/0% split)
  #30 f64
     init: f64.const 0.5
       7 × global.get     0 × global.set     7 total (100/0% split)
  #31 i32
     init: i32.const 1058648
       7 × global.get     0 × global.set     7 total (100/0% split)
  #32 i32
     init: i32.const 1058668
       7 × global.get     0 × global.set     7 total (100/0% split)
  #33 i32
     init: i32.const 1057201
       5 × global.get     0 × global.set     5 total (100/0% split)
  #34 f64
     init: f64.const 0
       6 × global.get     0 × global.set     6 total (100/0% split)
  #35 i32
     init: i32.const 1057054
       6 × global.get     0 × global.set     6 total (100/0% split)
  #36 i32
     init: i32.const 1058680
       5 × global.get     0 × global.set     5 total (100/0% split)
  #37 i32
     init: i32.const 1055406
       5 × global.get     0 × global.set     5 total (100/0% split)
  #38 i32
     init: i32.const 1055454
       5 × global.get     0 × global.set     5 total (100/0% split)
  #39 i32
     init: i32.const 1058664
       5 × global.get     0 × global.set     5 total (100/0% split)
  #40 i32
     init: i32.const 1049416
       5 × global.get     0 × global.set     5 total (100/0% split)
  #41 i32
     init: i32.const 1055448
       5 × global.get     0 × global.set     5 total (100/0% split)
  #42 i32
     init: i32.const 1049424
       4 × global.get     0 × global.set     4 total (100/0% split)
  #43 i32
     init: i32.const 1057476
       4 × global.get     0 × global.set     4 total (100/0% split)
  #44 i32
     init: i32.const 1055100
       4 × global.get     0 × global.set     4 total (100/0% split)
  #45 i32
     init: i32.const 1056050
       4 × global.get     0 × global.set     4 total (100/0% split)
  #46 i32
     init: i32.const 1053861
       4 × global.get     0 × global.set     4 total (100/0% split)
  #47 i32
     init: i32.const 1058628
       4 × global.get     0 × global.set     4 total (100/0% split)
  #48 i32
     init: i32.const 1058576
       4 × global.get     0 × global.set     4 total (100/0% split)
  #49 i32
     init: i32.const 1049420
       4 × global.get     0 × global.set     4 total (100/0% split)
  #50 i32
     init: i32.const 1056873
       3 × global.get     0 × global.set     3 total (100/0% split)
  #51 i32
     init: i32.const 1057105
       3 × global.get     0 × global.set     3 total (100/0% split)
  #52 i32
     init: i32.const 1055108
       3 × global.get     0 × global.set     3 total (100/0% split)
  #53 i32
     init: i32.const 1056029
       3 × global.get     0 × global.set     3 total (100/0% split)
  #54 i32
     init: i32.const 1057462
       3 × global.get     0 × global.set     3 total (100/0% split)
  #55 i32
     init: i32.const 1051943
       3 × global.get     0 × global.set     3 total (100/0% split)
  #56 i32
     init: i32.const 1057050
       3 × global.get     0 × global.set     3 total (100/0% split)
  #57 i32
     init: i32.const 1052379
       3 × global.get     0 × global.set     3 total (100/0% split)
  #58 i32
     init: i32.const 1056026
       3 × global.get     0 × global.set     3 total (100/0% split)
  #59 i32
     init: i32.const 1054933
       3 × global.get     0 × global.set     3 total (100/0% split)
  #60 i32
     init: i32.const 1058604
       3 × global.get     0 × global.set     3 total (100/0% split)
  #61 i32
     init: i32.const 1056053
       3 × global.get     0 × global.set     3 total (100/0% split)
  #62 i32
     init: i32.const 1055539
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     73 (29.32% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  249(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"lemoncheerp.wasm",249,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.39%) × [i32, i32, i32] -> [f64]
    1  (0.39%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.39%) × [i32, f64, i32, i32] -> [i32]
    1  (0.39%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.39%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.39%) × [f64] -> [i32]
    1  (0.39%) × [f64] -> [f64]
    3  (1.17%) × [i32, i32] -> [f64]
    7  (2.73%) × [i32, i32, i32] -> []
    7  (2.73%) × [i32, i32, i32, i32, i32] -> [i32]
    9  (3.52%) × [i32, i32, i32, i32] -> []
   14  (5.47%) × [] -> []
   15  (5.86%) × [] -> [i32]
   15  (5.86%) × [i32, i32] -> []
   20  (7.81%) × [i32, i32, i32, i32] -> [i32]
   31 (12.11%) × [i32] -> []
   35 (13.67%) × [i32] -> [i32]
   35 (13.67%) × [i32, i32, i32] -> [i32]
   58 (22.66%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 24 (9.64% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    9]   length:   9   unique funcs:    9   type: [i32, i32] -> [i32]
         range: [   10,   15]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [   16,   18]   length:   3   unique funcs:    3   type: [i32] -> []
         range: [   19,   20]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   21,   21]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   22,   22]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     5 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):               31
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               35
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    24 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               58
         functions matching by type and present in table (regardless at which table index):    9
         functions matching by type and present in permissable table index range:              9
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    29 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               35
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               58
         functions matching by type and present in table (regardless at which table index):    9
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:     15                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     20                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               35
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  10 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 48
  i32.load
  local.tee 2
  ...
function #15 is indirectly called with a fixed table index
  global.get 20
  i32.const 0
  i32.store
  ...
function #20 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(20), end idx: Some(20)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(15), end idx: Some(15)
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 5
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 7
  class #8
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 9
    count (how often class appears): 24
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 29
  total classes: 10

CSV data for further analysis: lemoncheerp.wasm,46085,1044,78,6.951872,256,23,6,10,1,29,7.8,5,2751,512,18.611414,459,16.684841,42,1.5267175

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"lemoncheerp.wasm",0,0,1,"i32.const"
"lemoncheerp.wasm",1,1,1,"i32.const"
"lemoncheerp.wasm",2,1,2,"local.(get|tee)"
"lemoncheerp.wasm",3,1,2,"local.(get|tee)"
"lemoncheerp.wasm",4,1,2,"i32.const"
"lemoncheerp.wasm",5,3,5,"local.(get|tee)"
"lemoncheerp.wasm",6,1,5,"i32.const"
"lemoncheerp.wasm",7,6,7,"i32.load"
"lemoncheerp.wasm",8,9,24,"local.(get|tee)"
"lemoncheerp.wasm",9,6,29,"local.(get|tee)"
