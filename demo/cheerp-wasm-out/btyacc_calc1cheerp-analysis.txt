Input file: btyacc_calc1cheerp.wasm
  binary:    btyacc_calc1cheerp.wasm

Functions:          121
  Imported:           3
  Non-imported:     118
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 11.57% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     24904
  call:             358 (1.44% of all instructions)
  call_indirect:     42 (0.17% of all instructions, 10.50% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      28 × global.get   102 × global.set   130 total (22/78% split)
  #1 i32
     init: i32.const 1055488
      47 × global.get     0 × global.set    47 total (100/0% split)
  #2 i32
     init: i32.const 1049256
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1055492
      29 × global.get     0 × global.set    29 total (100/0% split)
  #4 i32
     init: i32.const 1055508
      24 × global.get     0 × global.set    24 total (100/0% split)
  #5 i32
     init: i32.const 1055500
      22 × global.get     0 × global.set    22 total (100/0% split)
  #6 i32
     init: i32.const 1054232
      18 × global.get     0 × global.set    18 total (100/0% split)
  #7 i32
     init: i32.const 1055516
      18 × global.get     0 × global.set    18 total (100/0% split)
  #8 i32
     init: i32.const 1049264
       0 × global.get     0 × global.set     0 total
  #9 f64
     init: f64.const 0
      12 × global.get     0 × global.set    12 total (100/0% split)
  #10 i32
     init: i32.const 1055512
      15 × global.get     0 × global.set    15 total (100/0% split)
  #11 i32
     init: i32.const 1056204
      12 × global.get     0 × global.set    12 total (100/0% split)
  #12 i32
     init: i32.const 1055496
      12 × global.get     0 × global.set    12 total (100/0% split)
  #13 i32
     init: i32.const 1055280
      10 × global.get     0 × global.set    10 total (100/0% split)
  #14 i32
     init: i32.const 1055384
      10 × global.get     0 × global.set    10 total (100/0% split)
  #15 i32
     init: i32.const 1055176
      10 × global.get     0 × global.set    10 total (100/0% split)
  #16 f64
     init: f64.const 0
       9 × global.get     0 × global.set     9 total (100/0% split)
  #17 i32
     init: i32.const 1056152
       9 × global.get     0 × global.set     9 total (100/0% split)
  #18 i32
     init: i32.const 1055504
       7 × global.get     0 × global.set     7 total (100/0% split)
  #19 f64
     init: f64.const 0.5
       7 × global.get     0 × global.set     7 total (100/0% split)
  #20 i32
     init: i32.const 1049236
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1056192
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 i32
     init: i32.const 1049228
       4 × global.get     0 × global.set     4 total (100/0% split)
  #23 i32
     init: i32.const 1049232
       4 × global.get     0 × global.set     4 total (100/0% split)
  #24 i32
     init: i32.const 1049240
       4 × global.get     0 × global.set     4 total (100/0% split)
  #25 i32
     init: i32.const 1054308
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     24 (20.34% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  118(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"btyacc_calc1cheerp.wasm",118,100,"[]",0,0

Counts of function types (22 unique types):
    1  (0.83%) × [i32] -> [f64]
    1  (0.83%) × [i32, i32, i32] -> [f64]
    1  (0.83%) × [i32, i32, i32, i32] -> []
    1  (0.83%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [i32, f64, i32, i32] -> [i32]
    1  (0.83%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [i32, f64, f64, f64, f64] -> []
    1  (0.83%) × [f64] -> [i32]
    1  (0.83%) × [f64] -> [f64]
    2  (1.65%) × [i32, f64, f64, i32] -> []
    3  (2.48%) × [] -> []
    3  (2.48%) × [i32, i32] -> [f64]
    3  (2.48%) × [i32, i32, i32] -> []
    5  (4.13%) × [] -> [i32]
    5  (4.13%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (4.96%) × [i32, i32] -> []
    7  (5.79%) × [i32] -> []
   10  (8.26%) × [i32, i32, i32, i32] -> [i32]
   19 (15.70%) × [i32] -> [i32]
   22 (18.18%) × [i32, i32, i32] -> [i32]
   26 (21.49%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 13 (11.02% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    8]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    9,   10]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #4 is indirectly called with a fixed table index
  global.get 21
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 7

CSV data for further analysis: btyacc_calc1cheerp.wasm,24904,358,42,10.5,121,14,4,7,1,25,6,2,543,157,28.913445,141,25.96685,24,4.4198895

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"btyacc_calc1cheerp.wasm",0,1,1,"local.(get|tee)"
"btyacc_calc1cheerp.wasm",1,1,1,"i32.const"
"btyacc_calc1cheerp.wasm",2,4,2,"local.(get|tee)"
"btyacc_calc1cheerp.wasm",3,1,2,"local.(get|tee)"
"btyacc_calc1cheerp.wasm",4,1,5,"i32.const"
"btyacc_calc1cheerp.wasm",5,4,6,"i32.load"
"btyacc_calc1cheerp.wasm",6,4,25,"local.(get|tee)"
