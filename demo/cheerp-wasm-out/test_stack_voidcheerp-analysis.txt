Input file: test_stack_voidcheerp.wasm
  binary:    test_stack_voidcheerp.wasm

Functions:           85
  Imported:           3
  Non-imported:      82
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 14.12% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     15865
  call:             187 (1.18% of all instructions)
  call_indirect:     40 (0.25% of all instructions, 17.62% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      16 × global.get    71 × global.set    87 total (18/82% split)
  #1 f64
     init: f64.const 1.001
     216 × global.get     0 × global.set   216 total (100/0% split)
  #2 i32
     init: i32.const 1049164
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1049172
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1050812
      12 × global.get     0 × global.set    12 total (100/0% split)
  #5 i32
     init: i32.const 1050760
       9 × global.get     0 × global.set     9 total (100/0% split)
  #6 i32
     init: i32.const 1050440
       5 × global.get     0 × global.set     5 total (100/0% split)
  #7 i32
     init: i32.const 1050648
       5 × global.get     0 × global.set     5 total (100/0% split)
  #8 i32
     init: i32.const 1050192
       5 × global.get     0 × global.set     5 total (100/0% split)
  #9 i32
     init: i32.const 1050544
       5 × global.get     0 × global.set     5 total (100/0% split)
  #10 i32
     init: i32.const 1049144
       4 × global.get     0 × global.set     4 total (100/0% split)
  #11 i32
     init: i32.const 1050230
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1050800
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1049148
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)
  #15 i32
     init: i32.const 1050332
       2 × global.get     0 × global.set     2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     16 (19.51% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   82(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_stack_voidcheerp.wasm",82,100,"[]",0,0

Counts of function types (15 unique types):
    1  (1.18%) × [i32, i32, i32, i32] -> []
    1  (1.18%) × [i32, f64, i32, i32] -> [i32]
    1  (1.18%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (1.18%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.18%) × [f64] -> [i32]
    2  (2.35%) × [i32, i32, i32] -> []
    3  (3.53%) × [] -> []
    3  (3.53%) × [i32] -> []
    4  (4.71%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.88%) × [] -> [i32]
    5  (5.88%) × [i32, i32] -> []
   10 (11.76%) × [i32, i32, i32, i32] -> [i32]
   11 (12.94%) × [i32] -> [i32]
   18 (21.18%) × [i32, i32] -> [i32]
   19 (22.35%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 11 (13.41% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      8                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #7 is indirectly called with a fixed table index
  global.get 12
  i32.load
  local.tee 2
  ...
function #8 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 5
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 6

CSV data for further analysis: test_stack_voidcheerp.wasm,15865,187,40,17.621145,85,12,4,6,1,25,6.666666666666667,5,453,145,32.00883,134,29.580574,20,4.415011

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_stack_voidcheerp.wasm",0,1,1,"i32.const"
"test_stack_voidcheerp.wasm",1,3,2,"local.(get|tee)"
"test_stack_voidcheerp.wasm",2,1,2,"local.(get|tee)"
"test_stack_voidcheerp.wasm",3,4,5,"i32.load"
"test_stack_voidcheerp.wasm",4,1,5,"i32.const"
"test_stack_voidcheerp.wasm",5,4,25,"local.(get|tee)"
