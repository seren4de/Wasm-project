Input file: example5_12cheerp.wasm
  binary:    example5_12cheerp.wasm

Functions:           61
  Imported:           5
  Non-imported:      56
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 21.31% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7002
  call:              98 (1.40% of all instructions)
  call_indirect:     19 (0.27% of all instructions, 16.24% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      4 × global.get    8 × global.set   12 total (33/67% split)
  #1 i32
     init: i32.const 1048840
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048848
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050216
     10 × global.get    0 × global.set   10 total (100/0% split)
  #4 i32
     init: i32.const 1050224
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1048824
      7 × global.get    0 × global.set    7 total (100/0% split)
  #6 i32
     init: i32.const 1049904
      6 × global.get    0 × global.set    6 total (100/0% split)
  #7 i32
     init: i32.const 1050112
      6 × global.get    0 × global.set    6 total (100/0% split)
  #8 i32
     init: i32.const 1050008
      6 × global.get    0 × global.set    6 total (100/0% split)
  #9 i32
     init: i32.const 1048828
      5 × global.get    0 × global.set    5 total (100/0% split)
  #10 i32
     init: i32.const 1049872
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1050272
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049864
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      4 (7.14% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   56(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"example5_12cheerp.wasm",56,100,"[]",0,0

Counts of function types (8 unique types):
    2  (3.28%) × [] -> [i32]
    3  (4.92%) × [] -> []
    5  (8.20%) × [i32, i32] -> []
    5  (8.20%) × [i32, i32, i32, i32] -> [i32]
    7 (11.48%) × [i32] -> []
   10 (16.39%) × [i32] -> [i32]
   10 (16.39%) × [i32, i32, i32] -> [i32]
   19 (31.15%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (21.43% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    8]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     5 × fixed index:      3                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:      8                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #3 is indirectly called with a fixed table index
  global.get 11
  i32.load
  local.tee 2
  ...
function #8 is indirectly called with a fixed table index
  global.get 3
  i32.const 0
  i32.store
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(3), end idx: Some(3)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  total classes: 8

CSV data for further analysis: example5_12cheerp.wasm,7002,98,19,16.239317,61,13,4,8,1,6,2.375,2,205,68,33.17073,46,22.439024,24,11.707317

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"example5_12cheerp.wasm",0,1,1,"local.(get|tee)"
"example5_12cheerp.wasm",1,1,1,"local.(get|tee)"
"example5_12cheerp.wasm",2,4,1,"local.(get|tee)"
"example5_12cheerp.wasm",3,1,1,"i32.const"
"example5_12cheerp.wasm",4,4,2,"local.(get|tee)"
"example5_12cheerp.wasm",5,1,2,"i32.const"
"example5_12cheerp.wasm",6,1,5,"i32.const"
"example5_12cheerp.wasm",7,4,6,"i32.load"
