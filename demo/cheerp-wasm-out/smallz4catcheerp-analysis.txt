Input file: smallz4catcheerp.wasm
  binary:    smallz4catcheerp.wasm

Functions:           78
  Imported:           6
  Non-imported:      72
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 17.95% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      9324
  call:             157 (1.68% of all instructions)
  call_indirect:     53 (0.57% of all instructions, 25.24% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      7 × global.get   26 × global.set   33 total (21/79% split)
  #1 i32
     init: i32.const 1048852
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048824
     17 × global.get    0 × global.set   17 total (100/0% split)
  #3 i32
     init: i32.const 1048860
      0 × global.get    0 × global.set    0 total
  #4 i32
     init: i32.const 1050452
     14 × global.get    0 × global.set   14 total (100/0% split)
  #5 i32
     init: i32.const 1050192
     12 × global.get    0 × global.set   12 total (100/0% split)
  #6 i32
     init: i32.const 1050296
     12 × global.get    0 × global.set   12 total (100/0% split)
  #7 i32
     init: i32.const 1050088
     12 × global.get    0 × global.set   12 total (100/0% split)
  #8 i32
     init: i32.const 1050408
      9 × global.get    0 × global.set    9 total (100/0% split)
  #9 i32
     init: i32.const 1048828
      5 × global.get    0 × global.set    5 total (100/0% split)
  #10 i32
     init: i32.const 1050448
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1048836
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1048832
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      7 (9.72% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   72(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"smallz4catcheerp.wasm",72,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.28%) × [] -> [i32]
    1  (1.28%) × [i32, i32, i32] -> []
    1  (1.28%) × [i32, i32, i32, i32] -> []
    2  (2.56%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (5.13%) × [] -> []
    5  (6.41%) × [i32, i32] -> []
    6  (7.69%) × [i32] -> []
   10 (12.82%) × [i32] -> [i32]
   11 (14.10%) × [i32, i32, i32, i32] -> [i32]
   16 (20.51%) × [i32, i32, i32] -> [i32]
   21 (26.92%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 14 (19.44% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32, i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   12]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> []
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    27 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     4 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 10
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 4
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 5
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #8
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 27
  total classes: 9

CSV data for further analysis: smallz4catcheerp.wasm,9324,157,53,25.238094,78,14,3,9,1,27,5.888888888888889,4,591,127,21.489002,109,18.443316,21,3.5532994

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"smallz4catcheerp.wasm",0,1,1,"local.(get|tee)"
"smallz4catcheerp.wasm",1,0,1,"i32.const"
"smallz4catcheerp.wasm",2,1,1,"i32.const"
"smallz4catcheerp.wasm",3,4,2,"local.(get|tee)"
"smallz4catcheerp.wasm",4,1,4,"local.(get|tee)"
"smallz4catcheerp.wasm",5,3,5,"local.(get|tee)"
"smallz4catcheerp.wasm",6,1,5,"i32.const"
"smallz4catcheerp.wasm",7,3,7,"i32.load"
"smallz4catcheerp.wasm",8,2,27,"local.(get|tee)"
