Input file: fread_floatcheerp.wasm
  binary:    fread_floatcheerp.wasm

Functions:          114
  Imported:           6
  Non-imported:     108
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 12.28% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17976
  call:             278 (1.55% of all instructions)
  call_indirect:     48 (0.27% of all instructions, 14.72% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      33 × global.get   116 × global.set   149 total (22/78% split)
  #1 i32
     init: i32.const 1049152
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1050196
      24 × global.get     0 × global.set    24 total (100/0% split)
  #3 i32
     init: i32.const 1049160
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1052960
      14 × global.get     0 × global.set    14 total (100/0% split)
  #5 i32
     init: i32.const 1052856
      12 × global.get     0 × global.set    12 total (100/0% split)
  #6 i32
     init: i32.const 1052648
      12 × global.get     0 × global.set    12 total (100/0% split)
  #7 i32
     init: i32.const 1052752
      12 × global.get     0 × global.set    12 total (100/0% split)
  #8 i32
     init: i32.const 1052968
       9 × global.get     0 × global.set     9 total (100/0% split)
  #9 i32
     init: i32.const 1052004
       7 × global.get     0 × global.set     7 total (100/0% split)
  #10 i32
     init: i32.const 1050176
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1050843
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1053016
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1049140
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1049132
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     20 (18.52% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  108(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"fread_floatcheerp.wasm",108,100,"[]",0,0

Counts of function types (15 unique types):
    1  (0.88%) × [i32, i32, i32, i32] -> []
    1  (0.88%) × [i32, f64, i32, i32] -> [i32]
    1  (0.88%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.88%) × [f64] -> [i32]
    2  (1.75%) × [i32, i32, i32] -> []
    3  (2.63%) × [] -> [i32]
    4  (3.51%) × [] -> []
    6  (5.26%) × [i32] -> []
    6  (5.26%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (6.14%) × [i32, i32] -> []
   13 (11.40%) × [i32] -> [i32]
   17 (14.91%) × [i32, i32, i32, i32] -> [i32]
   25 (21.93%) × [i32, i32] -> [i32]
   26 (22.81%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 16 (14.81% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    8]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    29 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      3                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               25
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #3 is indirectly called with a fixed table index
  global.get 12
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(3), end idx: Some(3)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 29
  total classes: 9

CSV data for further analysis: fread_floatcheerp.wasm,17976,278,48,14.723927,114,14,4,9,1,29,5.333333333333333,2,853,176,20.63306,158,18.52286,24,2.813599

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"fread_floatcheerp.wasm",0,1,1,"local.(get|tee)"
"fread_floatcheerp.wasm",1,1,1,"local.(get|tee)"
"fread_floatcheerp.wasm",2,0,1,"i32.const"
"fread_floatcheerp.wasm",3,1,1,"i32.const"
"fread_floatcheerp.wasm",4,4,2,"local.(get|tee)"
"fread_floatcheerp.wasm",5,1,2,"local.(get|tee)"
"fread_floatcheerp.wasm",6,1,5,"i32.const"
"fread_floatcheerp.wasm",7,4,6,"i32.load"
"fread_floatcheerp.wasm",8,4,29,"local.(get|tee)"
