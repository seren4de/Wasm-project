Input file: bin2ccheerp.wasm
  binary:    bin2ccheerp.wasm

Functions:          120
  Imported:           7
  Non-imported:     113
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         15
  Of those, unique functions:    15 (i.e., at least 12.50% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     18684
  call:             271 (1.45% of all instructions)
  call_indirect:     48 (0.26% of all instructions, 15.05% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      26 × global.get   105 × global.set   131 total (20/80% split)
  #1 i32
     init: i32.const 1049320
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1050352
      17 × global.get     0 × global.set    17 total (100/0% split)
  #3 i32
     init: i32.const 1049328
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1051092
      16 × global.get     0 × global.set    16 total (100/0% split)
  #5 i32
     init: i32.const 1050936
      12 × global.get     0 × global.set    12 total (100/0% split)
  #6 i32
     init: i32.const 1050728
      12 × global.get     0 × global.set    12 total (100/0% split)
  #7 i32
     init: i32.const 1050832
      12 × global.get     0 × global.set    12 total (100/0% split)
  #8 i32
     init: i32.const 1051048
       9 × global.get     0 × global.set     9 total (100/0% split)
  #9 i32
     init: i32.const 1049300
       5 × global.get     0 × global.set     5 total (100/0% split)
  #10 i32
     init: i32.const 1049308
       4 × global.get     0 × global.set     4 total (100/0% split)
  #11 i32
     init: i32.const 1050575
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1049304
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 i32
     init: i32.const 1051088
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     22 (19.47% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  113(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"bin2ccheerp.wasm",113,100,"[]",0,0

Counts of function types (16 unique types):
    1  (0.83%) × [] -> [f64]
    1  (0.83%) × [i32, i32, i32, i32] -> []
    1  (0.83%) × [i32, f64, i32, i32] -> [i32]
    1  (0.83%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.83%) × [f64] -> [i32]
    2  (1.67%) × [i32, i32, i32] -> []
    4  (3.33%) × [] -> []
    4  (3.33%) × [] -> [i32]
    5  (4.17%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (5.00%) × [i32] -> []
    6  (5.00%) × [i32, i32] -> []
   16 (13.33%) × [i32, i32, i32, i32] -> [i32]
   18 (15.00%) × [i32] -> [i32]
   24 (20.00%) × [i32, i32, i32] -> [i32]
   29 (24.17%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 16 (14.16% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    9]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    29 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 13
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 29
  total classes: 9

CSV data for further analysis: bin2ccheerp.wasm,18684,271,48,15.047022,120,15,5,9,1,29,5.333333333333333,2,845,211,24.970415,193,22.840237,30,3.5502958

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"bin2ccheerp.wasm",0,1,1,"local.(get|tee)"
"bin2ccheerp.wasm",1,1,1,"local.(get|tee)"
"bin2ccheerp.wasm",2,0,1,"i32.const"
"bin2ccheerp.wasm",3,1,1,"i32.const"
"bin2ccheerp.wasm",4,4,2,"local.(get|tee)"
"bin2ccheerp.wasm",5,1,2,"local.(get|tee)"
"bin2ccheerp.wasm",6,1,5,"i32.const"
"bin2ccheerp.wasm",7,5,6,"i32.load"
"bin2ccheerp.wasm",8,5,29,"local.(get|tee)"
