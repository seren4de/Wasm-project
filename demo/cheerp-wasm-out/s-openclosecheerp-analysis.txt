Input file: s-openclosecheerp.wasm
  binary:    s-openclosecheerp.wasm

Functions:           53
  Imported:           4
  Non-imported:      49
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 22.64% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5229
  call:              77 (1.47% of all instructions)
  call_indirect:     18 (0.34% of all instructions, 18.95% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      3 × global.get   17 × global.set   20 total (15/85% split)
  #1 i32
     init: i32.const 1048840
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048848
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050260
     14 × global.get    0 × global.set   14 total (100/0% split)
  #4 i32
     init: i32.const 1050216
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1049896
      4 × global.get    0 × global.set    4 total (100/0% split)
  #6 i32
     init: i32.const 1049872
      4 × global.get    0 × global.set    4 total (100/0% split)
  #7 i32
     init: i32.const 1048824
      4 × global.get    0 × global.set    4 total (100/0% split)
  #8 i32
     init: i32.const 1049876
      4 × global.get    0 × global.set    4 total (100/0% split)
  #9 i32
     init: i32.const 1050000
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1050104
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1050256
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049868
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      3 (6.12% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   49(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"s-openclosecheerp.wasm",49,100,"[]",0,0

Counts of function types (8 unique types):
    2  (3.77%) × [] -> [i32]
    3  (5.66%) × [i32] -> []
    4  (7.55%) × [] -> []
    4  (7.55%) × [i32, i32] -> []
    7 (13.21%) × [i32] -> [i32]
    9 (16.98%) × [i32, i32, i32] -> [i32]
    9 (16.98%) × [i32, i32, i32, i32] -> [i32]
   15 (28.30%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (20.41% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    3]   length:   3   unique funcs:    3   type: [i32, i32, i32, i32] -> [i32]
         range: [    4,    7]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    8,    8]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [    9,   10]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     3 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      7                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #7 is indirectly called with a fixed table index
  global.get 11
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 3
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 5
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(7), end idx: Some(7)
    size (of class): 1
    count (how often class appears): 5
  total classes: 7

CSV data for further analysis: s-openclosecheerp.wasm,5229,77,18,18.947369,53,12,3,7,1,5,2.5714285714285716,2,202,57,28.217821,39,19.30693,9,4.455446

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"s-openclosecheerp.wasm",0,1,1,"local.(get|tee)"
"s-openclosecheerp.wasm",1,0,1,"i32.const"
"s-openclosecheerp.wasm",2,1,1,"i32.const"
"s-openclosecheerp.wasm",3,4,2,"local.(get|tee)"
"s-openclosecheerp.wasm",4,3,3,"i32.load"
"s-openclosecheerp.wasm",5,3,5,"local.(get|tee)"
"s-openclosecheerp.wasm",6,1,5,"i32.const"
