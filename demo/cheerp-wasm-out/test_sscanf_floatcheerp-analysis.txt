Input file: test_sscanf_floatcheerp.wasm
  binary:    test_sscanf_floatcheerp.wasm

Functions:          109
  Imported:           3
  Non-imported:     106
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         18
  Of those, unique functions:    18 (i.e., at least 16.51% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     24891
  call:             272 (1.09% of all instructions)
  call_indirect:     53 (0.21% of all instructions, 16.31% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      28 × global.get   102 × global.set   130 total (22/78% split)
  #1 i32
     init: i32.const 1049228
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049236
       0 × global.get     0 × global.set     0 total
  #3 f64
     init: f64.const 0
      10 × global.get     0 × global.set    10 total (100/0% split)
  #4 i32
     init: i32.const 1051632
      12 × global.get     0 × global.set    12 total (100/0% split)
  #5 i32
     init: i32.const 1050288
      10 × global.get     0 × global.set    10 total (100/0% split)
  #6 i32
     init: i32.const 1051576
       9 × global.get     0 × global.set     9 total (100/0% split)
  #7 f64
     init: f64.const 0.5
       7 × global.get     0 × global.set     7 total (100/0% split)
  #8 f64
     init: f64.const 0
       6 × global.get     0 × global.set     6 total (100/0% split)
  #9 i32
     init: i32.const 1050292
       6 × global.get     0 × global.set     6 total (100/0% split)
  #10 i32
     init: i32.const 1051464
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1051256
       5 × global.get     0 × global.set     5 total (100/0% split)
  #12 i32
     init: i32.const 1051360
       5 × global.get     0 × global.set     5 total (100/0% split)
  #13 i32
     init: i32.const 1051624
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1050296
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1050252
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1050264
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     26 (24.53% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  106(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_sscanf_floatcheerp.wasm",106,100,"[]",0,0

Counts of function types (21 unique types):
    1  (0.92%) × [i32] -> [f32]
    1  (0.92%) × [i32, i32, i32] -> [f64]
    1  (0.92%) × [i32, i32, i32, i32] -> []
    1  (0.92%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [i32, f64, i32, i32] -> [i32]
    1  (0.92%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.92%) × [f64] -> [i32]
    1  (0.92%) × [f64] -> [f64]
    2  (1.83%) × [i32, i32] -> [f64]
    2  (1.83%) × [i32, i32, i32, i32, i32] -> []
    3  (2.75%) × [] -> []
    3  (2.75%) × [i32] -> []
    3  (2.75%) × [i32, i32, i32] -> []
    4  (3.67%) × [] -> [i32]
    5  (4.59%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (5.50%) × [i32, i32] -> []
   10  (9.17%) × [i32] -> [i32]
   18 (16.51%) × [i32, i32, i32, i32] -> [i32]
   21 (19.27%) × [i32, i32, i32] -> [i32]
   23 (21.10%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 14 (13.21% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    6]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [    7,   10]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   15,   16]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      8                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #8 is indirectly called with a fixed table index
  global.get 13
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #7
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 8
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 25
  total classes: 9

CSV data for further analysis: test_sscanf_floatcheerp.wasm,24891,272,53,16.307692,109,18,13,9,1,25,5.888888888888889,2,1011,250,24.727993,233,23.046488,65,6.429278

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_sscanf_floatcheerp.wasm",0,2,1,"other"
"test_sscanf_floatcheerp.wasm",1,1,1,"i32.const"
"test_sscanf_floatcheerp.wasm",2,4,2,"local.(get|tee)"
"test_sscanf_floatcheerp.wasm",3,6,2,"i32.load"
"test_sscanf_floatcheerp.wasm",4,1,2,"local.(get|tee)"
"test_sscanf_floatcheerp.wasm",5,1,5,"i32.const"
"test_sscanf_floatcheerp.wasm",6,3,7,"i32.load"
"test_sscanf_floatcheerp.wasm",7,4,8,"i32.load"
"test_sscanf_floatcheerp.wasm",8,6,25,"local.(get|tee)"
