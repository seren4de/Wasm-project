Input file: adaline_learningcheerp.wasm
  binary:    adaline_learningcheerp.wasm

Functions:          138
  Imported:           6
  Non-imported:     132
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         15
  Of those, unique functions:    15 (i.e., at least 10.87% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     24302
  call:             404 (1.66% of all instructions)
  call_indirect:     43 (0.18% of all instructions, 9.62% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      57 × global.get   159 × global.set   216 total (26/74% split)
  #1 i32
     init: i32.const 1049436
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1050460
      22 × global.get     0 × global.set    22 total (100/0% split)
  #3 f64
     init: f64.const 0
      13 × global.get     0 × global.set    13 total (100/0% split)
  #4 i32
     init: i32.const 1049444
       0 × global.get     0 × global.set     0 total
  #5 i32
     init: i32.const 1053788
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 f64
     init: f64.const 1
      13 × global.get     0 × global.set    13 total (100/0% split)
  #7 i32
     init: i32.const 1053312
      12 × global.get     0 × global.set    12 total (100/0% split)
  #8 i32
     init: i32.const 1053416
      12 × global.get     0 × global.set    12 total (100/0% split)
  #9 i32
     init: i32.const 1053520
      12 × global.get     0 × global.set    12 total (100/0% split)
  #10 i32
     init: i32.const 1053677
       8 × global.get     0 × global.set     8 total (100/0% split)
  #11 f32
     init: f32.const 100
      10 × global.get     0 × global.set    10 total (100/0% split)
  #12 i32
     init: i32.const 1053632
       9 × global.get     0 × global.set     9 total (100/0% split)
  #13 f64
     init: f64.const 0.5
       7 × global.get     0 × global.set     7 total (100/0% split)
  #14 f64
     init: f64.const 0
       6 × global.get     0 × global.set     6 total (100/0% split)
  #15 i32
     init: i32.const 1050512
       5 × global.get     0 × global.set     5 total (100/0% split)
  #16 i32
     init: i32.const 1051153
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1049416
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1053672
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1049400
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1052202
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1052145
       3 × global.get     0 × global.set     3 total (100/0% split)
  #22 i32
     init: i32.const 1052123
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     33 (25.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  132(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"adaline_learningcheerp.wasm",132,100,"[]",0,0

Counts of function types (24 unique types):
    1  (0.72%) × [] -> [f64]
    1  (0.72%) × [i32] -> [f32]
    1  (0.72%) × [i32, i32] -> [f32]
    1  (0.72%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.72%) × [i32, i32, f64] -> []
    1  (0.72%) × [i32, f64, i32, i32] -> [i32]
    1  (0.72%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.72%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.72%) × [f64] -> [f64]
    2  (1.45%) × [i32, i32] -> [f64]
    2  (1.45%) × [i32, i32, i32] -> [f64]
    2  (1.45%) × [f64] -> [i32]
    3  (2.17%) × [] -> []
    3  (2.17%) × [i32, i32, i32] -> []
    3  (2.17%) × [i32, i32, i32, i32] -> []
    3  (2.17%) × [f64] -> []
    4  (2.90%) × [] -> [i32]
    6  (4.35%) × [i32, i32, i32, i32, i32] -> [i32]
    8  (5.80%) × [i32, i32] -> []
    9  (6.52%) × [i32] -> []
   14 (10.14%) × [i32, i32, i32, i32] -> [i32]
   16 (11.59%) × [i32] -> [i32]
   26 (18.84%) × [i32, i32, i32] -> [i32]
   28 (20.29%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 14 (10.61% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    9]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      3                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               28
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               26
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #3 is indirectly called with a fixed table index
  global.get 18
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(3), end idx: Some(3)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 25
  total classes: 8

CSV data for further analysis: adaline_learningcheerp.wasm,24302,404,43,9.619687,138,15,5,8,1,25,5.375,2,693,189,27.272728,173,24.963924,30,4.3290043

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"adaline_learningcheerp.wasm",0,1,1,"local.(get|tee)"
"adaline_learningcheerp.wasm",1,1,1,"local.(get|tee)"
"adaline_learningcheerp.wasm",2,1,1,"i32.const"
"adaline_learningcheerp.wasm",3,4,2,"local.(get|tee)"
"adaline_learningcheerp.wasm",4,1,2,"local.(get|tee)"
"adaline_learningcheerp.wasm",5,1,5,"i32.const"
"adaline_learningcheerp.wasm",6,5,6,"i32.load"
"adaline_learningcheerp.wasm",7,5,25,"local.(get|tee)"
