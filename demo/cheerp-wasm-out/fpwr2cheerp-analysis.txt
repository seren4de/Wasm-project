Input file: fpwr2cheerp.wasm
  binary:    fpwr2cheerp.wasm

Functions:           78
  Imported:           3
  Non-imported:      75
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 16.67% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11436
  call:             172 (1.50% of all instructions)
  call_indirect:     21 (0.18% of all instructions, 10.88% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      23 × global.get   160 × global.set   183 total (13/87% split)
  #1 f64
     init: f64.const 0
      19 × global.get     0 × global.set    19 total (100/0% split)
  #2 i32
     init: i32.const 1048932
       0 × global.get     0 × global.set     0 total
  #3 f64
     init: f64.const 1
      17 × global.get     0 × global.set    17 total (100/0% split)
  #4 i32
     init: i32.const 1048940
       0 × global.get     0 × global.set     0 total
  #5 i32
     init: i32.const 1049968
      14 × global.get     0 × global.set    14 total (100/0% split)
  #6 f32
     init: f32.const 0
      13 × global.get     0 × global.set    13 total (100/0% split)
  #7 i32
     init: i32.const 1050708
      10 × global.get     0 × global.set    10 total (100/0% split)
  #8 f32
     init: f32.const 1
       9 × global.get     0 × global.set     9 total (100/0% split)
  #9 i32
     init: i32.const 1050656
       9 × global.get     0 × global.set     9 total (100/0% split)
  #10 f32
     init: f32.const 1000000000000000000000000000000
       8 × global.get     0 × global.set     8 total (100/0% split)
  #11 f64
     init: f64.const 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
       8 × global.get     0 × global.set     8 total (100/0% split)
  #12 f64
     init: f64.const 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
       7 × global.get     0 × global.set     7 total (100/0% split)
  #13 f32
     init: f32.const 0.000000000000000000000000000001
       7 × global.get     0 × global.set     7 total (100/0% split)
  #14 i32
     init: i32.const 1050054
       6 × global.get     0 × global.set     6 total (100/0% split)
  #15 i32
     init: i32.const 1050188
       6 × global.get     0 × global.set     6 total (100/0% split)
  #16 f64
     init: f64.const inf
       6 × global.get     0 × global.set     6 total (100/0% split)
  #17 i32
     init: i32.const 1050440
       5 × global.get     0 × global.set     5 total (100/0% split)
  #18 i32
     init: i32.const 1048920
       5 × global.get     0 × global.set     5 total (100/0% split)
  #19 i32
     init: i32.const 1050336
       5 × global.get     0 × global.set     5 total (100/0% split)
  #20 i32
     init: i32.const 1050544
       5 × global.get     0 × global.set     5 total (100/0% split)
  #21 i32
     init: i32.const 1050331
       5 × global.get     0 × global.set     5 total (100/0% split)
  #22 i32
     init: i32.const 1050075
       5 × global.get     0 × global.set     5 total (100/0% split)
  #23 i32
     init: i32.const 1049972
       4 × global.get     0 × global.set     4 total (100/0% split)
  #24 i32
     init: i32.const 1050696
       4 × global.get     0 × global.set     4 total (100/0% split)
  #25 i32
     init: i32.const 1049976
       4 × global.get     0 × global.set     4 total (100/0% split)
  #26 i32
     init: i32.const 1049988
       4 × global.get     0 × global.set     4 total (100/0% split)
  #27 f64
     init: f64.const -inf
       4 × global.get     0 × global.set     4 total (100/0% split)
  #28 f32
     init: f32.const 2
       4 × global.get     0 × global.set     4 total (100/0% split)
  #29 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)
  #30 f64
     init: f64.const NaN
       3 × global.get     0 × global.set     3 total (100/0% split)
  #31 f32
     init: f32.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     23 (30.67% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   75(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"fpwr2cheerp.wasm",75,100,"[]",0,0

Counts of function types (21 unique types):
    1  (1.28%) × [i32] -> [f64]
    1  (1.28%) × [f32, i32] -> [f32]
    1  (1.28%) × [f64] -> [f64]
    1  (1.28%) × [f64, i32] -> [f64]
    2  (2.56%) × [i32, i32, i32] -> []
    2  (2.56%) × [i32, i32, i32, i32] -> []
    2  (2.56%) × [f32] -> [i32]
    2  (2.56%) × [f32] -> [f32]
    2  (2.56%) × [f32, f32] -> [f32]
    2  (2.56%) × [f64] -> [i32]
    2  (2.56%) × [f64, f64] -> [f64]
    3  (3.85%) × [] -> []
    3  (3.85%) × [] -> [i32]
    3  (3.85%) × [i32] -> []
    3  (3.85%) × [i32] -> [f32]
    3  (3.85%) × [i32, i32, i32, i32, i32] -> [i32]
    4  (5.13%) × [i32, i32] -> []
    6  (7.69%) × [i32] -> [i32]
    8 (10.26%) × [i32, i32, i32, i32] -> [i32]
   12 (15.38%) × [i32, i32, i32] -> [i32]
   15 (19.23%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (16.00% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [    6,    8]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    9,    9]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      5                  source:  i32.const   type: [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      8                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               15
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 7
  i32.const 0
  i32.store
  ...
function #8 is indirectly called with a fixed table index
  global.get 24
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  total classes: 8

CSV data for further analysis: fpwr2cheerp.wasm,11436,172,21,10.880829,78,13,5,8,1,6,2.625,2,206,76,36.893204,56,27.184465,10,4.854369

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"fpwr2cheerp.wasm",0,0,1,"i32.const"
"fpwr2cheerp.wasm",1,1,1,"i32.const"
"fpwr2cheerp.wasm",2,3,2,"local.(get|tee)"
"fpwr2cheerp.wasm",3,5,2,"i32.load"
"fpwr2cheerp.wasm",4,1,2,"local.(get|tee)"
"fpwr2cheerp.wasm",5,1,2,"i32.const"
"fpwr2cheerp.wasm",6,1,5,"i32.const"
"fpwr2cheerp.wasm",7,5,6,"local.(get|tee)"
