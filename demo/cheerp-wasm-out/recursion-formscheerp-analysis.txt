Input file: recursion-formscheerp.wasm
  binary:    recursion-formscheerp.wasm

Functions:           87
  Imported:           5
  Non-imported:      82
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         18
  Of those, unique functions:    18 (i.e., at least 20.69% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      7753
  call:             128 (1.65% of all instructions)
  call_indirect:     21 (0.27% of all instructions, 14.09% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     14 × global.get   35 × global.set   49 total (29/71% split)
  #1 i32
     init: i32.const 1048900
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048908
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1051036
     12 × global.get    0 × global.set   12 total (100/0% split)
  #4 i32
     init: i32.const 1050992
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1050664
      7 × global.get    0 × global.set    7 total (100/0% split)
  #6 i32
     init: i32.const 1050672
      6 × global.get    0 × global.set    6 total (100/0% split)
  #7 i32
     init: i32.const 1050880
      6 × global.get    0 × global.set    6 total (100/0% split)
  #8 i32
     init: i32.const 1048888
      6 × global.get    0 × global.set    6 total (100/0% split)
  #9 i32
     init: i32.const 1050668
      6 × global.get    0 × global.set    6 total (100/0% split)
  #10 i32
     init: i32.const 1050776
      6 × global.get    0 × global.set    6 total (100/0% split)
  #11 i32
     init: i32.const 1050370
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1051032
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1049936
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 i32
     init: i32.const 1049928
      4 × global.get    0 × global.set    4 total (100/0% split)
  #15 i32
     init: i32.const 1049932
      3 × global.get    0 × global.set    3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     11 (13.41% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   82(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"recursion-formscheerp.wasm",82,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.15%) × [i32, i32, i32, i32] -> []
    2  (2.30%) × [i32, i32, i32] -> []
    3  (3.45%) × [] -> []
    3  (3.45%) × [] -> [i32]
    3  (3.45%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.75%) × [i32, i32] -> []
    7  (8.05%) × [i32] -> []
   10 (11.49%) × [i32, i32, i32, i32] -> [i32]
   14 (16.09%) × [i32, i32, i32] -> [i32]
   17 (19.54%) × [i32] -> [i32]
   22 (25.29%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (14.63% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,   10]   length:   6   unique funcs:    6   type: [i32] -> [i32]
         range: [   11,   13]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [   14,   15]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                3
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:     12                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     15                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #12 is indirectly called with a fixed table index
  global.get 12
  i32.load
  local.tee 2
  ...
function #15 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(15), end idx: Some(15)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #7
    type: [i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 5
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  total classes: 9

CSV data for further analysis: recursion-formscheerp.wasm,7753,128,21,14.09396,87,18,10,9,1,6,2.3333333333333335,2,281,65,23.131672,53,18.86121,14,4.9822063

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"recursion-formscheerp.wasm",0,1,1,"local.(get|tee)"
"recursion-formscheerp.wasm",1,6,1,"i32.load"
"recursion-formscheerp.wasm",2,0,1,"i32.const"
"recursion-formscheerp.wasm",3,1,1,"i32.const"
"recursion-formscheerp.wasm",4,3,2,"local.(get|tee)"
"recursion-formscheerp.wasm",5,4,2,"i32.load"
"recursion-formscheerp.wasm",6,1,2,"local.(get|tee)"
"recursion-formscheerp.wasm",7,1,5,"i32.const"
"recursion-formscheerp.wasm",8,4,6,"local.(get|tee)"
