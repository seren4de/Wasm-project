Input file: dtcheerp.wasm
  binary:    dtcheerp.wasm

Functions:          103
  Imported:           8
  Non-imported:      95
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         13
  Of those, unique functions:    13 (i.e., at least 12.62% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14434
  call:             254 (1.76% of all instructions)
  call_indirect:     24 (0.17% of all instructions, 8.63% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     35 × global.get   78 × global.set  113 total (31/69% split)
  #1 i32
     init: i32.const 1049016
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1050144
     28 × global.get    0 × global.set   28 total (100/0% split)
  #3 i32
     init: i32.const 1049024
      0 × global.get    0 × global.set    0 total
  #4 i32
     init: i32.const 1050140
     16 × global.get    0 × global.set   16 total (100/0% split)
  #5 i32
     init: i32.const 1053836
     14 × global.get    0 × global.set   14 total (100/0% split)
  #6 i32
     init: i32.const 1053568
      9 × global.get    0 × global.set    9 total (100/0% split)
  #7 i32
     init: i32.const 1053672
      9 × global.get    0 × global.set    9 total (100/0% split)
  #8 i32
     init: i32.const 1053784
      9 × global.get    0 × global.set    9 total (100/0% split)
  #9 i32
     init: i32.const 1053464
      9 × global.get    0 × global.set    9 total (100/0% split)
  #10 i32
     init: i32.const 1052959
      5 × global.get    0 × global.set    5 total (100/0% split)
  #11 i32
     init: i32.const 1051973
      7 × global.get    0 × global.set    7 total (100/0% split)
  #12 i32
     init: i32.const 1049004
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1053832
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 i32
     init: i32.const 1050793
      4 × global.get    0 × global.set    4 total (100/0% split)
  #15 i32
     init: i32.const 1048992
      4 × global.get    0 × global.set    4 total (100/0% split)
  #16 i32
     init: i32.const 1051960
      3 × global.get    0 × global.set    3 total (100/0% split)
  #17 i32
     init: i32.const 1051916
      3 × global.get    0 × global.set    3 total (100/0% split)
  #18 i32
     init: i32.const 1048892
      3 × global.get    0 × global.set    3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     18 (18.95% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   95(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"dtcheerp.wasm",95,100,"[]",0,0

Counts of function types (12 unique types):
    1  (0.97%) × [] -> [f64]
    1  (0.97%) × [i32, i32, i32, i32] -> []
    3  (2.91%) × [] -> []
    4  (3.88%) × [] -> [i32]
    4  (3.88%) × [i32, i32, i32] -> []
    4  (3.88%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (5.83%) × [i32, i32] -> []
    9  (8.74%) × [i32] -> []
   14 (13.59%) × [i32] -> [i32]
   14 (13.59%) × [i32, i32, i32, i32] -> [i32]
   19 (18.45%) × [i32, i32, i32] -> [i32]
   24 (23.30%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 13 (13.68% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [    6,    8]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    9,   10]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                9
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      8                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               24
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #8 is indirectly called with a fixed table index
  global.get 13
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 5
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 5
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  total classes: 8

CSV data for further analysis: dtcheerp.wasm,14434,254,24,8.633094,103,13,5,8,1,6,3,2,366,83,22.677595,70,19.125683,25,6.830601

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"dtcheerp.wasm",0,1,1,"local.(get|tee)"
"dtcheerp.wasm",1,1,1,"i32.const"
"dtcheerp.wasm",2,3,2,"local.(get|tee)"
"dtcheerp.wasm",3,1,2,"local.(get|tee)"
"dtcheerp.wasm",4,0,2,"i32.const"
"dtcheerp.wasm",5,5,5,"i32.load"
"dtcheerp.wasm",6,1,5,"i32.const"
"dtcheerp.wasm",7,5,6,"local.(get|tee)"
