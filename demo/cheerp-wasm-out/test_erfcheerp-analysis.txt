Input file: test_erfcheerp.wasm
  binary:    test_erfcheerp.wasm

Functions:           83
  Imported:           3
  Non-imported:      80
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 14.46% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     14147
  call:             170 (1.20% of all instructions)
  call_indirect:     37 (0.26% of all instructions, 17.87% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     17 × global.get   97 × global.set  114 total (15/85% split)
  #1 i32
     init: i32.const 1049204
      0 × global.get    0 × global.set    0 total
  #2 f64
     init: f64.const 1
     23 × global.get    0 × global.set   23 total (100/0% split)
  #3 i32
     init: i32.const 1049212
      0 × global.get    0 × global.set    0 total
  #4 i32
     init: i32.const 1050784
     12 × global.get    0 × global.set   12 total (100/0% split)
  #5 i32
     init: i32.const 1050728
      9 × global.get    0 × global.set    9 total (100/0% split)
  #6 i32
     init: i32.const 1050616
      5 × global.get    0 × global.set    5 total (100/0% split)
  #7 i32
     init: i32.const 1050512
      5 × global.get    0 × global.set    5 total (100/0% split)
  #8 i32
     init: i32.const 1050408
      5 × global.get    0 × global.set    5 total (100/0% split)
  #9 i32
     init: i32.const 1049192
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1050358
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1050776
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049180
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1050240
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 f64
     init: f64.const 0.5
      4 × global.get    0 × global.set    4 total (100/0% split)
  #15 f64
     init: f64.const 1536.729586084437
      2 × global.get    0 × global.set    2 total (100/0% split)
  #16 f64
     init: f64.const 30.33806074348246
      2 × global.get    0 × global.set    2 total (100/0% split)
  #17 f64
     init: f64.const -0.005770270296489442
      2 × global.get    0 × global.set    2 total (100/0% split)
  #18 f64
     init: f64.const 483.5191916086514
      2 × global.get    0 × global.set    2 total (100/0% split)
  #19 f64
     init: f64.const -0.6938585727071818
      2 × global.get    0 × global.set    2 total (100/0% split)
  #20 f64
     init: f64.const 3199.8582195085955
      2 × global.get    0 × global.set    2 total (100/0% split)
  #21 f64
     init: f64.const 2553.0504064331644
      2 × global.get    0 × global.set    2 total (100/0% split)
  #22 f64
     init: f64.const 474.52854120695537
      2 × global.get    0 × global.set    2 total (100/0% split)
  #23 f64
     init: f64.const -0.0098649429247001
      2 × global.get    0 × global.set    2 total (100/0% split)
  #24 f64
     init: f64.const -17.757954917754752
      2 × global.get    0 × global.set    2 total (100/0% split)
  #25 f64
     init: f64.const -0.009864944034847148
      2 × global.get    0 × global.set    2 total (100/0% split)
  #26 f64
     init: f64.const -162.39666946257347
      2 × global.get    0 × global.set    2 total (100/0% split)
  #27 f64
     init: f64.const 9.814329344169145
      2 × global.get    0 × global.set    2 total (100/0% split)
  #28 f64
     init: f64.const -0.11089469428239668
      2 × global.get    0 × global.set    2 total (100/0% split)
  #29 f64
     init: f64.const 0.12617121980876164
      2 × global.get    0 × global.set    2 total (100/0% split)
  #30 f64
     init: f64.const 0.01363708391202905
      2 × global.get    0 × global.set    2 total (100/0% split)
  #31 f64
     init: f64.const 0.011984499846799107
      2 × global.get    0 × global.set    2 total (100/0% split)
  #32 f64
     init: f64.const 0.39791722395915535
      2 × global.get    0 × global.set    2 total (100/0% split)
  #33 f64
     init: f64.const -0.0023621185607526594
      2 × global.get    0 × global.set    2 total (100/0% split)
  #34 f64
     init: f64.const 0.41485611868374833
      2 × global.get    0 × global.set    2 total (100/0% split)
  #35 f64
     init: f64.const -184.60509290671104
      2 × global.get    0 × global.set    2 total (100/0% split)
  #36 f64
     init: f64.const 0.000023763016656650163
      2 × global.get    0 × global.set    2 total (100/0% split)
  #37 f64
     init: f64.const 22.44095244658582
      2 × global.get    0 × global.set    2 total (100/0% split)
  #38 f64
     init: f64.const 137.65775414351904
      2 × global.get    0 × global.set    2 total (100/0% split)
  #39 f64
     init: f64.const -0.3250421072470015
      2 × global.get    0 × global.set    2 total (100/0% split)
  #40 f64
     init: f64.const 0.000003960228278775368
      2 × global.get    0 × global.set    2 total (100/0% split)
  #41 f64
     init: f64.const 0.12837916709551256
      2 × global.get    0 × global.set    2 total (100/0% split)
  #42 f64
     init: f64.const 434.56587747522923
      2 × global.get    0 × global.set    2 total (100/0% split)
  #43 f64
     init: f64.const -0.02848174957559851
      2 × global.get    0 × global.set    2 total (100/0% split)
  #44 f64
     init: f64.const 325.7925129965739
      2 × global.get    0 × global.set    2 total (100/0% split)
  #45 f64
     init: f64.const 0.00013249473800432164
      2 × global.get    0 × global.set    2 total (100/0% split)
  #46 f64
     init: f64.const -0.799283237680523
      2 × global.get    0 × global.set    2 total (100/0% split)
  #47 f64
     init: f64.const 0.540397917702171
      2 × global.get    0 × global.set    2 total (100/0% split)
  #48 f64
     init: f64.const 0.31834661990116175
      2 × global.get    0 × global.set    2 total (100/0% split)
  #49 f64
     init: f64.const 0.035478304325618236
      2 × global.get    0 × global.set    2 total (100/0% split)
  #50 f64
     init: f64.const -0.3722078760357013
      2 × global.get    0 × global.set    2 total (100/0% split)
  #51 f64
     init: f64.const -160.63638485582192
      2 × global.get    0 × global.set    2 total (100/0% split)
  #52 f64
     init: f64.const -10.558626225323291
      2 × global.get    0 × global.set    2 total (100/0% split)
  #53 f64
     init: f64.const 0.002166375594868791
      2 × global.get    0 × global.set    2 total (100/0% split)
  #54 f64
     init: f64.const -637.5664433683896
      2 × global.get    0 × global.set    2 total (100/0% split)
  #55 f64
     init: f64.const -1025.0951316110772
      2 × global.get    0 × global.set    2 total (100/0% split)
  #56 f64
     init: f64.const 19.651271667439257
      2 × global.get    0 × global.set    2 total (100/0% split)
  #57 f64
     init: f64.const 645.3872717332679
      2 × global.get    0 × global.set    2 total (100/0% split)
  #58 f64
     init: f64.const 429.00814002756783
      2 × global.get    0 × global.set    2 total (100/0% split)
  #59 f64
     init: f64.const 108.63500554177944
      2 × global.get    0 × global.set    2 total (100/0% split)
  #60 f64
     init: f64.const 6.570249770319282
      2 × global.get    0 × global.set    2 total (100/0% split)
  #61 f64
     init: f64.const 0.0604244152148581
      2 × global.get    0 × global.set    2 total (100/0% split)
  #62 f64
     init: f64.const 0.07182865441419627
      2 × global.get    0 × global.set    2 total (100/0% split)
  #63 f64
     init: f64.const 0.0650222499887673
      2 × global.get    0 × global.set    2 total (100/0% split)
  #64 f64
     init: f64.const -62.375332450326006
      2 × global.get    0 × global.set    2 total (100/0% split)
  #65 f64
     init: f64.const 0.10642088040084423
      2 × global.get    0 × global.set    2 total (100/0% split)
  #66 f64
     init: f64.const -81.2874355063066
      2 × global.get    0 × global.set    2 total (100/0% split)
  #67 f64
     init: f64.const 0.005081306281875766
      2 × global.get    0 × global.set    2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     17 (21.25% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   80(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_erfcheerp.wasm",80,100,"[]",0,0

Counts of function types (16 unique types):
    1  (1.20%) × [i32, i32, i32, i32] -> []
    1  (1.20%) × [i32, f64, i32, i32] -> [i32]
    1  (1.20%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (1.20%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.20%) × [f64] -> [i32]
    2  (2.41%) × [i32, i32, i32] -> []
    3  (3.61%) × [] -> []
    3  (3.61%) × [i32] -> []
    3  (3.61%) × [f64] -> [f64]
    4  (4.82%) × [] -> [i32]
    4  (4.82%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (6.02%) × [i32, i32] -> []
   10 (12.05%) × [i32] -> [i32]
   10 (12.05%) × [i32, i32, i32, i32] -> [i32]
   17 (20.48%) × [i32, i32] -> [i32]
   17 (20.48%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (12.50% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      6                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      8                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #6 is indirectly called with a fixed table index
  global.get 11
  i32.load
  local.tee 2
  ...
function #8 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #2
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(6), end idx: Some(6)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 6

CSV data for further analysis: test_erfcheerp.wasm,14147,170,37,17.874395,83,12,4,6,1,25,6.166666666666667,2,414,133,32.125603,122,29.4686,8,1.9323672

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_erfcheerp.wasm",0,1,1,"i32.const"
"test_erfcheerp.wasm",1,3,2,"local.(get|tee)"
"test_erfcheerp.wasm",2,4,2,"i32.load"
"test_erfcheerp.wasm",3,1,2,"local.(get|tee)"
"test_erfcheerp.wasm",4,1,5,"i32.const"
"test_erfcheerp.wasm",5,4,25,"local.(get|tee)"
