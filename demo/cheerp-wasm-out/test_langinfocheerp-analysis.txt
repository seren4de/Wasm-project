Input file: test_langinfocheerp.wasm
  binary:    test_langinfocheerp.wasm

Functions:          101
  Imported:           3
  Non-imported:      98
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         21
  Of those, unique functions:    21 (i.e., at least 20.79% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16312
  call:             367 (2.25% of all instructions)
  call_indirect:     19 (0.12% of all instructions, 4.92% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      73 × global.get   235 × global.set   308 total (24/76% split)
  #1 i32
     init: i32.const 1051880
      56 × global.get     0 × global.set    56 total (100/0% split)
  #2 i32
     init: i32.const 1049292
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1049300
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1053532
      13 × global.get     0 × global.set    13 total (100/0% split)
  #5 i32
     init: i32.const 1053772
      12 × global.get     0 × global.set    12 total (100/0% split)
  #6 i32
     init: i32.const 1053032
       9 × global.get     0 × global.set     9 total (100/0% split)
  #7 i32
     init: i32.const 1052320
       8 × global.get     0 × global.set     8 total (100/0% split)
  #8 i32
     init: i32.const 1051106
       8 × global.get     0 × global.set     8 total (100/0% split)
  #9 i32
     init: i32.const 1050320
       8 × global.get     0 × global.set     8 total (100/0% split)
  #10 i32
     init: i32.const 1052328
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1052432
       5 × global.get     0 × global.set     5 total (100/0% split)
  #12 i32
     init: i32.const 1052316
       5 × global.get     0 × global.set     5 total (100/0% split)
  #13 i32
     init: i32.const 1052312
       5 × global.get     0 × global.set     5 total (100/0% split)
  #14 i32
     init: i32.const 1052536
       5 × global.get     0 × global.set     5 total (100/0% split)
  #15 i32
     init: i32.const 1049272
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1051234
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1051266
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1049276
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1051202
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1050324
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1053072
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 i32
     init: i32.const 1051340
       4 × global.get     0 × global.set     4 total (100/0% split)
  #23 i32
     init: i32.const 1051170
       4 × global.get     0 × global.set     4 total (100/0% split)
  #24 i32
     init: i32.const 1051138
       4 × global.get     0 × global.set     4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     18 (18.37% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   98(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_langinfocheerp.wasm",98,100,"[]",0,0

Counts of function types (12 unique types):
    1  (0.99%) × [i32, i32, i32, i32] -> []
    2  (1.98%) × [i32, i32, i32] -> []
    4  (3.96%) × [] -> []
    4  (3.96%) × [i32, i32] -> []
    5  (4.95%) × [i32] -> []
    5  (4.95%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    7  (6.93%) × [i32, i32, i32, i32, i32] -> [i32]
    9  (8.91%) × [] -> [i32]
    9  (8.91%) × [i32] -> [i32]
   12 (11.88%) × [i32, i32, i32, i32] -> [i32]
   20 (19.80%) × [i32, i32, i32] -> [i32]
   23 (22.77%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (10.20% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [    6,   10]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32, i32, i32] -> [i32]
         range: [   11,   14]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [   15,   17]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [   18,   19]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   20,   20]   length:   1   unique funcs:    1   type: [i32] -> []
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:     17                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     19                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #17 is indirectly called with a fixed table index
  global.get 21
  i32.load
  local.tee 2
  ...
function #19 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(19), end idx: Some(19)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(17), end idx: Some(17)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 6
  total classes: 7

CSV data for further analysis: test_langinfocheerp.wasm,16312,367,19,4.92228,101,21,4,7,1,6,2.7142857142857144,2,298,70,23.489933,54,18.120806,8,2.6845639

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_langinfocheerp.wasm",0,0,1,"i32.const"
"test_langinfocheerp.wasm",1,1,1,"i32.const"
"test_langinfocheerp.wasm",2,3,2,"local.(get|tee)"
"test_langinfocheerp.wasm",3,4,2,"i32.load"
"test_langinfocheerp.wasm",4,5,2,"local.(get|tee)"
"test_langinfocheerp.wasm",5,1,5,"i32.const"
"test_langinfocheerp.wasm",6,4,6,"local.(get|tee)"
