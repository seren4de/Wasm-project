Input file: m68kmakecheerp.wasm
  binary:    m68kmakecheerp.wasm

Functions:          156
  Imported:           6
  Non-imported:     150
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         16
  Of those, unique functions:    16 (i.e., at least 10.26% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     25634
  call:             536 (2.09% of all instructions)
  call_indirect:     68 (0.27% of all instructions, 11.26% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     111 × global.get   282 × global.set   393 total (28/72% split)
  #1 i32
     init: i32.const 1050724
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1050704
      22 × global.get     0 × global.set    22 total (100/0% split)
  #3 i32
     init: i32.const 1050732
       0 × global.get     0 × global.set     0 total
  #4 i32
     init: i32.const 1058044
      14 × global.get     0 × global.set    14 total (100/0% split)
  #5 i32
     init: i32.const 1057664
      13 × global.get     0 × global.set    13 total (100/0% split)
  #6 i32
     init: i32.const 1057680
      12 × global.get     0 × global.set    12 total (100/0% split)
  #7 i32
     init: i32.const 1057888
      12 × global.get     0 × global.set    12 total (100/0% split)
  #8 i32
     init: i32.const 1057660
      12 × global.get     0 × global.set    12 total (100/0% split)
  #9 i32
     init: i32.const 1057784
      12 × global.get     0 × global.set    12 total (100/0% split)
  #10 i32
     init: i32.const 1058000
       9 × global.get     0 × global.set     9 total (100/0% split)
  #11 i32
     init: i32.const 1057656
       8 × global.get     0 × global.set     8 total (100/0% split)
  #12 i32
     init: i32.const 1055159
       6 × global.get     0 × global.set     6 total (100/0% split)
  #13 i32
     init: i32.const 1055475
       4 × global.get     0 × global.set     4 total (100/0% split)
  #14 i32
     init: i32.const 1050696
       5 × global.get     0 × global.set     5 total (100/0% split)
  #15 i32
     init: i32.const 1268056
       5 × global.get     0 × global.set     5 total (100/0% split)
  #16 i32
     init: i32.const 1050712
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 i32
     init: i32.const 1050700
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1058040
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1053613
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1057155
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 i32
     init: i32.const 1055256
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 i32
     init: i32.const 1057668
       3 × global.get     0 × global.set     3 total (100/0% split)
  #23 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)
  #24 i32
     init: i32.const 1057176
       3 × global.get     0 × global.set     3 total (100/0% split)
  #25 i32
     init: i32.const 1057672
       3 × global.get     0 × global.set     3 total (100/0% split)
  #26 i32
     init: i32.const 1050688
       3 × global.get     0 × global.set     3 total (100/0% split)
  #27 i32
     init: i32.const 1053172
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     42 (28.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  150(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"m68kmakecheerp.wasm",150,100,"[]",0,0

Counts of function types (16 unique types):
    1  (0.64%) × [i32, f64, i32, i32] -> [i32]
    1  (0.64%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.64%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.64%) × [f64] -> [i32]
    2  (1.28%) × [i32, i32, i32, i32, i32] -> []
    3  (1.92%) × [] -> [i32]
    3  (1.92%) × [i32, i32, i32, i32] -> []
    5  (3.21%) × [] -> []
    5  (3.21%) × [i32, i32, i32] -> []
    6  (3.85%) × [i32, i32, i32, i32, i32] -> [i32]
   11  (7.05%) × [i32, i32] -> []
   12  (7.69%) × [i32] -> []
   17 (10.90%) × [i32] -> [i32]
   23 (14.74%) × [i32, i32, i32, i32] -> [i32]
   32 (20.51%) × [i32, i32, i32] -> [i32]
   33 (21.15%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 17 (11.33% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   10]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   11,   12]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):               12
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
    22 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               33
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    29 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               23
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               32
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               33
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               32
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  9 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 18
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #7
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 22
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 29
  total classes: 9

CSV data for further analysis: m68kmakecheerp.wasm,25634,536,68,11.258278,156,16,5,9,1,29,7.555555555555555,2,1801,318,17.656857,295,16.37979,30,1.6657412

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"m68kmakecheerp.wasm",0,1,1,"local.(get|tee)"
"m68kmakecheerp.wasm",1,1,1,"local.(get|tee)"
"m68kmakecheerp.wasm",2,0,1,"i32.const"
"m68kmakecheerp.wasm",3,1,1,"i32.const"
"m68kmakecheerp.wasm",4,1,2,"local.(get|tee)"
"m68kmakecheerp.wasm",5,1,5,"i32.const"
"m68kmakecheerp.wasm",6,5,6,"i32.load"
"m68kmakecheerp.wasm",7,5,22,"local.(get|tee)"
"m68kmakecheerp.wasm",8,5,29,"local.(get|tee)"
