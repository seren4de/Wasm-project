Input file: test_varargscheerp.wasm
  binary:    test_varargscheerp.wasm

Functions:           98
  Imported:           3
  Non-imported:      95
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         14
  Of those, unique functions:    14 (i.e., at least 14.29% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16328
  call:             226 (1.38% of all instructions)
  call_indirect:     41 (0.25% of all instructions, 15.36% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      34 × global.get   110 × global.set   144 total (24/76% split)
  #1 i32
     init: i32.const 1049128
       0 × global.get     0 × global.set     0 total
  #2 i32
     init: i32.const 1049136
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1050932
      12 × global.get     0 × global.set    12 total (100/0% split)
  #4 i32
     init: i32.const 1050888
       9 × global.get     0 × global.set     9 total (100/0% split)
  #5 i32
     init: i32.const 1050188
       7 × global.get     0 × global.set     7 total (100/0% split)
  #6 i32
     init: i32.const 1050568
       6 × global.get     0 × global.set     6 total (100/0% split)
  #7 i32
     init: i32.const 1050672
       6 × global.get     0 × global.set     6 total (100/0% split)
  #8 i32
     init: i32.const 1050776
       6 × global.get     0 × global.set     6 total (100/0% split)
  #9 i32
     init: i32.const 1050236
       4 × global.get     0 × global.set     4 total (100/0% split)
  #10 i32
     init: i32.const 1050160
       4 × global.get     0 × global.set     4 total (100/0% split)
  #11 i32
     init: i32.const 1050928
       4 × global.get     0 × global.set     4 total (100/0% split)
  #12 i32
     init: i32.const 1050156
       4 × global.get     0 × global.set     4 total (100/0% split)
  #13 f64
     init: f64.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)
  #14 f64
     init: f64.const 5.1
       1 × global.get     0 × global.set     1 total (100/0% split)
  #15 f64
     init: f64.const 2.1
       1 × global.get     0 × global.set     1 total (100/0% split)
  #16 f64
     init: f64.const 19.1
       1 × global.get     0 × global.set     1 total (100/0% split)
  #17 f64
     init: f64.const -10.1
       1 × global.get     0 × global.set     1 total (100/0% split)
  #18 f64
     init: f64.const 4.1
       1 × global.get     0 × global.set     1 total (100/0% split)
  #19 f64
     init: f64.const 22.1
       1 × global.get     0 × global.set     1 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     25 (26.32% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   95(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_varargscheerp.wasm",95,100,"[]",0,0

Counts of function types (16 unique types):
    1  (1.02%) × [i32] -> [f64]
    1  (1.02%) × [i32, i32, i32, i32] -> []
    1  (1.02%) × [i32, f64, i32, i32] -> [i32]
    1  (1.02%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (1.02%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.02%) × [f64] -> [i32]
    3  (3.06%) × [] -> [i32]
    4  (4.08%) × [] -> []
    4  (4.08%) × [i32] -> []
    4  (4.08%) × [i32, i32, i32] -> []
    5  (5.10%) × [i32, i32, i32, i32, i32] -> [i32]
    7  (7.14%) × [i32, i32] -> []
   13 (13.27%) × [i32] -> [i32]
   13 (13.27%) × [i32, i32, i32, i32] -> [i32]
   19 (19.39%) × [i32, i32] -> [i32]
   20 (20.41%) × [i32, i32, i32] -> [i32]

Functions with at least one call_indirect: 12 (12.63% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [    6,    7]   length:   2   unique funcs:    2   type: [i32] -> []
         range: [    8,   10]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [   11,   12]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source:      other   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:     10                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     11                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #10 is indirectly called with a fixed table index
  global.get 11
  i32.load
  local.tee 2
  ...
function #11 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32] -> [i32]
    start idx: Some(11), end idx: Some(11)
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 5
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 25
  total classes: 7

CSV data for further analysis: test_varargscheerp.wasm,16328,226,41,15.355805,98,14,5,7,1,25,5.857142857142857,2,557,177,31.777378,166,29.802513,25,4.4883304

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_varargscheerp.wasm",0,2,1,"other"
"test_varargscheerp.wasm",1,1,1,"i32.const"
"test_varargscheerp.wasm",2,3,2,"local.(get|tee)"
"test_varargscheerp.wasm",3,1,2,"local.(get|tee)"
"test_varargscheerp.wasm",4,5,5,"i32.load"
"test_varargscheerp.wasm",5,1,5,"i32.const"
"test_varargscheerp.wasm",6,5,25,"local.(get|tee)"
