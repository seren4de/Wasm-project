Input file: test_frexpcheerp.wasm
  binary:    test_frexpcheerp.wasm

Functions:           91
  Imported:           3
  Non-imported:      88
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 13.19% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     15362
  call:             210 (1.37% of all instructions)
  call_indirect:     37 (0.24% of all instructions, 14.98% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      23 × global.get   135 × global.set   158 total (15/85% split)
  #1 f64
     init: f64.const 0
      27 × global.get     0 × global.set    27 total (100/0% split)
  #2 i32
     init: i32.const 1049208
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1049216
       0 × global.get     0 × global.set     0 total
  #4 f64
     init: f64.const 1
      14 × global.get     0 × global.set    14 total (100/0% split)
  #5 i32
     init: i32.const 1050976
      12 × global.get     0 × global.set    12 total (100/0% split)
  #6 i32
     init: i32.const 1050920
       9 × global.get     0 × global.set     9 total (100/0% split)
  #7 f64
     init: f64.const 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
       8 × global.get     0 × global.set     8 total (100/0% split)
  #8 f64
     init: f64.const 0.5
       8 × global.get     0 × global.set     8 total (100/0% split)
  #9 f64
     init: f64.const 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
       7 × global.get     0 × global.set     7 total (100/0% split)
  #10 i32
     init: i32.const 1050244
       7 × global.get     0 × global.set     7 total (100/0% split)
  #11 i32
     init: i32.const 1050252
       6 × global.get     0 × global.set     6 total (100/0% split)
  #12 i32
     init: i32.const 1050524
       6 × global.get     0 × global.set     6 total (100/0% split)
  #13 i32
     init: i32.const 1050600
       5 × global.get     0 × global.set     5 total (100/0% split)
  #14 i32
     init: i32.const 1050808
       5 × global.get     0 × global.set     5 total (100/0% split)
  #15 i32
     init: i32.const 1050704
       5 × global.get     0 × global.set     5 total (100/0% split)
  #16 f64
     init: f64.const inf
       5 × global.get     0 × global.set     5 total (100/0% split)
  #17 i32
     init: i32.const 1050232
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 i32
     init: i32.const 1050248
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1050968
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1050558
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 f64
     init: f64.const 0
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 f64
     init: f64.const NaN
       2 × global.get     0 × global.set     2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     22 (25.00% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   88(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_frexpcheerp.wasm",88,100,"[]",0,0

Counts of function types (20 unique types):
    1  (1.10%) × [i32] -> [f64]
    1  (1.10%) × [i32, f64, i32, i32] -> [i32]
    1  (1.10%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (1.10%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (1.10%) × [f64] -> []
    1  (1.10%) × [f64] -> [f64]
    2  (2.20%) × [i32, i32, i32] -> []
    2  (2.20%) × [i32, i32, i32, i32] -> []
    2  (2.20%) × [f64] -> [i32]
    2  (2.20%) × [f64, i32] -> [f64]
    2  (2.20%) × [f64, f64] -> [f64]
    3  (3.30%) × [] -> []
    3  (3.30%) × [i32] -> []
    4  (4.40%) × [] -> [i32]
    4  (4.40%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.49%) × [i32, i32] -> []
   10 (10.99%) × [i32, i32, i32, i32] -> [i32]
   11 (12.09%) × [i32] -> [i32]
   17 (18.68%) × [i32, i32, i32] -> [i32]
   18 (19.78%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (11.36% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      6                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      8                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #6 is indirectly called with a fixed table index
  global.get 19
  i32.load
  local.tee 2
  ...
function #8 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(8), end idx: Some(8)
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #2
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(6), end idx: Some(6)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 6

CSV data for further analysis: test_frexpcheerp.wasm,15362,210,37,14.979757,91,12,4,6,1,25,6.166666666666667,2,421,133,31.59145,122,28.978622,8,1.9002376

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_frexpcheerp.wasm",0,1,1,"i32.const"
"test_frexpcheerp.wasm",1,3,2,"local.(get|tee)"
"test_frexpcheerp.wasm",2,4,2,"i32.load"
"test_frexpcheerp.wasm",3,1,2,"local.(get|tee)"
"test_frexpcheerp.wasm",4,1,5,"i32.const"
"test_frexpcheerp.wasm",5,4,25,"local.(get|tee)"
