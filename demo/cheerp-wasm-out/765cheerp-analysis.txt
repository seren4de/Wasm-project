Input file: 765cheerp.wasm
  binary:    765cheerp.wasm

Functions:           91
  Imported:           6
  Non-imported:      85
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         15
  Of those, unique functions:    15 (i.e., at least 16.48% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     11740
  call:             194 (1.65% of all instructions)
  call_indirect:     31 (0.26% of all instructions, 13.78% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     31 × global.get   82 × global.set  113 total (27/73% split)
  #1 i32
     init: i32.const 1048864
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048872
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1052220
     14 × global.get    0 × global.set   14 total (100/0% split)
  #4 i32
     init: i32.const 1049888
     11 × global.get    0 × global.set   11 total (100/0% split)
  #5 i32
     init: i32.const 1052176
      9 × global.get    0 × global.set    9 total (100/0% split)
  #6 i32
     init: i32.const 1051856
      8 × global.get    0 × global.set    8 total (100/0% split)
  #7 i32
     init: i32.const 1051960
      8 × global.get    0 × global.set    8 total (100/0% split)
  #8 i32
     init: i32.const 1052064
      8 × global.get    0 × global.set    8 total (100/0% split)
  #9 i32
     init: i32.const 1048840
      5 × global.get    0 × global.set    5 total (100/0% split)
  #10 i32
     init: i32.const 1048844
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1052216
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1050403
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1048848
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 i32
     init: i32.const 1050603
      2 × global.get    0 × global.set    2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     16 (18.82% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   85(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"765cheerp.wasm",85,100,"[]",0,0

Counts of function types (11 unique types):
    1  (1.10%) × [i32, i32, i32, i32] -> []
    2  (2.20%) × [i32, i32, i32] -> []
    3  (3.30%) × [] -> [i32]
    4  (4.40%) × [] -> []
    4  (4.40%) × [i32, i32, i32, i32, i32] -> [i32]
    5  (5.49%) × [i32, i32] -> []
    6  (6.59%) × [i32] -> []
   13 (14.29%) × [i32] -> [i32]
   16 (17.58%) × [i32, i32, i32, i32] -> [i32]
   17 (18.68%) × [i32, i32, i32] -> [i32]
   20 (21.98%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 17 (20.00% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    9]   length:   5   unique funcs:    5   type: [i32, i32, i32, i32] -> [i32]
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               13
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      4                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               20
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     10                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  10 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #4 is indirectly called with a fixed table index
  global.get 11
  i32.load
  local.tee 2
  ...
function #10 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(10), end idx: Some(10)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #7
    type: [i32, i32] -> [i32]
    start idx: Some(4), end idx: Some(4)
    size (of class): 1
    count (how often class appears): 5
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 6
  class #9
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 10
  total classes: 10

CSV data for further analysis: 765cheerp.wasm,11740,194,31,13.777778,91,15,5,10,1,10,3.1,2,465,118,25.376345,98,21.07527,30,6.451613

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"765cheerp.wasm",0,1,1,"local.(get|tee)"
"765cheerp.wasm",1,1,1,"local.(get|tee)"
"765cheerp.wasm",2,0,1,"i32.const"
"765cheerp.wasm",3,1,1,"i32.const"
"765cheerp.wasm",4,4,2,"local.(get|tee)"
"765cheerp.wasm",5,1,2,"local.(get|tee)"
"765cheerp.wasm",6,0,2,"i32.const"
"765cheerp.wasm",7,1,5,"i32.const"
"765cheerp.wasm",8,5,6,"i32.load"
"765cheerp.wasm",9,5,10,"local.(get|tee)"
