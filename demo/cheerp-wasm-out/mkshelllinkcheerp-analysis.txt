Input file: mkshelllinkcheerp.wasm
  binary:    mkshelllinkcheerp.wasm

Functions:          127
  Imported:           4
  Non-imported:     123
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         20
  Of those, unique functions:    20 (i.e., at least 15.75% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     24310
  call:             318 (1.31% of all instructions)
  call_indirect:     46 (0.19% of all instructions, 12.64% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
     32 × global.get   98 × global.set  130 total (25/75% split)
  #1 i32
     init: i32.const 1049288
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1049296
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1052116
     14 × global.get    0 × global.set   14 total (100/0% split)
  #4 i32
     init: i32.const 1050316
     13 × global.get    0 × global.set   13 total (100/0% split)
  #5 i32
     init: i32.const 1050312
     12 × global.get    0 × global.set   12 total (100/0% split)
  #6 i32
     init: i32.const 1051960
     11 × global.get    0 × global.set   11 total (100/0% split)
  #7 i32
     init: i32.const 1051856
     11 × global.get    0 × global.set   11 total (100/0% split)
  #8 i32
     init: i32.const 1051752
     11 × global.get    0 × global.set   11 total (100/0% split)
  #9 i32
     init: i32.const 1052072
      9 × global.get    0 × global.set    9 total (100/0% split)
  #10 i32
     init: i32.const 1049272
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 f64
     init: f64.const 0.5
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049264
      4 × global.get    0 × global.set    4 total (100/0% split)
  #13 i32
     init: i32.const 1049268
      4 × global.get    0 × global.set    4 total (100/0% split)
  #14 i32
     init: i32.const 1052112
      4 × global.get    0 × global.set    4 total (100/0% split)
  #15 i32
     init: i32.const 1050668
      4 × global.get    0 × global.set    4 total (100/0% split)
  #16 f64
     init: f64.const 0
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     27 (21.95% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  123(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"mkshelllinkcheerp.wasm",123,100,"[]",0,0

Counts of function types (19 unique types):
    1  (0.79%) × [i32] -> [f32]
    1  (0.79%) × [i32, i32, i32] -> [f64]
    1  (0.79%) × [i32, i32, i32, i32] -> []
    1  (0.79%) × [i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.79%) × [i32, f64, i32, i32] -> [i32]
    1  (0.79%) × [f64] -> [i32]
    1  (0.79%) × [f64] -> [f64]
    2  (1.57%) × [i32, i32] -> [f64]
    2  (1.57%) × [i32, i32, i32, i32, i32] -> []
    3  (2.36%) × [] -> [i32]
    3  (2.36%) × [i32] -> []
    3  (2.36%) × [i32, i32, i32] -> []
    4  (3.15%) × [] -> []
    5  (3.94%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (4.72%) × [i32, i32] -> []
   14 (11.02%) × [i32] -> [i32]
   22 (17.32%) × [i32, i32, i32, i32] -> [i32]
   27 (21.26%) × [i32, i32, i32] -> [i32]
   29 (22.83%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 20 (16.26% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   11]   length:   6   unique funcs:    6   type: [i32, i32, i32, i32] -> [i32]
         range: [   12,   14]   length:   3   unique funcs:    3   type: [i32, i32, i32] -> [i32]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   17,   18]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32] -> []
         range: [   19,   19]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  8 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     8 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     6 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):                2
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              0
     2 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               29
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     12                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               27
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  12 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 14
  i32.load
  local.tee 2
  ...
function #12 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32, i32] -> []
    start idx: None, end idx: None
    size (of class): 2
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(12), end idx: Some(12)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #6
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 2
  class #7
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #8
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 6
  class #9
    type: [i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 7
  class #10
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 8
  class #11
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 6
    count (how often class appears): 10
  total classes: 12

CSV data for further analysis: mkshelllinkcheerp.wasm,24310,318,46,12.6373625,127,20,14,12,1,10,3.8333333333333335,2,1066,205,19.23077,178,16.697937,97,9.099437

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"mkshelllinkcheerp.wasm",0,1,1,"local.(get|tee)"
"mkshelllinkcheerp.wasm",1,2,1,"other"
"mkshelllinkcheerp.wasm",2,0,1,"i32.const"
"mkshelllinkcheerp.wasm",3,1,1,"i32.const"
"mkshelllinkcheerp.wasm",4,5,2,"local.(get|tee)"
"mkshelllinkcheerp.wasm",5,1,2,"local.(get|tee)"
"mkshelllinkcheerp.wasm",6,0,2,"i32.const"
"mkshelllinkcheerp.wasm",7,1,5,"i32.const"
"mkshelllinkcheerp.wasm",8,6,6,"i32.load"
"mkshelllinkcheerp.wasm",9,3,7,"i32.load"
"mkshelllinkcheerp.wasm",10,5,8,"i32.load"
"mkshelllinkcheerp.wasm",11,6,10,"local.(get|tee)"
