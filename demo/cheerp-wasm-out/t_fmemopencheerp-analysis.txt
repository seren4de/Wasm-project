Input file: t_fmemopencheerp.wasm
  binary:    t_fmemopencheerp.wasm

Functions:          146
  Imported:           3
  Non-imported:     143
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         18
  Of those, unique functions:    18 (i.e., at least 12.33% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     16344
  call:             692 (4.23% of all instructions)
  call_indirect:     29 (0.18% of all instructions, 4.02% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      59 × global.get   137 × global.set   196 total (30/70% split)
  #1 i32
     init: i32.const 1053597
     202 × global.get     0 × global.set   202 total (100/0% split)
  #2 i32
     init: i32.const 1049512
       0 × global.get     0 × global.set     0 total
  #3 i32
     init: i32.const 1050540
      21 × global.get     0 × global.set    21 total (100/0% split)
  #4 i32
     init: i32.const 1054722
      19 × global.get     0 × global.set    19 total (100/0% split)
  #5 i32
     init: i32.const 1054585
      19 × global.get     0 × global.set    19 total (100/0% split)
  #6 i32
     init: i32.const 1054380
      18 × global.get     0 × global.set    18 total (100/0% split)
  #7 i32
     init: i32.const 1055200
      17 × global.get     0 × global.set    17 total (100/0% split)
  #8 i32
     init: i32.const 1055304
      17 × global.get     0 × global.set    17 total (100/0% split)
  #9 i32
     init: i32.const 1055096
      17 × global.get     0 × global.set    17 total (100/0% split)
  #10 i32
     init: i32.const 1049520
       0 × global.get     0 × global.set     0 total
  #11 i32
     init: i32.const 1050935
      16 × global.get     0 × global.set    16 total (100/0% split)
  #12 i32
     init: i32.const 1054561
      16 × global.get     0 × global.set    16 total (100/0% split)
  #13 i32
     init: i32.const 1050777
      16 × global.get     0 × global.set    16 total (100/0% split)
  #14 i32
     init: i32.const 1048824
      15 × global.get     0 × global.set    15 total (100/0% split)
  #15 i32
     init: i32.const 1054175
      14 × global.get     0 × global.set    14 total (100/0% split)
  #16 i32
     init: i32.const 1051175
      13 × global.get     0 × global.set    13 total (100/0% split)
  #17 i32
     init: i32.const 1050632
      13 × global.get     0 × global.set    13 total (100/0% split)
  #18 i32
     init: i32.const 1050829
      12 × global.get     0 × global.set    12 total (100/0% split)
  #19 i32
     init: i32.const 1054473
      12 × global.get     0 × global.set    12 total (100/0% split)
  #20 i32
     init: i32.const 1051966
      12 × global.get     0 × global.set    12 total (100/0% split)
  #21 i32
     init: i32.const 1055460
      12 × global.get     0 × global.set    12 total (100/0% split)
  #22 i32
     init: i32.const 1051915
      11 × global.get     0 × global.set    11 total (100/0% split)
  #23 i32
     init: i32.const 1051954
      10 × global.get     0 × global.set    10 total (100/0% split)
  #24 i32
     init: i32.const 1055033
      10 × global.get     0 × global.set    10 total (100/0% split)
  #25 i32
     init: i32.const 1051132
       9 × global.get     0 × global.set     9 total (100/0% split)
  #26 i32
     init: i32.const 1055416
       9 × global.get     0 × global.set     9 total (100/0% split)
  #27 i32
     init: i32.const 1051187
       8 × global.get     0 × global.set     8 total (100/0% split)
  #28 i32
     init: i32.const 1054137
       7 × global.get     0 × global.set     7 total (100/0% split)
  #29 i32
     init: i32.const 1051397
       7 × global.get     0 × global.set     7 total (100/0% split)
  #30 i32
     init: i32.const 1051465
       6 × global.get     0 × global.set     6 total (100/0% split)
  #31 i32
     init: i32.const 1051409
       6 × global.get     0 × global.set     6 total (100/0% split)
  #32 i32
     init: i32.const 1054807
       6 × global.get     0 × global.set     6 total (100/0% split)
  #33 i32
     init: i32.const 1054573
       6 × global.get     0 × global.set     6 total (100/0% split)
  #34 i32
     init: i32.const 1051546
       6 × global.get     0 × global.set     6 total (100/0% split)
  #35 i32
     init: i32.const 1054910
       5 × global.get     0 × global.set     5 total (100/0% split)
  #36 i32
     init: i32.const 1054821
       5 × global.get     0 × global.set     5 total (100/0% split)
  #37 i32
     init: i32.const 1050644
       5 × global.get     0 × global.set     5 total (100/0% split)
  #38 i32
     init: i32.const 1049460
       5 × global.get     0 × global.set     5 total (100/0% split)
  #39 i32
     init: i32.const 1052099
       5 × global.get     0 × global.set     5 total (100/0% split)
  #40 i32
     init: i32.const 1054310
       4 × global.get     0 × global.set     4 total (100/0% split)
  #41 i32
     init: i32.const 1049488
       4 × global.get     0 × global.set     4 total (100/0% split)
  #42 i32
     init: i32.const 1055456
       4 × global.get     0 × global.set     4 total (100/0% split)
  #43 i32
     init: i32.const 1049496
       4 × global.get     0 × global.set     4 total (100/0% split)
  #44 i32
     init: i32.const 1051651
       4 × global.get     0 × global.set     4 total (100/0% split)
  #45 i32
     init: i32.const 1052154
       4 × global.get     0 × global.set     4 total (100/0% split)
  #46 i32
     init: i32.const 1049492
       4 × global.get     0 × global.set     4 total (100/0% split)
  #47 i32
     init: i32.const 1051446
       4 × global.get     0 × global.set     4 total (100/0% split)
  #48 i32
     init: i32.const 1051506
       3 × global.get     0 × global.set     3 total (100/0% split)
  #49 i32
     init: i32.const 1054956
       3 × global.get     0 × global.set     3 total (100/0% split)
  #50 i32
     init: i32.const 1054229
       3 × global.get     0 × global.set     3 total (100/0% split)
  #51 i32
     init: i32.const 1055059
       3 × global.get     0 × global.set     3 total (100/0% split)
  #52 i32
     init: i32.const 1051579
       3 × global.get     0 × global.set     3 total (100/0% split)
  #53 i32
     init: i32.const 1051379
       3 × global.get     0 × global.set     3 total (100/0% split)
  #54 i32
     init: i32.const 1051305
       3 × global.get     0 × global.set     3 total (100/0% split)
  #55 i32
     init: i32.const 1051276
       3 × global.get     0 × global.set     3 total (100/0% split)
  #56 i32
     init: i32.const 1049372
       3 × global.get     0 × global.set     3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     59 (41.26% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
  143(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"t_fmemopencheerp.wasm",143,100,"[]",0,0

Counts of function types (11 unique types):
    2  (1.37%) × [i32, i32, i32] -> []
    2  (1.37%) × [i32, i32, i32, i32] -> []
    4  (2.74%) × [] -> [i32]
    5  (3.42%) × [i32] -> []
    5  (3.42%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (4.11%) × [i32, i32] -> []
   14  (9.59%) × [i32] -> [i32]
   18 (12.33%) × [i32, i32, i32, i32] -> [i32]
   19 (13.01%) × [i32, i32, i32] -> [i32]
   22 (15.07%) × [i32, i32] -> [i32]
   49 (33.56%) × [] -> []

Functions with at least one call_indirect: 15 (10.49% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    5]   length:   5   unique funcs:    5   type: [i32, i32] -> [i32]
         range: [    6,   12]   length:   7   unique funcs:    7   type: [i32, i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   14,   15]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  7 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               14
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     7 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
    10 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    7
         functions matching by type and present in permissable table index range:              7
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      0                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              0
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               22
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     15                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               19
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  8 call_indirect patterns in total

function #0 is indirectly called with a fixed table index
  unreachable
  end
  ...
function #5 is indirectly called with a fixed table index
  global.get 42
  i32.load
  local.tee 2
  ...
function #15 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: Some(0), end idx: Some(0)
    size (of class): 0
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(15), end idx: Some(15)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 5
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  class #6
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 7
  class #7
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 7
    count (how often class appears): 10
  total classes: 8

CSV data for further analysis: t_fmemopencheerp.wasm,16344,692,29,4.0221915,146,18,7,8,1,10,3.625,2,508,160,31.496063,138,27.165354,49,9.645669

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"t_fmemopencheerp.wasm",0,1,1,"local.(get|tee)"
"t_fmemopencheerp.wasm",1,0,1,"i32.const"
"t_fmemopencheerp.wasm",2,1,1,"i32.const"
"t_fmemopencheerp.wasm",3,5,2,"local.(get|tee)"
"t_fmemopencheerp.wasm",4,1,2,"local.(get|tee)"
"t_fmemopencheerp.wasm",5,1,5,"i32.const"
"t_fmemopencheerp.wasm",6,7,7,"i32.load"
"t_fmemopencheerp.wasm",7,7,10,"local.(get|tee)"
