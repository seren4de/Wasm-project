Input file: zigzag_conversioncheerp.wasm
  binary:    zigzag_conversioncheerp.wasm

Functions:           58
  Imported:           5
  Non-imported:      53
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         10
  Of those, unique functions:    10 (i.e., at least 17.24% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      6735
  call:              89 (1.32% of all instructions)
  call_indirect:     15 (0.22% of all instructions, 14.42% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      5 × global.get   11 × global.set   16 total (31/69% split)
  #1 i32
     init: i32.const 1048840
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048848
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050668
     12 × global.get    0 × global.set   12 total (100/0% split)
  #4 i32
     init: i32.const 1050616
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1048824
      7 × global.get    0 × global.set    7 total (100/0% split)
  #6 i32
     init: i32.const 1050296
      4 × global.get    0 × global.set    4 total (100/0% split)
  #7 i32
     init: i32.const 1050400
      4 × global.get    0 × global.set    4 total (100/0% split)
  #8 i32
     init: i32.const 1050504
      4 × global.get    0 × global.set    4 total (100/0% split)
  #9 i32
     init: i32.const 1050656
      4 × global.get    0 × global.set    4 total (100/0% split)
  #10 i32
     init: i32.const 1049872
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1049868
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049876
      3 × global.get    0 × global.set    3 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      4 (7.55% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   53(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"zigzag_conversioncheerp.wasm",53,100,"[]",0,0

Counts of function types (9 unique types):
    1  (1.72%) × [] -> [i32]
    1  (1.72%) × [i32, i32, i32, i32, i32] -> [i32]
    3  (5.17%) × [] -> []
    5  (8.62%) × [i32] -> []
    5  (8.62%) × [i32, i32] -> []
    8 (13.79%) × [i32] -> [i32]
    8 (13.79%) × [i32, i32, i32, i32] -> [i32]
   11 (18.97%) × [i32, i32, i32] -> [i32]
   16 (27.59%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 8 (15.09% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    3]   length:   3   unique funcs:    3   type: [i32, i32, i32, i32] -> [i32]
         range: [    4,    6]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    7,    7]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
  5 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × fixed index:      5                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               11
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #5 is indirectly called with a fixed table index
  global.get 9
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #3
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #4
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 5
  class #5
    type: [i32, i32] -> [i32]
    start idx: Some(5), end idx: Some(5)
    size (of class): 1
    count (how often class appears): 5
  total classes: 6

CSV data for further analysis: zigzag_conversioncheerp.wasm,6735,89,15,14.423077,58,10,3,6,1,5,2.5,2,176,42,23.863636,31,17.613636,15,8.522727

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"zigzag_conversioncheerp.wasm",0,1,1,"local.(get|tee)"
"zigzag_conversioncheerp.wasm",1,3,1,"local.(get|tee)"
"zigzag_conversioncheerp.wasm",2,1,1,"i32.const"
"zigzag_conversioncheerp.wasm",3,3,2,"local.(get|tee)"
"zigzag_conversioncheerp.wasm",4,3,5,"i32.load"
"zigzag_conversioncheerp.wasm",5,1,5,"i32.const"
