Input file: test_complexcheerp.wasm
  binary:    test_complexcheerp.wasm

Functions:          104
  Imported:           5
  Non-imported:      99
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 11.54% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:     17055
  call:             231 (1.35% of all instructions)
  call_indirect:     37 (0.22% of all instructions, 13.81% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      35 × global.get   186 × global.set   221 total (16/84% split)
  #1 i32
     init: i32.const 1049208
       0 × global.get     0 × global.set     0 total
  #2 f64
     init: f64.const 0
      24 × global.get     0 × global.set    24 total (100/0% split)
  #3 i32
     init: i32.const 1049216
       0 × global.get     0 × global.set     0 total
  #4 f32
     init: f32.const 0
      13 × global.get     0 × global.set    13 total (100/0% split)
  #5 i32
     init: i32.const 1051152
      12 × global.get     0 × global.set    12 total (100/0% split)
  #6 f64
     init: f64.const 0
      11 × global.get     0 × global.set    11 total (100/0% split)
  #7 i32
     init: i32.const 1051096
       9 × global.get     0 × global.set     9 total (100/0% split)
  #8 f32
     init: f32.const 1
       8 × global.get     0 × global.set     8 total (100/0% split)
  #9 i32
     init: i32.const 1050667
       7 × global.get     0 × global.set     7 total (100/0% split)
  #10 i32
     init: i32.const 1050984
       5 × global.get     0 × global.set     5 total (100/0% split)
  #11 i32
     init: i32.const 1050776
       5 × global.get     0 × global.set     5 total (100/0% split)
  #12 i32
     init: i32.const 1050284
       5 × global.get     0 × global.set     5 total (100/0% split)
  #13 i32
     init: i32.const 1050880
       5 × global.get     0 × global.set     5 total (100/0% split)
  #14 i32
     init: i32.const 1050276
       4 × global.get     0 × global.set     4 total (100/0% split)
  #15 i32
     init: i32.const 1050696
       4 × global.get     0 × global.set     4 total (100/0% split)
  #16 i32
     init: i32.const 1051144
       4 × global.get     0 × global.set     4 total (100/0% split)
  #17 f64
     init: f64.const 0.5
       4 × global.get     0 × global.set     4 total (100/0% split)
  #18 f32
     init: f32.const 1.5707964
       4 × global.get     0 × global.set     4 total (100/0% split)
  #19 i32
     init: i32.const 1050244
       4 × global.get     0 × global.set     4 total (100/0% split)
  #20 i32
     init: i32.const 1050232
       4 × global.get     0 × global.set     4 total (100/0% split)
  #21 f64
     init: f64.const 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
       4 × global.get     0 × global.set     4 total (100/0% split)
  #22 f32
     init: f32.const 0.5
       3 × global.get     0 × global.set     3 total (100/0% split)
  #23 f64
     init: f64.const 1.5707963267948966
       3 × global.get     0 × global.set     3 total (100/0% split)
  #24 f32
     init: f32.const -3.1415927
       3 × global.get     0 × global.set     3 total (100/0% split)
  #25 f64
     init: f64.const -4.71238898038469
       3 × global.get     0 × global.set     3 total (100/0% split)
  #26 f32
     init: f32.const 2
       3 × global.get     0 × global.set     3 total (100/0% split)
  #27 f64
     init: f64.const 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
       3 × global.get     0 × global.set     3 total (100/0% split)
  #28 f32
     init: f32.const 3.1415927
       3 × global.get     0 × global.set     3 total (100/0% split)
  #29 f64
     init: f64.const 0.00000005960464477539063
       3 × global.get     0 × global.set     3 total (100/0% split)
  #30 f64
     init: f64.const 16777216
       3 × global.get     0 × global.set     3 total (100/0% split)
  #31 f32
     init: f32.const -1
       3 × global.get     0 × global.set     3 total (100/0% split)
  #32 f32
     init: f32.const -1.5707964
       3 × global.get     0 × global.set     3 total (100/0% split)
  #33 f64
     init: f64.const -6.283185307179586
       2 × global.get     0 × global.set     2 total (100/0% split)
  #34 f64
     init: f64.const 3.141592653589793
       2 × global.get     0 × global.set     2 total (100/0% split)
  #35 f64
     init: f64.const 6.283185307179586
       2 × global.get     0 × global.set     2 total (100/0% split)
  #36 f64
     init: f64.const -3.141592653589793
       2 × global.get     0 × global.set     2 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:     27 (27.27% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   99(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"test_complexcheerp.wasm",99,100,"[]",0,0

Counts of function types (23 unique types):
    1  (0.96%) × [i32, i32, i32, i32] -> []
    1  (0.96%) × [i32, f64, i32, i32] -> [i32]
    1  (0.96%) × [i32, f64, i32, i32, i32, i32, i32] -> [i32]
    1  (0.96%) × [i32, f64, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.96%) × [f32] -> [i32]
    1  (0.96%) × [f32, i32] -> [i32]
    1  (0.96%) × [f64] -> [i32]
    1  (0.96%) × [f64, i32] -> [f64]
    2  (1.92%) × [i32] -> [f32]
    2  (1.92%) × [i32, i32, i32] -> []
    2  (1.92%) × [i32, f32, f32, f32, f32] -> []
    2  (1.92%) × [f64] -> [f32]
    3  (2.88%) × [] -> []
    3  (2.88%) × [] -> [i32]
    3  (2.88%) × [i32] -> []
    4  (3.85%) × [f32, f32] -> [f32]
    5  (4.81%) × [i32, i32, i32, i32, i32] -> [i32]
    6  (5.77%) × [f32] -> [f32]
    8  (7.69%) × [i32, i32] -> []
   10  (9.62%) × [i32, i32, i32, i32] -> [i32]
   11 (10.58%) × [i32] -> [i32]
   17 (16.35%) × [i32, i32, i32] -> [i32]
   18 (17.31%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 10 (10.10% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32, i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     2 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
    25 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               10
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     5 × fixed index:      6                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               18
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  6 call_indirect patterns in total

function #6 is indirectly called with a fixed table index
  global.get 16
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 2
  class #2
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #3
    type: [i32, i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 2
  class #4
    type: [i32, i32] -> [i32]
    start idx: Some(6), end idx: Some(6)
    size (of class): 1
    count (how often class appears): 5
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 25
  total classes: 6

CSV data for further analysis: test_complexcheerp.wasm,17055,231,37,13.80597,104,12,4,6,1,25,6.166666666666667,2,423,133,31.44208,122,28.841608,8,1.891253

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"test_complexcheerp.wasm",0,1,1,"i32.const"
"test_complexcheerp.wasm",1,3,2,"local.(get|tee)"
"test_complexcheerp.wasm",2,4,2,"i32.load"
"test_complexcheerp.wasm",3,1,2,"local.(get|tee)"
"test_complexcheerp.wasm",4,1,5,"i32.const"
"test_complexcheerp.wasm",5,4,25,"local.(get|tee)"
