Input file: parse_mancheerp.wasm
  binary:    parse_mancheerp.wasm

Functions:           53
  Imported:           5
  Non-imported:      48
  Exported:           1

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:         12
  Of those, unique functions:    12 (i.e., at least 22.64% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:      5002
  call:              77 (1.54% of all instructions)
  call_indirect:     14 (0.28% of all instructions, 15.38% of all calls)

Globals:
  #0 i32
     init: i32.const 1048576
      1 × global.get    2 × global.set    3 total (33/67% split)
  #1 i32
     init: i32.const 1048840
      0 × global.get    0 × global.set    0 total
  #2 i32
     init: i32.const 1048848
      0 × global.get    0 × global.set    0 total
  #3 i32
     init: i32.const 1050252
     12 × global.get    0 × global.set   12 total (100/0% split)
  #4 i32
     init: i32.const 1050208
      9 × global.get    0 × global.set    9 total (100/0% split)
  #5 i32
     init: i32.const 1048824
      9 × global.get    0 × global.set    9 total (100/0% split)
  #6 i32
     init: i32.const 1049992
      8 × global.get    0 × global.set    8 total (100/0% split)
  #7 i32
     init: i32.const 1050096
      8 × global.get    0 × global.set    8 total (100/0% split)
  #8 i32
     init: i32.const 1049888
      8 × global.get    0 × global.set    8 total (100/0% split)
  #9 i32
     init: i32.const 1049876
      5 × global.get    0 × global.set    5 total (100/0% split)
  #10 i32
     init: i32.const 1050248
      4 × global.get    0 × global.set    4 total (100/0% split)
  #11 i32
     init: i32.const 1049872
      4 × global.get    0 × global.set    4 total (100/0% split)
  #12 i32
     init: i32.const 1049868
      4 × global.get    0 × global.set    4 total (100/0% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:      1 (2.08% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
   48(100.00%) × []
  functions with stack allocation total: 0 (0.00%)

CSV for sp analysis and plots:
binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"parse_mancheerp.wasm",48,100,"[]",0,0

Counts of function types (8 unique types):
    2  (3.77%) × [] -> [i32]
    3  (5.66%) × [] -> []
    5  (9.43%) × [i32] -> []
    5  (9.43%) × [i32, i32] -> []
    6 (11.32%) × [i32, i32, i32, i32] -> [i32]
    7 (13.21%) × [i32] -> [i32]
    8 (15.09%) × [i32, i32, i32] -> [i32]
   17 (32.08%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 9 (18.75% of all functions)

Table elements initialization:
         range: [    0,    0]   length:   1   unique funcs:    1   type: [] -> []
         range: [    1,    4]   length:   4   unique funcs:    4   type: [i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32, i32, i32, i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32] -> [i32]
         range: [   10,   10]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   11,   11]   length:   1   unique funcs:    1   type: [i32] -> [i32]
  6 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):                5
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                7
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              4
     3 × unrestricted                         source:   i32.load   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
     5 × fixed index:      3                  source:  i32.const   type: [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               17
         functions matching by type and present in table (regardless at which table index):    4
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:      9                  source:  i32.const   type: [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                8
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              1
  7 call_indirect patterns in total

function #3 is indirectly called with a fixed table index
  global.get 10
  i32.load
  local.tee 2
  ...
function #9 is indirectly called with a fixed table index
  i32.const -1
  end
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  class #0
    type: [i32] -> []
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #1
    type: [i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 1
    count (how often class appears): 1
  class #2
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 1
  class #3
    type: [i32, i32, i32] -> [i32]
    start idx: Some(9), end idx: Some(9)
    size (of class): 1
    count (how often class appears): 1
  class #4
    type: [i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 4
    count (how often class appears): 2
  class #5
    type: [i32, i32, i32, i32] -> [i32]
    start idx: None, end idx: None
    size (of class): 3
    count (how often class appears): 3
  class #6
    type: [i32, i32] -> [i32]
    start idx: Some(3), end idx: Some(3)
    size (of class): 1
    count (how often class appears): 5
  total classes: 7

CSV data for further analysis: parse_mancheerp.wasm,5002,77,14,15.384615,53,12,3,7,1,5,2,1,163,44,26.993866,28,17.177914,9,5.5214725

CSV data on CFI classes:
benchmark,binary,class,size,count,source
"parse_mancheerp.wasm",0,1,1,"local.(get|tee)"
"parse_mancheerp.wasm",1,1,1,"local.(get|tee)"
"parse_mancheerp.wasm",2,3,1,"local.(get|tee)"
"parse_mancheerp.wasm",3,1,1,"i32.const"
"parse_mancheerp.wasm",4,4,2,"local.(get|tee)"
"parse_mancheerp.wasm",5,3,3,"i32.load"
"parse_mancheerp.wasm",6,1,5,"i32.const"
